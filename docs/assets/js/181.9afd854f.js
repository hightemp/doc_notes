(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{453:function(n,e,t){"use strict";t.r(e);var r=t(14),i=Object(r.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("Add Binary FileSystem and Multiple Template Renderer")]),n._v(" "),e("p",[e("strong",[n._v("Add Binary FileSystem")])]),n._v(" "),e("blockquote",[e("p",[n._v("go get -u github.com/jteeuwen/go-bindata/â€¦"),e("br"),n._v("\ngo get github.com/elazarl/go-bindata-assetfs"),e("br"),n._v("\ngo get github.com/gin-contrib/static")])]),n._v(" "),e("p",[n._v("bfs.go")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import(  \n    "net/http"  \n)  \n  \nimport (  \n    "github.com/elazarl/go-bindata-assetfs"  \n)  \n  \ntype BFS struct {  \n    FileSystem http.FileSystem  \n}  \n  \nfunc (bfs *BFS) Open(name string) (http.File, error) {  \n    return bfs.FileSystem.Open(name)  \n}  \n  \nfunc (bfs *BFS) Exists(prefix string, filepath string) bool {  \n    var err error  \n    var url string  \n    url = strings.TrimPrefix(filepath, prefix)  \n    if len(url) < len(filepath) {  \n        _, err = bfs.FileSystem.Open(url)  \n        if err != nil {  \n            return false  \n        }  \n        return true  \n    }  \n    return false  \n}  \n  \nfunc GetBFS(root string) *BFS {  \n    var fs *assetfs.AssetFS  \n    fs = &assetfs.AssetFS{Asset, AssetDir, AssetInfo, root}  \n    return &BFS{ fs }  \n}\n')])])]),e("p",[n._v("server.go")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import (  \n    "crypto/tls"  \n    "net/http"  \n)  \n  \nimport (  \n    "github.com/gin-gonic/gin"  \n)  \n  \nimport (  \n    **"github.com/gin-contrib/static"**  \n)  \n  \nimport (  \n    "github.com/facebookgo/grace/gracehttp"  \n)  \n  \nvar (  \n    SSLCRT string = "/etc/letsencrypt/live/[domain]/fullchain.pem"  \n    SSLKEY string = "/etc/letsencrypt/live/[domain]/privkey.pem"  \n)  \n  \nfunc main() {  \n    r := gin.Default()  \n    **r.Use(static.Serve("/files", GetBFS("assets/files")))**  \n    r.GET("/ping", func(c *gin.Context) {  \n        c.JSON(200, gin.H{  \n            "message": "pong",  \n        })  \n    })  \n    var x509 tls.Certificate  \n    x509, err = tls.LoadX509KeyPair(SSLCRT, SSLKEY)  \n    if err != nil {  \n        return  \n    }  \n    var server *http.Server  \n    server = &http.Server{  \n        Addr: ":8080",  \n        Handler: router,  \n        TLSConfig: &tls.Config{  \n            Certificates: []tls.Certificate{ x509 },  \n        },  \n    }  \n    gracehttp.Serve(server)  \n}\n')])])]),e("p",[e("strong",[n._v("Add Multiple Template Renderer")])]),n._v(" "),e("blockquote",[e("p",[n._v("go get github.com/gin-contrib/multitemplate")])]),n._v(" "),e("p",[n._v("tpl.go")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import (  \n    "fmt"  \n    "html/template"  \n)  \n  \nfunc LoadTemplates(paths ...string) *template.Template {  \n    var err error  \n    var tpl *template.Template  \n    var path string  \n    var data []byte  \n    for _, path = range paths {  \n        data, err = Asset("assets/pages/" + path)  \n        if err != nil {  \n            fmt.Println(err)  \n        }  \n        var tmp *template.Template  \n        if tpl == nil {  \n            tpl = template.New(path)  \n        }  \n        if path == tpl.Name() {  \n            tmp = tpl  \n        } else {  \n            tmp = tpl.New(path)  \n        }  \n        _, err = tmp.Parse(string(data))  \n        if err != nil {  \n            fmt.Println(err)  \n        }  \n    }  \n    return tpl  \n}\n')])])]),e("p",[n._v("server.go")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import (  \n    "crypto/tls"  \n    "net/http"  \n)  \n  \nimport (  \n    "github.com/gin-gonic/gin"  \n)  \n  \nimport (  \n    "github.com/gin-contrib/static"  \n)  \n  \nimport (  \n    **"github.com/gin-contrib/multitemplate"**  \n)  \n  \nimport (  \n    "github.com/facebookgo/grace/gracehttp"  \n)  \n  \nvar (  \n    SSLCRT string = "/etc/letsencrypt/live/[domain]/fullchain.pem"  \n    SSLKEY string = "/etc/letsencrypt/live/[domain]/privkey.pem"  \n)  \n  \nfunc main() {  \n    **var render multitemplate.Render  \n    render = multitemplate.New()  \n    render.Add("index", LoadTemplates("base.tpl", "index.tpl"))  \n    render.Add("login", LoadTemplates("base.tpl", "login.tpl"))**  \n    r := gin.Default()  \n    **r.HTMLRender = render**  \n    r.Use(static.Serve("/files", GetBFS("assets/files")))  \n    r.GET("/", func(c *gin.Context) {  \n        c.HTML(200, **"index"**, gin.H{  \n            "Title": "Go-Server",  \n        })  \n    })  \n    r.GET("/login", func(c *gin.Context) {  \n        c.HTML(200, **"login"**, gin.H{  \n            "Title": "Go-Server",  \n        })  \n    })  \n    var x509 tls.Certificate  \n    x509, err = tls.LoadX509KeyPair(SSLCRT, SSLKEY)  \n    if err != nil {  \n        return  \n    }  \n    var server *http.Server  \n    server = &http.Server{  \n        Addr: ":8080",  \n        Handler: router,  \n        TLSConfig: &tls.Config{  \n            Certificates: []tls.Certificate{ x509 },  \n        },  \n    }  \n    gracehttp.Serve(server)  \n}\n\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);