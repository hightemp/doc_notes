(window.webpackJsonp=window.webpackJsonp||[]).push([[253],{524:function(e,a,n){"use strict";n.r(a);var r=n(14),t=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("https://habr.com/ru/post/235485/")]),e._v(" "),a("h4",{attrs:{id:"задача"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#задача"}},[e._v("#")]),e._v(" Задача")]),e._v(" "),a("p",[e._v("Настроить использование RBAC в Yii2.")]),e._v(" "),a("h4",{attrs:{id:"условия"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#условия"}},[e._v("#")]),e._v(" Условия")]),e._v(" "),a("p",[e._v("Список возможных ролей:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("guest")]),e._v(" — не авторизованный юзер;")]),e._v(" "),a("li",[a("strong",[e._v("BRAND")]),e._v(" — авторизованный юзер, наследует разрешения роли "),a("strong",[e._v("guest")]),e._v(" и имеет свои уникальные разрешения;")]),e._v(" "),a("li",[a("strong",[e._v("TALENT")]),e._v(" — авторизованный юзер, наследует разрешения роли "),a("strong",[e._v("guest")]),e._v(" и имеет свои уникальные разрешения;")]),e._v(" "),a("li",[a("strong",[e._v("admin")]),e._v(" — авторизованный юзер, наследует разрешения ролей "),a("strong",[e._v("guest")]),e._v(", "),a("strong",[e._v("BRAND")]),e._v(" и "),a("strong",[e._v("TALENT")]),e._v(" и имеет свои уникальные разрешения.")]),e._v(" "),a("li",[e._v("Роль определяется полем "),a("strong",[e._v("group")]),e._v(" в модели "),a("strong",[e._v("UserExt")]),e._v(";")]),e._v(" "),a("li",[e._v("Роли имеют вложенную структуру — одна роль может наследовать разрешения другой;")]),e._v(" "),a("li",[e._v("Используется "),a("strong",[e._v("yii\\rbac\\PhpManager")]),e._v(";")]),e._v(" "),a("li",[e._v("Не использовать назначение роли юзеру по его ID — вместо этого использовать несколько предустановленных ролей ("),a("strong",[e._v("defaultRoles")]),e._v(");")]),e._v(" "),a("li",[e._v("Генерирование конфига «роль-разрешения» будет делать консольная команда "),a("strong",[e._v("yii")]),e._v(";")]),e._v(" "),a("li",[e._v("Будут использованы расширенные правила ("),a("strong",[e._v("Rules")]),e._v(") для разрешений.")])]),e._v(" "),a("h4",{attrs:{id:"предварительная-настроика"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#предварительная-настроика"}},[e._v("#")]),e._v(" Предварительная настройка")]),e._v(" "),a("p",[a("em",[a("code",[e._v("app/config/console.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'components' => [\n    // ...\n    'authManager' => [\n        'class' => 'yii\\rbac\\PhpManager',\n    ],\n    // ...\n],\n")])])]),a("p",[a("em",[a("code",[e._v("app/config/web.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'components' => [\n    // ...\n    'authManager' => [\n        'class' => 'yii\\rbac\\PhpManager',\n        'defaultRoles' => ['admin', 'BRAND', 'TALENT'], // Здесь нет роли \"guest\", т.к. эта роль виртуальная и не присутствует в модели UserExt\n    ],\n    // ...\n],\n")])])]),a("p",[e._v("Создать директорию "),a("em",[a("code",[e._v("@app/rbac")])]),e._v(" — именно в ней будут находиться разрешения и правила.")]),e._v(" "),a("h4",{attrs:{id:"создание-разрешении"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#создание-разрешении"}},[e._v("#")]),e._v(" Создание разрешений")]),e._v(" "),a("p",[e._v("В директории "),a("em",[a("code",[e._v("@app/commands")])]),e._v(" создать контроллер, который будет генерировать массив разрешений:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/commands/RbacController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php\nnamespace app\\commands;\n \nuse Yii;\nuse yii\\console\\Controller;\nuse \\app\\rbac\\UserGroupRule;\n \nclass RbacController extends Controller\n{\n    public function actionInit()\n    {\n        $authManager = \\Yii::$app->authManager;\n \n        // Create roles\n        $guest  = $authManager->createRole('guest');\n        $brand  = $authManager->createRole('BRAND');\n        $talent = $authManager->createRole('TALENT');\n        $admin  = $authManager->createRole('admin');\n \n        // Create simple, based on action{$NAME} permissions\n        $login  = $authManager->createPermission('login');\n        $logout = $authManager->createPermission('logout');\n        $error  = $authManager->createPermission('error');\n        $signUp = $authManager->createPermission('sign-up');\n        $index  = $authManager->createPermission('index');\n        $view   = $authManager->createPermission('view');\n        $update = $authManager->createPermission('update');\n        $delete = $authManager->createPermission('delete');\n \n        // Add permissions in Yii::$app->authManager\n        $authManager->add($login);\n        $authManager->add($logout);\n        $authManager->add($error);\n        $authManager->add($signUp);\n        $authManager->add($index);\n        $authManager->add($view);\n        $authManager->add($update);\n        $authManager->add($delete);\n \n \n        // Add rule, based on UserExt->group === $user->group\n        $userGroupRule = new UserGroupRule();\n        $authManager->add($userGroupRule);\n \n        // Add rule \"UserGroupRule\" in roles\n        $guest->ruleName  = $userGroupRule->name;\n        $brand->ruleName  = $userGroupRule->name;\n        $talent->ruleName = $userGroupRule->name;\n        $admin->ruleName  = $userGroupRule->name;\n \n        // Add roles in Yii::$app->authManager\n        $authManager->add($guest);\n        $authManager->add($brand);\n        $authManager->add($talent);\n        $authManager->add($admin);\n \n        // Add permission-per-role in Yii::$app->authManager\n        // Guest\n        $authManager->addChild($guest, $login);\n        $authManager->addChild($guest, $logout);\n        $authManager->addChild($guest, $error);\n        $authManager->addChild($guest, $signUp);\n        $authManager->addChild($guest, $index);\n        $authManager->addChild($guest, $view);\n \n        // BRAND\n        $authManager->addChild($brand, $update);\n        $authManager->addChild($brand, $guest);\n \n        // TALENT\n        $authManager->addChild($talent, $update);\n        $authManager->addChild($talent, $guest);\n \n        // Admin\n        $authManager->addChild($admin, $delete);\n        $authManager->addChild($admin, $talent);\n        $authManager->addChild($admin, $brand);\n    }\n}\n")])])]),a("p",[e._v("Класс "),a("strong",[e._v("UserGroupRule")]),e._v(" отвечает за проверку равенства роли текущего юзера, роли прописанной в массиве разрешений. Этим мы избегаем проблемы с назначением роли юзеру по его ID."),a("br"),e._v(" "),a("em",[a("code",[e._v("app/rbac/UserGroupRule.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php\nnamespace app\\rbac;\n \nuse Yii;\nuse yii\\rbac\\Rule;\n \nclass UserGroupRule extends Rule\n{\n    public $name = 'userGroup';\n \n    public function execute($user, $item, $params)\n    {\n        if (!\\Yii::$app->user->isGuest) {\n            $group = \\Yii::$app->user->identity->group;\n            if ($item->name === 'admin') {\n                return $group == 'admin';\n            } elseif ($item->name === 'BRAND') {\n                return $group == 'admin' || $group == 'BRAND';\n            } elseif ($item->name === 'TALENT') {\n                return $group == 'admin' || $group == 'TALENT';\n            }\n        }\n        return true;\n    }\n}\n")])])]),a("p",[e._v("Теперь в контроллере из метода "),a("strong",[e._v("behaviors")]),e._v(" можно убрать правило "),a("strong",[e._v("access")]),e._v(":"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/controllers/SiteController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public function behaviors()\n{\n    return [\n        \n        // ...\n        'access' => [\n            'class' => AccessControl::className(),\n            'only' => ['logout'],\n            'rules' => [\n                [\n                    'actions' => ['logout'],\n                    'allow' => true,\n                    'roles' => ['@'],\n                ],\n            ],\n        ],\n        // ...\n         \n    ];\n}\n")])])]),a("h4",{attrs:{id:"проверка-доступа"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#проверка-доступа"}},[e._v("#")]),e._v(" Проверка доступа")]),e._v(" "),a("p",[e._v("Способ 1 — в методе контроллера:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/controllers/SiteController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public function actionAbout()\n{\n    if (!\\Yii::$app->user->can('about')) {\n        throw new ForbiddenHttpException('Access denied');\n    }\n    return $this->render('about');\n}\n")])])]),a("p",[e._v("Способ 2 — прописать "),a("strong",[e._v("beforeAction")]),e._v(", чтобы не писать "),a("em",[a("code",[e._v('"if !\\Yii::$app->user->can"')])]),e._v(" в каждом методе:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/controllers/SiteController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public function beforeAction($action)\n{\n    if (parent::beforeAction($action)) {\n        if (!\\Yii::$app->user->can($action->id)) {\n            throw new ForbiddenHttpException('Access denied');\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n")])])]),a("h4",{attrs:{id:"генерирование-фаилов-разрешении"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#генерирование-фаилов-разрешении"}},[e._v("#")]),e._v(" Генерирование файлов разрешений")]),e._v(" "),a("p",[e._v("Чтобы сгенерировать файл с массивом разрешений нужно в корне проекта выполнить команду:")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("Внимание!")]),a("br"),e._v("\nПеред выполнением этой команды нужно удалить файлы "),a("em",[a("code",[e._v("@app/rbac/items.php")])]),e._v(" и "),a("em",[a("code",[e._v("@app/rbac/rules.php")])]),e._v(" чтобы избежать конфликтов слияния")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./yii rbac/init\n")])])]),a("p",[e._v("В директории "),a("em",[a("code",[e._v("@app/rbac")])]),e._v(" должны появиться два файла:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/rbac/items.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php\nreturn [\n    'login' => [\n        'type' => 2,\n    ],\n    'logout' => [\n        'type' => 2,\n    ],\n    'error' => [\n        'type' => 2,\n    ],\n    'sign-up' => [\n        'type' => 2,\n    ],\n    'index' => [\n        'type' => 2,\n    ],\n    'view' => [\n        'type' => 2,\n    ],\n    'update' => [\n        'type' => 2,\n    ],\n    'delete' => [\n        'type' => 2,\n    ],\n    'guest' => [\n        'type' => 1,\n        'ruleName' => 'userGroup',\n        'children' => [\n            'login',\n            'logout',\n            'error',\n            'sign-up',\n            'index',\n            'view',\n        ],\n    ],\n    'BRAND' => [\n        'type' => 1,\n        'ruleName' => 'userGroup',\n        'children' => [\n            'update',\n            'guest',\n        ],\n    ],\n    'TALENT' => [\n        'type' => 1,\n        'ruleName' => 'userGroup',\n        'children' => [\n            'update',\n            'guest',\n        ],\n    ],\n    'admin' => [\n        'type' => 1,\n        'children' => [\n            'delete',\n            'TALENT',\n            'BRAND',\n        ],\n    ],\n];\n")])])]),a("p",[a("em",[a("code",[e._v("app/rbac/rules.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?php\nreturn [\n    \'userGroup\' => \'O:22:"app\\\\rbac\\\\UserGroupRule":3:{s:4:"name";s:9:"userGroup";s:9:"createdAt";N;s:9:"updatedAt";N;}\',\n];\n')])])]),a("h4",{attrs:{id:"расширенное-правило-rule-для-разрешении"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#расширенное-правило-rule-для-разрешении"}},[e._v("#")]),e._v(" Расширенное правило ("),a("strong",[e._v("Rule")]),e._v(") для разрешений")]),e._v(" "),a("p",[e._v("Например, нужно запретить юзерам редактировать ("),a("strong",[e._v("update")]),e._v(") не свой профиль. Для этого нужно расширенное правило:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/rbac/UserProfileOwnerRule.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php\nnamespace app\\rbac;\n \nuse yii\\rbac\\Rule;\nuse yii\\rbac\\Item;\n \nclass UserProfileOwnerRule extends Rule\n{\n    public $name = 'isProfileOwner';\n \n    /**\n     * @param string|integer $user   the user ID.\n     * @param Item           $item   the role or permission that this rule is associated with\n     * @param array          $params parameters passed to ManagerInterface::checkAccess().\n     *\n     * @return boolean a value indicating whether the rule permits the role or permission it is associated with.\n     */\n    public function execute($user, $item, $params)\n    {\n        if (\\Yii::$app->user->identity->group == 'admin') {\n            return true;\n        }\n        return isset($params['profileId']) ? \\Yii::$app->user->id == $params['profileId'] : false;\n    }\n}\n")])])]),a("p",[e._v("В файл "),a("em",[a("code",[e._v("@app/rbac/RbacController.php")])]),e._v(" добавить:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/rbac/RbacController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("use \\app\\rbac\\UserProfileOwnerRule;\n \n// add the rule\n$userProfileOwnerRule = new UserProfileOwnerRule();\n$authManager->add($userProfileOwnerRule);\n \n$updateOwnProfile = $authManager->createPermission('updateOwnProfile');\n$updateOwnProfile->ruleName = $userProfileOwnerRule->name;\n$authManager->add($updateOwnProfile);\n \n$authManager->addChild($brand, $updateOwnProfile);\n$authManager->addChild($talent, $updateOwnProfile);\n")])])]),a("p",[e._v("Проверка доступа в методе контроллера:"),a("br"),e._v(" "),a("em",[a("code",[e._v("app/controllers/UsersController.php")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public function actionUpdate($id)\n{\n    if (!\\Yii::$app->user->can('updateOwnProfile', ['profileId' => \\Yii::$app->user->id])) {\n        throw new ForbiddenHttpException('Access denied');\n    }\n    // ...\n} \n")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);