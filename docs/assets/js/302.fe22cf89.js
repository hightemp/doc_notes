(window.webpackJsonp=window.webpackJsonp||[]).push([[302],{572:function(e,t,r){"use strict";r.r(t);var s=r(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("https://medium.com/intelliconnect-engineering/heres-how-to-execute-raw-sql-queries-in-rust-with-diesel-45902931a5f0")]),e._v(" "),t("h1",{attrs:{id:"here-s-how-to-execute-raw-sql-queries-in-rust-with-diesel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#here-s-how-to-execute-raw-sql-queries-in-rust-with-diesel"}},[e._v("#")]),e._v(" Here’s How to Execute Raw SQL queries in Rust with Diesel")]),e._v(" "),t("p",[e._v("We all know diesel is the most productive way to interact with databases in Rust.")]),e._v(" "),t("p",[e._v("Diesel’s main goal is to prevent runtime errors at compile-time. For that, we create a representation of our database schema in Rust’s type system and use it to type check the entire query and make sure it is valid semantically.")]),e._v(" "),t("p",[e._v("Some use cases require us to execute raw SQL queries making it simpler than to build using a query builder. Diesel offers some escape hatches to execute raw SQL queries. This introduces a challenge to ensure type safety with a requirement for Diesel to access fields by name instead of index resulting in a scenario where you cannot deserialize these results into a tuple or a regular struct.")]),e._v(" "),t("p",[e._v("Now let's see how to execute raw SQL queries with Diesel.")]),e._v(" "),t("p",[e._v("If you want to know how to use Rust with Diesel for simple CRUD Operation, refer Diesel’s "),t("a",{attrs:{href:"https://diesel.rs/guides/getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting Started Guide"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h1",{attrs:{id:"let-s-get-started"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-s-get-started"}},[e._v("#")]),e._v(" Let's get started")]),e._v(" "),t("p",[e._v("We’ll be using "),t("code",[e._v("sql_query")]),e._v(" function to build queries and will derive "),t("code",[e._v("QueryableByName")]),e._v(" trait to our structs. Its important for Diesel needs to know SQL type of each field which can be done by annotation your struct with "),t("code",[e._v("#[table_name = “some_table”")]),e._v("] or by annotating each field with "),t("code",[e._v("#[sql_type = “SomeType”]")])]),e._v(" "),t("p",[e._v("Also note that if you combine both table_name and sql_type annotations, Diesel will override any fields using sql_type and pick the rest from the table.")]),e._v(" "),t("p",[e._v("Click "),t("a",{attrs:{href:"https://gist.github.com/steveh/7c7145409a5eed6b698ee8b609b6d1fc#file-postgresql-diesel-rust-types-md",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("here")]),t("OutboundLink")],1),e._v(" to learn more mapping of PostgreSQL, Diesel, and Rust types")]),e._v(" "),t("p",[e._v("// File: src/models.rs")]),e._v(" "),t("p",[e._v("// Here we bring the Diesel types and table into scope"),t("br"),e._v(" "),t("strong",[e._v("use")]),e._v(" diesel::sql_types:😗;"),t("br"),e._v(" "),t("strong",[e._v("use")]),e._v(" crate::schema::user_login;")]),e._v(" "),t("p",[e._v("// Notice that "),t("code",[e._v("fullname")]),e._v(" is not a column on our users table,"),t("br"),e._v("\n// but we're are going to return it by"),t("br"),e._v("\n// concatenating the first and last name together."),t("br"),e._v("\n// QueryableByName will use the users table for"),t("br"),e._v("\n// all other column types."),t("br"),e._v("\n#[derive(Debug, QueryableByName)]"),t("br"),e._v('\n#[table_name = "user_login"]'),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" "),t("strong",[e._v("struct")]),e._v(" "),t("strong",[e._v("User")]),e._v(" {"),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" id: i64,"),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" firstname: String,"),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" lastname: String,"),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" email: String,"),t("br"),e._v('\n#[sql_type = "Text"]'),t("br"),e._v(" "),t("strong",[e._v("pub")]),e._v(" fullname : String,"),t("br"),e._v("\n}")]),e._v(" "),t("p",[t("strong",[e._v("Example of schema")])]),e._v(" "),t("p",[e._v("table! {"),t("br"),e._v("\nuser_login (id) {"),t("br"),e._v("\nid -> Int8,"),t("br"),e._v("\nfirstname -> Text,"),t("br"),e._v("\nlastname -> Text,"),t("br"),e._v("\nemail -> Text,"),t("br"),e._v("\n}"),t("br"),e._v("\n}")]),e._v(" "),t("p",[t("strong",[e._v("Example of Table in database")])]),e._v(" "),t("p",[t("strong",[e._v("CREATE")]),e._v(" "),t("strong",[e._v("TABLE")]),e._v(" user_login("),t("br"),e._v(" "),t("strong",[e._v("id")]),e._v(" bigserial PRIMARY "),t("strong",[e._v("KEY")]),e._v(" ,"),t("br"),e._v("\nfirstname varchar(50) "),t("strong",[e._v("NOT")]),e._v(" NULL,"),t("br"),e._v("\nlastname varchar(50) "),t("strong",[e._v("NOT")]),e._v(" NULL,"),t("br"),e._v("\nemail varchar(100) "),t("strong",[e._v("NOT")]),e._v(" NULL"),t("br"),e._v("\n);")]),e._v(" "),t("p",[t("strong",[e._v("Executing raw SQL query")])]),e._v(" "),t("p",[t("code",[e._v("[sql_query](https://docs.diesel.rs/diesel/fn.sql_query.html)")]),e._v(" function is used in cases where a query needs to be written that is not supported by query builder; here as data will deserialize its data by name, not by index, you cannot deserialize into a tuple and structs will need to have "),t("code",[e._v("#[derive(QueryableByName)]")])]),e._v(" "),t("p",[e._v("If your query returns a column of an unexpected type, the results may return a wrong value or an error")]),e._v(" "),t("p",[e._v("// File: src/main.rs")]),e._v(" "),t("p",[t("strong",[e._v("use")]),e._v(" diesel::prelude:😗;"),t("br"),e._v(" "),t("strong",[e._v("use")]),e._v(" diesel::sql_query;"),t("br"),e._v(" "),t("strong",[e._v("mod")]),e._v(" model;//do change database-url if you don't want your code to break"),t("br"),e._v(" "),t("strong",[e._v("fn")]),e._v(" "),t("strong",[e._v("getdbconn")]),e._v("() -> PgConnection {"),t("br"),e._v(" "),t("strong",[e._v("let")]),e._v(' database_url = "Database-URL";'),t("br"),e._v("\nPgConnection::establish(&database_url).unwrap()"),t("br"),e._v("\n}")]),e._v(" "),t("p",[t("strong",[e._v("fn")]),e._v(" "),t("strong",[e._v("main")]),e._v("() {"),t("br"),e._v(" "),t("strong",[e._v("let")]),e._v(" conn = getdbconn();")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('**let** results = sql_query("SELECT  \nid,  \nfirstname,  \nlastname,  \nemail,  \nCONCAT(firstname, lastname) as fullname  \n')])])]),t("p",[e._v("FROM"),t("br"),e._v('\nuser_login")'),t("br"),e._v("\n.load::"),t("a",{attrs:{href:"model::User"}},[e._v("model::User")]),e._v("(&conn)"),t("br"),e._v("\n.unwrap();"),t("br"),e._v('\nprintln!("{:?}",results);'),t("br"),e._v("\n}")]),e._v(" "),t("p",[e._v("You can find the code "),t("a",{attrs:{href:"https://github.com/intelliconnect/rust-lang-apps-rawsql",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),t("br"),e._v("\nThanks for reading!")])])}),[],!1,null,null,null);t.default=n.exports}}]);