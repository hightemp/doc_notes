(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{515:function(n,e,s){"use strict";s.r(e);var t=s(14),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("https://klisl.com/yii2-dependency_injection.html")]),n._v(" "),e("p",[n._v("Внедрение зависимостей ("),e("em",[n._v("dependency injection")]),n._v(") позволяет получить экземпляр нужного класса из специального объекта «контейнера» с автоматической передачей аргументов его конструктору, вместо того, что бы создавать его самому. Кроме того, контейнер позволяет реализовать шаблон проектирования «"),e("strong",[n._v("Singleton")]),n._v("»."),e("br"),n._v("\nВ случае фреймворка "),e("strong",[n._v("Yii")]),n._v(", данный служебный объект называется «Контейнер внедрения зависимостей». В "),e("strong",[n._v("Laravel")]),n._v(" – «Сервис-контейнер».")]),n._v(" "),e("p",[n._v("Нужный пользователю объект создается контейнером, при этом все зависимости этого объекта (аргументы) передаются ему автоматически в виде экземпляров указанных классов (или классов реализующих указанные интерфейсы):")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public function __construct(EmployeeRepository $employees, EventDispatcher $dispatcher)\n")])])]),e("p",[n._v("Таким образом, вместо (например):")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$repository = new YiiEmployeeRepository($db);\n$dispatcher = new MailEventDispatcher();\n\n$employeeService = new EmployeeService($repository, $dispatcher);\n")])])]),e("p",[n._v("достаточно прописать:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$employeeService = Yii::$container->get('EmployeeService');\n")])])]),e("p",[n._v("Для того, что бы работало внедрение зависимостей, в контейнере должны быть зарегистрированы и класс, объект которого мы хотим получить, и классы, которые указаны в его конструкторе (зависимости). Таким образом будут созданы и объекты этих классов. Если эти классы так же имеют какие-либо зависимости в своих конструкторах, то и те зависимости должны быть зарегистрированны в контейнере. Все основные классы Yii (например Request или Db) там регистрируются автоматически. Поэтому следить нужно только за пользовательскими.")]),n._v(" "),e("p",[n._v("Если вы создаете объект какого-либо своего класс, например сервиса или репозитория, то их нужно добавить в контейнер, если желаете воспользоваться внедрением зависимостей.")]),n._v(" "),e("h5",{attrs:{id:"добаление-класса-в-контеинер-внедрения-зависимостеи"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#добаление-класса-в-контеинер-внедрения-зависимостеи"}},[n._v("#")]),n._v(" Добаление класса в контейнер внедрения зависимостей.")]),n._v(" "),e("p",[e("strong",[n._v("1.")]),n._v(" В Yii, это можно сделать прямо добавив секцию "),e("strong",[n._v("container")]),n._v(" в конфигурационные файлы web.php, console.php и test.php (если работать с yii2-app-basic) или в common/config/main.php (в yii2-app-advanced):")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$config = [\n    'id' => 'basic',\n    'basePath' => dirname(__DIR__),\n    'bootstrap' => ['log'],\n    'container' => [\n        'singletons' => [\n            'app\\repositories\\EmployeeRepository' => ['class' => 'app\\repositories\\YiiEmployeeRepository'],\n            'app\\dispatchers\\EventDispatcher' => ['class' => 'app\\dispatchers\\MailEventDispatcher'],\n            'EmployeeService' => ['class' => 'app\\services\\EmployeeService'],\n        ],\n    ],    'components' => [\n        ...\n    ],\n],\n")])])]),e("p",[n._v("Тут регистрируется класс сервиса - 'EmployeeService' и две его зависимости из примера выше. Для самого сервиса указываю его короткое название – алиас, чтобы получать его из контейнера по данному алиасу.")]),n._v(" "),e("p",[n._v("Вместо свойства "),e("strong",[n._v("singletons")]),n._v(" можно было бы указать свойство "),e("strong",[n._v("definitions")]),n._v(". singletons указывается, если мы хотим работать всегда только с одним экземпляром указанных классов, а не создавать, каждый раз, новый объект. Каждый раз, когда у контейнера вызывается метод get(), возвращается тот же экземпляр указанного класса.")]),n._v(" "),e("p",[e("strong",[n._v("2.")]),n._v(" Кроме указания в конфигурационных файлах Yii, добавить классы в контейнер можно с помощью его методов, в данном случае "),e("strong",[n._v("setSingleton()")]),n._v(". Делать это, желательно, на этапе загрузки приложения, а не где-то в контроллере. Для этого как раз предназначен класс "),e("strong",[n._v("Bootstrap")]),n._v(". Моя статья про предзагрузку в Yii "),e("a",{attrs:{href:"http://klisl.com/yii2-bootstrap.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("http://klisl.com/yii2-bootstrap.html"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("Создаем класс "),e("strong",[n._v("Bootstrap")]),n._v(" (если нету), реализующий интерфейс "),e("strong",[n._v("BootstrapInterface")]),n._v(" и регистрируем в нем классы:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<?php\n\nnamespace app;\n\nuse app\\dispatchers\\EventDispatcher;\nuse app\\dispatchers\\MailEventDispatcher;\nuse app\\repositories\\EmployeeRepository;\nuse app\\repositories\\YiiEmployeeRepository;\nuse app\\services\\EmployeeService;\nuse yii\\base\\BootstrapInterface;\n\nclass Bootstrap implements BootstrapInterface\n{\n    public function bootstrap($app)\n    {\n        $container = \\Yii::$container;\n        $container->setSingleton(EventDispatcher::class, MailEventDispatcher::class);\n        $container->setSingleton(EmployeeRepository::class, YiiEmployeeRepository::class);\n        $container->setSingleton('EmployeeService', EmployeeService::class);\n    }\n}\n")])])]),e("p",[n._v("В качестве второго аргумента можно передать массив для заполнения значений публичных свойств создаваемого объекта:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$container->setSingleton('yii\\db\\Connection', [\n 'dsn' => 'mysql:host=127.0.0.1;dbname=demo',\n 'username' => 'root',\n 'password' => '',\n 'charset' => 'utf8',\n]);\n")])])]),e("p",[n._v("Можно передавать анонимную функцию, которая будет выполнена при обращении к контейнеру (т.е. при запросе объекта):")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$container->setSingleton(MailerInterface::class, function () use ($app) {\n return $app->mailer;\n});\n")])])]),e("p",[n._v("В качестве третьего аргумента можно передать массив параметров для конструктора создаваемого объекта:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$container->setSingleton(ContactService::class, [], [\n    $app->params['adminEmail']\n]);\n")])])]),e("hr"),n._v(" "),e("p",[n._v("Если не нужно использовать шаблон проектирования Singleton, регистрируем используя метод set:")]),n._v(" "),e("p",[n._v("$container->set(ContactService::class, [], [\n$app->params['adminEmail']\n]);")]),n._v(" "),e("p",[n._v("Можно настроить несколько компонентов сразу передав массив в метод setDefinitions() или setSingletons(). Фреймворк обойдёт массив и вызовет для каждого элемента set() или setSingleton() соответственно. Например:")]),n._v(" "),e("p",[n._v("$container->setDefinitions([\nEventDispatcher::class => MailEventDispatcher::class,\n'yii\\web\\Response' => [\n'class' => 'app\\components\\Response',\n'format' => 'json'\n],\n]);")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("Кроме регистрации класса в контейнере по имени данного класса или его интерфейса можно зарегистрировать псевдоним:")]),n._v(" "),e("p",[n._v("$container->setSingleton('super_mailer', function () use ($app) {\nreturn $app->mailer;\n});")]),n._v(" "),e("p",[n._v("Если конструктор одного из последующих классов для регистрации в контейнере будет нуждаться в классе зарегистрированном с помощью псевдонима, используется вызов Instance::of, например:")]),n._v(" "),e("p",[n._v("$container->setSingleton(ContactService::class, [], [\n$app->params['adminEmail'],\nInstance::of('super_mailer')\n]);")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("Класс Bootstrap так же нужно зарегистрировать, чтобы он загрузился при запуске приложения. Для этого в нужном конфигурационном файле (backend\\config\\main.php, console\\config\\main.php или frontend\\config\\main.php но не в common\\config\\main.php) добавляем строку с название класса и пространством имен:")]),n._v(" "),e("p",[n._v("'bootstrap' => [\n'log',\n'app\\Bootstrap'\n],")]),n._v(" "),e("p",[n._v("В данном случае я разместил класс в корне приложения "),e("strong",[n._v("Yii2")]),n._v(" ("),e("strong",[n._v("basic")]),n._v("). Для "),e("strong",[n._v("Advanced")]),n._v(" это стоило бы делать, например, в каталоге "),e("strong",[n._v("common")]),n._v(".")]),n._v(" "),e("p",[n._v("В зависимости от места создания файла "),e("strong",[n._v("Bootstrap")]),n._v(", может потребоваться обновить автозагрузчик "),e("strong",[n._v("Composera")]),n._v(":")]),n._v(" "),e("p",[n._v("composer dump-autoload –o")]),n._v(" "),e("p",[n._v("Контейнер, автоматически, создает экземпляры зависимых объектов, вставляя их в создаваемый объект, настраивает и, наконец, возвращает вновь созданный объект.")]),n._v(" "),e("h5",{attrs:{id:"пример-использования-контеинера-внедрения-зависимостеи-с-контроллером"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#пример-использования-контеинера-внедрения-зависимостеи-с-контроллером"}},[n._v("#")]),n._v(" Пример использования контейнера внедрения зависимостей с контроллером.")]),n._v(" "),e("p",[n._v("Допустим у нас есть свои классы-сервисы:"),e("br"),n._v("\ncommon/services/MyClass1.php:")]),n._v("\n<?php\n\nnamespace app\\services;\n\nclass MyClass1\n{\n\n}\n\nи common/services/MyClass2.php:  \n\n<?php\n\nnamespace app\\services;\n\nclass MyClass2\n{\n    public $param;\n\n    public function __construct($param)\n    {\n        $this->param = $param;\n    }\n\n}\n\n  \nВ каком-то контроллере понадобился доступ к данным классам. Для этого создаем конструктор нужного класса, указываем обязательные аргументы ($id, $module, array $config = []) (IDE сама пропишет на основе родительского конструктора) и перед массивом $config прописываем нужные зависимости:  \n\nclass SiteController extends Controller\n{\n\n    protected $my1;\n    protected $my2;\n\n    public function __construct\n    (\n        $id, \n        $module, \n        MyClass1 $my1, \n        MyClass2 $my2, \n        array $config = []\n    )\n    {\n        parent::__construct($id, $module, $config);\n        $this->my1 = $my1;\n        $this->my2 = $my2;\n    }\n\n  \nВ данном примере, экземпляр класса MyClass1 будет найден и создан автоматически, специально регистрировать его в контейнере не надо. А класс MyClass2 имеет конструктор, которому необходимо передать параметр при создании объекта. Поэтому данный класс нужно зарегистрировать в контейнере вручную с указанием данного параметра (и если надо – других зависимостей):  \n\n$container->setSingleton(MyClass2::class, [], ['any_parameters']);\n\n  \nПосмотреть методы для работы с контейнером (+ примеры использования) можно в файле vendor\\yiisoft\\yii2\\di\\Container.php.")])}),[],!1,null,null,null);e.default=a.exports}}]);