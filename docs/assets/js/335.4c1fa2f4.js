(window.webpackJsonp=window.webpackJsonp||[]).push([[335],{607:function(t,a,v){"use strict";v.r(a);var e=v(14),_=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"что-такое-stateful-сервис"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#что-такое-stateful-сервис"}},[t._v("#")]),t._v(" что такое Stateful сервис")]),t._v(" "),a("p",[t._v("Stateful сервис - это сервис, который имеет состояние (state) и сохраняет его между запросами. Это отличается от Stateless сервиса, который не хранит состояния между запросами и обрабатывает каждый запрос отдельно.")]),t._v(" "),a("p",[t._v("Примером Stateful сервиса может быть онлайн-чат, который хранит состояние сеанса чата между пользователями и сохраняет его, чтобы пользователи могли продолжить общение после перезагрузки страницы или выхода из системы.")]),t._v(" "),a("p",[t._v("Такие сервисы могут быть более мощными, но их реализация может быть более сложной и требует хранения информации о пользователе в памяти или в базе данных. Кроме того, Stateful сервисы требуют обработки запросов сессии и управления состоянием между запросами, что также может влиять на производительность и сложность разработки.")]),t._v(" "),a("h2",{attrs:{id:"напиши-пример-stateless-сервиса"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#напиши-пример-stateless-сервиса"}},[t._v("#")]),t._v(" напиши пример stateless сервиса")]),t._v(" "),a("p",[t._v("Примером Stateless сервиса может быть служба, которая генерирует случайные числа и возвращает их в ответ на запрос. Такой сервис не хранит состояние между запросами и обрабатывает каждый запрос независимо от предыдущих запросов.")]),t._v(" "),a("h2",{attrs:{id:"напиши-список-патернов-для-микросервисов"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#напиши-список-патернов-для-микросервисов"}},[t._v("#")]),t._v(" напиши список патернов для микросервисов")]),t._v(" "),a("p",[t._v("Ниже перечислены некоторые паттерны для микросервисной архитектуры:")]),t._v(" "),a("ol",[a("li",[t._v("API Gateway - предоставляет единый точку входа для внешних клиентов и обрабатывает запросы согласно правилам маршрутизации")]),t._v(" "),a("li",[t._v("Service Registry - хранит информацию о микросервисах, их доступности и положении в сети")]),t._v(" "),a("li",[t._v("Service Mesh - управляет сетью микросервисов и организует взаимодействия между ними с помощью боковых автоматических инъекций или proxy")]),t._v(" "),a("li",[t._v("Circuit Breaker - предотвращает ненужную нагрузку на микросервис, открывая “короткое замыкание” при перегрузке сервиса и предотвращая дальнейшие запросы")]),t._v(" "),a("li",[t._v("Saga Pattern - координирует выполнение транзакций между несколькими микросервисами и обеспечивает откат в случае ошибок")]),t._v(" "),a("li",[t._v("Sidecar - шаблон, при котором каждый микросервис имеет свой “прицепленный” контейнер. Например, для обработки запросов к базе данных.")]),t._v(" "),a("li",[t._v("Event-Driven Architecture - использует асинхронную связь через асинхронные события для уменьшения связности между микросервисами.")]),t._v(" "),a("li",[t._v("Обнаружение событий - уведомления микросервисов о событиях, что позволяет сервисам реагировать на эти события.")]),t._v(" "),a("li",[t._v("Command Query Responsibility Segregation (CQRS) Команда и запрос - паттерн, при котором каждый сервис имеет разделение на запросы и команды. Запросы - это запросы данных, а команды - это запросы на изменение данных.")]),t._v(" "),a("li",[t._v("Ограничение времени жизни (Time-to-live) - ограничивает временную жизнь объекта в системе. ApplicationDbContext позволит вам экономить ресурсы и уменьшать кол-во логических ошибок.")]),t._v(" "),a("li",[t._v("Группирующая служба (Aggregator) - выбирает данные из разных источников и предоставляет собранные данные в едином виде")]),t._v(" "),a("li",[t._v("Проверка работоспособности (Health Check) - проверяет состояние сервиса и обеспечивает автоматическое восстановление по его состоянию")]),t._v(" "),a("li",[t._v("Референсные данные (Reference data) - хранит общие данные, доступные для всех сервисов, такие как местоположения, валютные курсы и т. д.")]),t._v(" "),a("li",[t._v("Хранилище логов (Log Aggregation) - организует сбор и агрегацию журналов в централизованном месте для удобного их анализа и обработки.")]),t._v(" "),a("li",[t._v("Rate Limiting - ограничивает количество запросов к определенному сервису в единицу времени.")])]),t._v(" "),a("p",[t._v("Выбор паттернов зависит от специфики проекта и целей микросервисной архитектуры.")]),t._v(" "),a("h2",{attrs:{id:"сколько-всего-патернов-для-микросервисов-известно"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#сколько-всего-патернов-для-микросервисов-известно"}},[t._v("#")]),t._v(" сколько всего патернов для микросервисов известно?")]),t._v(" "),a("p",[t._v("Количество паттернов для микросервисов не установлено и постоянно меняется, так как новые паттерны могут быть созданы, а существующие могут быть модифицированы или улучшены. Кроме того, использование каждого паттерна зависит от конкретных потребностей проекта и необязательно для всех проектов потребуется использование большого количества паттернов.")]),t._v(" "),a("p",[t._v("Однако, существуют списки с рекомендуемыми паттернами для микросервисов в зависимости от различных задач, которые могут быть решены с помощью микросервисной архитектуры. Некоторые из таких списков могут содержать до 20-30 паттернов, а более общие списки могут содержать около 10-15 паттернов.")]),t._v(" "),a("p",[t._v("Более важно знать, что микросервисная архитектура, как и любая другая архитектура, должна быть проектирована и разработана с учетом специфики проекта. Использование паттернов является лишь одним из инструментов для реализации микросервисов, и следует использовать эти инструменты, только если они соответствуют потребностям и требованиям проекта.")]),t._v(" "),a("h2",{attrs:{id:"опиши-saga-pattern-микросервисы"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#опиши-saga-pattern-микросервисы"}},[t._v("#")]),t._v(" опиши Saga Pattern (микросервисы)")]),t._v(" "),a("p",[t._v("Saga Pattern - это паттерн для управления транзакционной целостностью в распределенных системах микросервисов. Он используется для управления несколькими транзакциями между микросервисами, где каждый микросервис выполняет свою часть транзакции, и если одна часть не удалась, все остальные будут отменены.")]),t._v(" "),a("p",[t._v("В Saga Pattern каждый микросервис выполняет свою частную транзакцию, а затем отправляет сообщение следующему микросервису для выполнения своей транзакции. Если одна из транзакций не выполнится успешно, то есть ошибка, вся транзакция должна быть отменена.")]),t._v(" "),a("p",[t._v("Вот пример простого Saga Pattern:")]),t._v(" "),a("ul",[a("li",[t._v("Шаг 1: Микросервис A отправляет запрос на создание заказа")]),t._v(" "),a("li",[t._v("Шаг 2: Микросервис B получает запрос на создание заказа и резервирует необходимые товары на складе")]),t._v(" "),a("li",[t._v("Шаг 3: Микросервис B отправляет подтверждение об успешном создании заказа и резервировании товаров микросервису A")]),t._v(" "),a("li",[t._v("Шаг 4: Если микросервис B не может зарезервировать товары, он отправляет сообщение об ошибке микросервису A для отмены создания заказа.")])]),t._v(" "),a("p",[t._v("Следует отметить, что каждый микросервис является автономным и может появляться дополнительный микросервис, когда система растет. Поэтому использование Saga Pattern может помочь обеспечить транзакционную целостность в такой распределенной системе.")])])}),[],!1,null,null,null);a.default=_.exports}}]);