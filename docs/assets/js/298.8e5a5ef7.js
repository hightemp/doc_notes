(window.webpackJsonp=window.webpackJsonp||[]).push([[298],{570:function(e,t,r){"use strict";r.r(t);var a=r(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("https://habr.com/ru/post/546208/")]),e._v(" "),t("p",[e._v("В этой статье я покажу как создать GraphQL сервер, используя Rust и его экосистему; будут приведены примеры реализации наиболее часто встречающихся задач при разработке GraphQL API. В итоге API трёх микросервисов будут объединены в единую точку доступа с помощью Apollo Server и "),t("a",{attrs:{href:"https://www.apollographql.com/docs/federation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apollo Federation"),t("OutboundLink")],1),e._v(". Это позволит клиентам запрашивать данные одновременно из нескольких источников без необходимости знать какие данные приходят из какого сервиса.")]),e._v(" "),t("h2",{attrs:{id:"введение"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#введение"}},[e._v("#")]),e._v(" Введение")]),e._v(" "),t("h3",{attrs:{id:"обзор"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#обзор"}},[e._v("#")]),e._v(" Обзор")]),e._v(" "),t("p",[e._v("С точки зрения функциональности описываемый проект довольно похож на представленный в моей "),t("a",{attrs:{href:"https://romankudryashov.com/blog/2020/02/how-to-graphql/",target:"_blank",rel:"noopener noreferrer"}},[e._v("предыдущей статье"),t("OutboundLink")],1),e._v(", но в этот раз с использованием стэка Rust. Архитектурно проект выглядит так:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/9c7/3ab/c80/9c73abc80275f109b3b7fb98edaff10a.png",alt:""}})]),e._v(" "),t("p",[e._v("Каждый компонент архитектуры освещает несколько вопросов, которые могут возникнуть при реализации GraphQL API. Доменная модель включает данные о планетах Солнечной системы и их спутниках. Проект имеет многомодульную структуру (или монорепозиторий) и состоит из следующих модулей:")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/tree/master/planets-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("planets-service"),t("OutboundLink")],1),e._v(" (Rust)")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/tree/master/satellites-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("satellites-service"),t("OutboundLink")],1),e._v(" (Rust)")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/tree/master/auth-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("auth-service"),t("OutboundLink")],1),e._v(" (Rust)")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/tree/master/apollo-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("apollo-server"),t("OutboundLink")],1),e._v(" (JS)")])])]),e._v(" "),t("p",[e._v("Существуют две основных библиотеки для разработки GraphQL сервера на Rust: "),t("a",{attrs:{href:"https://github.com/graphql-rust/juniper",target:"_blank",rel:"noopener noreferrer"}},[e._v("Juniper"),t("OutboundLink")],1),e._v(" и "),t("a",{attrs:{href:"https://github.com/async-graphql/async-graphql",target:"_blank",rel:"noopener noreferrer"}},[e._v("Async-graphql"),t("OutboundLink")],1),e._v(", но только последняя поддерживает Apollo Federation, поэтому она была выбрана для реализации проекта (есть также открытый "),t("a",{attrs:{href:"https://github.com/graphql-rust/juniper/issues/376",target:"_blank",rel:"noopener noreferrer"}},[e._v("запрос"),t("OutboundLink")],1),e._v(" на реализацию поддержки Federation в Juniper). Обе библиотеки предлагают "),t("a",{attrs:{href:"https://blog.logrocket.com/code-first-vs-schema-first-development-graphql/",target:"_blank",rel:"noopener noreferrer"}},[e._v("code-first"),t("OutboundLink")],1),e._v(" подход.")]),e._v(" "),t("p",[e._v("Помимо этого использованы PostgreSQL — для реализации слоя данных, "),t("a",{attrs:{href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JWT"),t("OutboundLink")],1),e._v(" — для аутентификации и Kafka — для асинхронного обмена сообщениями.")]),e._v(" "),t("h3",{attrs:{id:"стэк-технологии"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#стэк-технологии"}},[e._v("#")]),e._v(" Стэк технологий")]),e._v(" "),t("p",[e._v("В следующей таблице показан стэк основных технологий, использованных в проекте:")]),e._v(" "),t("p",[e._v("Тип")]),e._v(" "),t("p",[e._v("Название")]),e._v(" "),t("p",[e._v("Сайт")]),e._v(" "),t("p",[e._v("GitHub")]),e._v(" "),t("p",[e._v("Язык программирования")]),e._v(" "),t("p",[e._v("Rust")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.rust-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rust-lang/rust",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("GraphQL библиотека")]),e._v(" "),t("p",[e._v("Async-graphql")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://async-graphql.github.io/async-graphql/en/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/async-graphql/async-graphql",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Единая GraphQL точка доступа")]),e._v(" "),t("p",[e._v("Apollo Server")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.apollographql.com/docs/apollo-server/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/apollographql/apollo-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Web фреймворк")]),e._v(" "),t("p",[e._v("actix-web")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://actix.rs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/actix/actix-web",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("База даных")]),e._v(" "),t("p",[e._v("PostgreSQL")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.postgresql.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/postgres/postgres",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Брокер сообщений")]),e._v(" "),t("p",[e._v("Apache Kafka")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/apache/kafka",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Оркестрация контейнеров")]),e._v(" "),t("p",[e._v("Docker Compose")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/docker/compose",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Также некоторые использованные Rust библиотеки:")]),e._v(" "),t("p",[e._v("Тип")]),e._v(" "),t("p",[e._v("Название")]),e._v(" "),t("p",[e._v("Сайт")]),e._v(" "),t("p",[e._v("GitHub")]),e._v(" "),t("p",[e._v("ORM")]),e._v(" "),t("p",[e._v("Diesel")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://diesel.rs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/diesel-rs/diesel",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Kafka клиент")]),e._v(" "),t("p",[e._v("rust-rdkafka")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://crates.io/crates/rdkafka",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/fede1024/rust-rdkafka",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Хэширование паролей")]),e._v(" "),t("p",[e._v("argonautica")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://crates.io/crates/argonautica",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/bcmyers/argonautica",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("JWT библиотека")]),e._v(" "),t("p",[e._v("jsonwebtoken")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://crates.io/crates/jsonwebtoken",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/Keats/jsonwebtoken",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Библиотека для тестирования")]),e._v(" "),t("p",[e._v("Testcontainers-rs")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://crates.io/crates/testcontainers",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/testcontainers/testcontainers-rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"необходимое-по"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#необходимое-по"}},[e._v("#")]),e._v(" Необходимое ПО")]),e._v(" "),t("p",[e._v("Чтобы запустить проект локально, вам нужен только Docker Compose. В противном случае вам может понадобиться следующее:")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://www.rust-lang.org/tools/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://diesel.rs/guides/getting-started/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Diesel CLI"),t("OutboundLink")],1),e._v(" (для установки выполните "),t("code",[e._v("cargo install diesel_cli --no-default-features --features postgres")]),e._v(")")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://releases.llvm.org/download.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LLVM"),t("OutboundLink")],1),e._v(" (это нужно для работы крэйта "),t("code",[e._v("argonautica")]),e._v(")")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://cmake.org/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMake"),t("OutboundLink")],1),e._v(" (это нужно для работы крэйта "),t("code",[e._v("rust-rdkafka")]),e._v(")")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.postgresql.org/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PostgreSQL"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://kafka.apache.org/quickstart",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apache Kafka"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.npmjs.com/get-npm",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm"),t("OutboundLink")],1)])])]),e._v(" "),t("h2",{attrs:{id:"реализация"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#реализация"}},[e._v("#")]),e._v(" Реализация")]),e._v(" "),t("p",[e._v("В "),t("code",[e._v("Cargo.toml")]),e._v(" в корне проекта указаны три приложения и одна библиотека:")]),e._v(" "),t("p",[t("em",[e._v("Root")]),e._v(" "),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/Cargo.toml",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Cargo.toml")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[workspace]\nmembers = [\n    "auth-service",\n    "planets-service",\n    "satellites-service",\n    "common-utils",\n]\n')])])]),t("p",[e._v("Начнём с "),t("code",[e._v("planets-service")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"зависимости"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#зависимости"}},[e._v("#")]),e._v(" Зависимости")]),e._v(" "),t("p",[t("code",[e._v("Cargo.toml")]),e._v(" выглядит так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/Cargo.toml",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Cargo.toml")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[package]\nname = "planets-service"\nversion = "0.1.0"\nedition = "2018"\n\n[dependencies]\ncommon-utils = { path = "../common-utils" }\nasync-graphql = "2.4.3"\nasync-graphql-actix-web = "2.4.3"\nactix-web = "3.3.2"\nactix-rt = "1.1.1"\nactix-web-actors = "3.0.0"\nfutures = "0.3.8"\nasync-trait = "0.1.42"\nbigdecimal = { version = "0.1.2", features = ["serde"] }\nserde = { version = "1.0.118", features = ["derive"] }\nserde_json = "1.0.60"\ndiesel = { version = "1.4.5", features = ["postgres", "r2d2", "numeric"] }\ndiesel_migrations = "1.4.0"\ndotenv = "0.15.0"\nstrum = "0.20.0"\nstrum_macros = "0.20.1"\nrdkafka = { version = "0.24.0", features = ["cmake-build"] }\nasync-stream = "0.3.0"\nlazy_static = "1.4.0"\n\n[dev-dependencies]\njsonpath_lib = "0.2.6"\ntestcontainers = "0.9.1"\n')])])]),t("p",[t("code",[e._v("async-graphql")]),e._v(" — это GraphQL библиотека, "),t("code",[e._v("actix-web")]),e._v(" — web фреймворк, а "),t("code",[e._v("async-graphql-actix-web")]),e._v(" обеспечивает интеграцию между ними.")]),e._v(" "),t("h3",{attrs:{id:"ключевые-функции"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ключевые-функции"}},[e._v("#")]),e._v(" Ключевые функции")]),e._v(" "),t("p",[e._v("Начнём с "),t("code",[e._v("main.rs")]),e._v(":")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/main.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("main.rs")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[actix_rt::main]\nasync fn main() -> std::io::Result<()> {\n    dotenv().ok();\n    let pool = create_connection_pool();\n    run_migrations(&pool);\n\n    let schema = create_schema_with_context(pool);\n\n    HttpServer::new(move || App::new()\n        .configure(configure_service)\n        .data(schema.clone())\n    )\n        .bind("0.0.0.0:8001")?\n        .run()\n        .await\n}\n')])])]),t("p",[e._v("Здесь окружение и HTTP сервер конфигурируются с помощью функций, определённых в "),t("code",[e._v("lib.rs")]),e._v(":")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("lib.rs")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('pub fn configure_service(cfg: &mut web::ServiceConfig) {\n    cfg\n        .service(web::resource("/")\n            .route(web::post().to(index))\n            .route(web::get().guard(guard::Header("upgrade", "websocket")).to(index_ws))\n            .route(web::get().to(index_playground))\n        );\n}\n\nasync fn index(schema: web::Data<AppSchema>, http_req: HttpRequest, req: Request) -> Response {\n    let mut query = req.into_inner();\n\n    let maybe_role = common_utils::get_role(http_req);\n    if let Some(role) = maybe_role {\n        query = query.data(role);\n    }\n\n    schema.execute(query).await.into()\n}\n\nasync fn index_ws(schema: web::Data<AppSchema>, req: HttpRequest, payload: web::Payload) -> Result<HttpResponse> {\n    WSSubscription::start(Schema::clone(&*schema), &req, payload)\n}\n\nasync fn index_playground() -> HttpResponse {\n    HttpResponse::Ok()\n        .content_type("text/html; charset=utf-8")\n        .body(playground_source(GraphQLPlaygroundConfig::new("/").subscription_endpoint("/")))\n}\n\npub fn create_schema_with_context(pool: PgPool) -> Schema<Query, Mutation, Subscription> {\n    let arc_pool = Arc::new(pool);\n    let cloned_pool = Arc::clone(&arc_pool);\n    let details_batch_loader = Loader::new(DetailsBatchLoader {\n        pool: cloned_pool\n    }).with_max_batch_size(10);\n\n    let kafka_consumer_counter = Mutex::new(0);\n\n    Schema::build(Query, Mutation, Subscription)\n        .data(arc_pool)\n        .data(details_batch_loader)\n        .data(kafka::create_producer())\n        .data(kafka_consumer_counter)\n        .finish()\n}\n')])])]),t("p",[e._v("Эти функции делают следующее:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("index")]),e._v(" — обрабатывает GraphQL "),t("a",{attrs:{href:"https://graphql.org/learn/queries/",target:"_blank",rel:"noopener noreferrer"}},[e._v("запросы (query) и мутации"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("code",[e._v("index_ws")]),e._v(" — обрабатывает GraphQL "),t("a",{attrs:{href:"https://www.apollographql.com/docs/react/data/subscriptions/",target:"_blank",rel:"noopener noreferrer"}},[e._v("подписки"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("code",[e._v("index_playground")]),e._v(" — предоставляет Playground GraphQL IDE")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("create_schema_with_context")]),e._v(" — создаёт GraphQL схему с глобальным контекстом доступным в рантайме, например, пул соединений с БД")])])]),e._v(" "),t("h3",{attrs:{id:"определение-graphql-запроса-и-типа"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-graphql-запроса-и-типа"}},[e._v("#")]),e._v(" Определение GraphQL запроса и типа")]),e._v(" "),t("p",[e._v("Рассмотрим как определить запрос:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение запроса")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#[Object]\nimpl Query {\n    async fn get_planets(&self, ctx: &Context<'_>) -> Vec<Planet> {\n        repository::get_all(&get_conn_from_ctx(ctx)).expect(\"Can't get planets\")\n            .iter()\n            .map(|p| { Planet::from(p) })\n            .collect()\n    }\n\n    async fn get_planet(&self, ctx: &Context<'_>, id: ID) -> Option<Planet> {\n        find_planet_by_id_internal(ctx, id)\n    }\n\n    #[graphql(entity)]\n    async fn find_planet_by_id(&self, ctx: &Context<'_>, id: ID) -> Option<Planet> {\n        find_planet_by_id_internal(ctx, id)\n    }\n}\n\nfn find_planet_by_id_internal(ctx: &Context<'_>, id: ID) -> Option<Planet> {\n    let id = id.to_string().parse::<i32>().expect(\"Can't get id from String\");\n    repository::get(id, &get_conn_from_ctx(ctx)).ok()\n        .map(|p| { Planet::from(&p) })\n}\n")])])]),t("p",[e._v("Эти запросы получают данные из БД используя слой репозитория. Полученные сущности конвертируются в GraphQL DTO (это позволяет соблюсти принцип единственной ответственности для каждой структуры). Запросы "),t("code",[e._v("get_planets")]),e._v(" и "),t("code",[e._v("get_planet")]),e._v(" могут быть выполнены из любой GraphQL IDE например так:")]),e._v(" "),t("p",[t("em",[e._v("Пример использования запроса")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  getPlanets {\n    name\n    type\n  }\n}\n")])])]),t("p",[e._v("Структура "),t("code",[e._v("Planet")]),e._v(" определена так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение GraphQL типа")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(Serialize, Deserialize)]\nstruct Planet {\n    id: ID,\n    name: String,\n    planet_type: PlanetType,\n}\n\n#[Object]\nimpl Planet {\n    async fn id(&self) -> &ID {\n        &self.id\n    }\n\n    async fn name(&self) -> &String {\n        &self.name\n    }\n\n    /// From an astronomical point of view\n    #[graphql(name = "type")]\n    async fn planet_type(&self) -> &PlanetType {\n        &self.planet_type\n    }\n\n    #[graphql(deprecation = "Now it is not in doubt. Do not use this field")]\n    async fn is_rotating_around_sun(&self) -> bool {\n        true\n    }\n\n    async fn details(&self, ctx: &Context<\'_>) -> Details {\n        let loader = ctx.data::<Loader<i32, Details, DetailsBatchLoader>>().expect("Can\'t get loader");\n        let planet_id = self.id.to_string().parse::<i32>().expect("Can\'t convert id");\n        loader.load(planet_id).await\n    }\n}\n')])])]),t("p",[e._v("В "),t("code",[e._v("impl")]),e._v(" определяется резолвер для каждого поля. Также для некоторых полей определены описание (в виде Rust комментария) и deprecation reason. Это будет отображено в GraphQL IDE.")]),e._v(" "),t("h3",{attrs:{id:"проблема-n-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#проблема-n-1"}},[e._v("#")]),e._v(" Проблема N+1")]),e._v(" "),t("p",[e._v("В случае "),t("em",[e._v("наивной")]),e._v(" реализации функции "),t("code",[e._v("Planet.details")]),e._v(" выше возникла бы проблема N+1, то есть, при выполнении такого запроса:")]),e._v(" "),t("p",[t("em",[e._v("Пример возможного ресурсоёмкого GraphQL запроса")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  getPlanets {\n    name\n    details {\n      meanRadius\n    }\n  }\n}\n")])])]),t("p",[e._v("для поля "),t("code",[e._v("details")]),e._v(" каждой из планет был бы сделан отдельный SQL запрос, т. к. "),t("code",[e._v("Details")]),e._v(" — отдельная от "),t("code",[e._v("Planet")]),e._v(" сущность и хранится в собственной таблице.")]),e._v(" "),t("p",[e._v("Но с помощью "),t("a",{attrs:{href:"https://github.com/graphql/dataloader",target:"_blank",rel:"noopener noreferrer"}},[e._v("DataLoader"),t("OutboundLink")],1),e._v(", реализованного в Async-graphql, резолвер "),t("code",[e._v("details")]),e._v(" может быть определён так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение резолвера")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('async fn details(&self, ctx: &Context<\'_>) -> Result<Details> {\n    let data_loader = ctx.data::<DataLoader<DetailsLoader>>().expect("Can\'t get data loader");\n    let planet_id = self.id.to_string().parse::<i32>().expect("Can\'t convert id");\n    let details = data_loader.load_one(planet_id).await?;\n    details.ok_or_else(|| "Not found".into())\n}\n')])])]),t("p",[t("code",[e._v("data_loader")]),e._v(" — это объект в контектсе приложения, определённый так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение DataLoader'а")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let details_data_loader = DataLoader::new(DetailsLoader {\n    pool: cloned_pool\n}).max_batch_size(10);\n")])])]),t("p",[t("code",[e._v("DetailsLoader")]),e._v(" реализован следующим образом:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("DetailsLoader definition")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('pub struct DetailsLoader {\n    pub pool: Arc<PgPool>\n}\n\n#[async_trait::async_trait]\nimpl Loader<i32> for DetailsLoader {\n    type Value = Details;\n    type Error = Error;\n\n    async fn load(&self, keys: &[i32]) -> Result<HashMap<i32, Self::Value>, Self::Error> {\n        let conn = self.pool.get().expect("Can\'t get DB connection");\n        let details = repository::get_details(keys, &conn).expect("Can\'t get planets\' details");\n\n        Ok(details.iter()\n            .map(|details_entity| (details_entity.planet_id, Details::from(details_entity)))\n            .collect::<HashMap<_, _>>())\n    }\n}\n')])])]),t("p",[e._v("Такой подход позволяет предотвратить проблему N+1, т. к. каждый вызов "),t("code",[e._v("DetailsLoader.load")]),e._v(" выполняет только один SQL запрос, возвращающий пачку "),t("code",[e._v("DetailsEntity")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"определение-интерфеиса"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-интерфеиса"}},[e._v("#")]),e._v(" Определение интерфейса")]),e._v(" "),t("p",[e._v("GraphQL интерфейс и его реализации могут быть определены следующим образом:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение GraphQL интерфейса")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(Interface, Clone)]\n#[graphql(\n    field(name = "mean_radius", type = "&CustomBigDecimal"),\n    field(name = "mass", type = "&CustomBigInt"),\n)]\npub enum Details {\n    InhabitedPlanetDetails(InhabitedPlanetDetails),\n    UninhabitedPlanetDetails(UninhabitedPlanetDetails),\n}\n\n#[derive(SimpleObject, Clone)]\npub struct InhabitedPlanetDetails {\n    mean_radius: CustomBigDecimal,\n    mass: CustomBigInt,\n    /// In billions\n    population: CustomBigDecimal,\n}\n\n#[derive(SimpleObject, Clone)]\npub struct UninhabitedPlanetDetails {\n    mean_radius: CustomBigDecimal,\n    mass: CustomBigInt,\n}\n')])])]),t("p",[e._v('Здесь вы также можете видеть, что если в структуре нет ни одного поля со "сложным" резолвером, то она может быть реализована с использованием атрибута '),t("code",[e._v("SimpleObject")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"определение-кастомного-скалярного-типа"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-кастомного-скалярного-типа"}},[e._v("#")]),e._v(" Определение кастомного скалярного типа")]),e._v(" "),t("p",[e._v("Кастомные скаляры позволяют определить как представлять и как парсить значения определённого типа. Проект содержит два примера определения кастомных скаляров; оба являются обёртками для числовых структур (т. к. невозможно определить внешний трейт на внешней структуре из-за "),t("a",{attrs:{href:"https://doc.rust-lang.org/book/ch10-02-traits.html#implementing-a-trait-on-a-type",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("orphan rule")]),t("OutboundLink")],1),e._v("). Эти обёртки определены так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Кастомный скаляр: обёртка для BigInt")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(Clone)]\npub struct CustomBigInt(BigDecimal);\n\n#[Scalar(name = "BigInt")]\nimpl ScalarType for CustomBigInt {\n    fn parse(value: Value) -> InputValueResult<Self> {\n        match value {\n            Value::String(s) => {\n                let parsed_value = BigDecimal::from_str(&s)?;\n                Ok(CustomBigInt(parsed_value))\n            }\n            _ => Err(InputValueError::expected_type(value)),\n        }\n    }\n\n    fn to_value(&self) -> Value {\n        Value::String(format!("{:e}", &self))\n    }\n}\n\nimpl LowerExp for CustomBigInt {\n    fn fmt(&self, f: &mut Formatter<\'_>) -> fmt::Result {\n        let val = &self.0.to_f64().expect("Can\'t convert BigDecimal");\n        LowerExp::fmt(val, f)\n    }\n}\n')])])]),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Кастомный скаляр: обёртка для BigDecimal")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(Clone)]\npub struct CustomBigDecimal(BigDecimal);\n\n#[Scalar(name = "BigDecimal")]\nimpl ScalarType for CustomBigDecimal {\n    fn parse(value: Value) -> InputValueResult<Self> {\n        match value {\n            Value::String(s) => {\n                let parsed_value = BigDecimal::from_str(&s)?;\n                Ok(CustomBigDecimal(parsed_value))\n            }\n            _ => Err(InputValueError::expected_type(value)),\n        }\n    }\n\n    fn to_value(&self) -> Value {\n        Value::String(self.0.to_string())\n    }\n}\n')])])]),t("p",[e._v("В первом примере также показано, как представить гигантское число в виде экспоненциальной записи.")]),e._v(" "),t("h3",{attrs:{id:"определение-мутации"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-мутации"}},[e._v("#")]),e._v(" Определение мутации")]),e._v(" "),t("p",[e._v("Мутация может быть определена следующим образом:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение мутации")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('pub struct Mutation;\n\n#[Object]\nimpl Mutation {\n    #[graphql(guard(RoleGuard(role = "Role::Admin")))]\n    async fn create_planet(&self, ctx: &Context<\'_>, planet: PlanetInput) -> Result<Planet, Error> {\n        let new_planet = NewPlanetEntity {\n            name: planet.name,\n            planet_type: planet.planet_type.to_string(),\n        };\n\n        let details = planet.details;\n        let new_planet_details = NewDetailsEntity {\n            mean_radius: details.mean_radius.0,\n            mass: BigDecimal::from_str(&details.mass.0.to_string()).expect("Can\'t get BigDecimal from string"),\n            population: details.population.map(|wrapper| { wrapper.0 }),\n            planet_id: 0,\n        };\n\n        let created_planet_entity = repository::create(new_planet, new_planet_details, &get_conn_from_ctx(ctx))?;\n\n        let producer = ctx.data::<FutureProducer>().expect("Can\'t get Kafka producer");\n        let message = serde_json::to_string(&Planet::from(&created_planet_entity)).expect("Can\'t serialize a planet");\n        kafka::send_message(producer, message).await;\n\n        Ok(Planet::from(&created_planet_entity))\n    }\n}\n')])])]),t("p",[e._v("Чтобы использовать объект как входной параметр мутации, надо определить структуру следующим образом:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение input type")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(InputObject)]\nstruct PlanetInput {\n    name: String,\n    #[graphql(name = "type")]\n    planet_type: PlanetType,\n    details: DetailsInput,\n}\n')])])]),t("p",[e._v("Мутация защищена "),t("code",[e._v("RoleGuard")]),e._v("'ом, который гарантирует что только пользователи с ролью "),t("code",[e._v("Admin")]),e._v(" могут выполнить её. Таким образом, для выполнения, например, следующей мутации:")]),e._v(" "),t("p",[t("em",[e._v("Пример использования мутации")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mutation {\n  createPlanet(\n    planet: {\n      name: "test_planet"\n      type: TERRESTRIAL_PLANET\n      details: { meanRadius: "10.5", mass: "8.8e24", population: "0.5" }\n    }\n  ) {\n    id\n  }\n}\n')])])]),t("p",[e._v("вам нужно указать заголовок "),t("code",[e._v("Authorization")]),e._v(" с JWT, полученным из "),t("code",[e._v("auth-service")]),e._v(" (это будет описано далее).")]),e._v(" "),t("h3",{attrs:{id:"определение-подписки"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-подписки"}},[e._v("#")]),e._v(" Определение подписки")]),e._v(" "),t("p",[e._v("В определении мутации выше вы могли видеть что при добавлении новой планеты отправляется сообщение:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Отправка сообщения в Kafka")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let producer = ctx.data::<FutureProducer>().expect("Can\'t get Kafka producer");\nlet message = serde_json::to_string(&Planet::from(&created_planet_entity)).expect("Can\'t serialize a planet");\nkafka::send_message(producer, message).await;\n')])])]),t("p",[e._v("Клиент API может быть уведомлен об этом событии с помощью подписки, слушающей Kafka consumer:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение подписки")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('pub struct Subscription;\n\n#[Subscription]\nimpl Subscription {\n    async fn latest_planet<\'ctx>(&self, ctx: &\'ctx Context<\'_>) -> impl Stream<Item=Planet> + \'ctx {\n        let kafka_consumer_counter = ctx.data::<Mutex<i32>>().expect("Can\'t get Kafka consumer counter");\n        let consumer_group_id = kafka::get_kafka_consumer_group_id(kafka_consumer_counter);\n        let consumer = kafka::create_consumer(consumer_group_id);\n\n        async_stream::stream! {\n            let mut stream = consumer.start();\n\n            while let Some(value) = stream.next().await {\n                yield match value {\n                    Ok(message) => {\n                        let payload = message.payload().expect("Kafka message should contain payload");\n                        let message = String::from_utf8_lossy(payload).to_string();\n                        serde_json::from_str(&message).expect("Can\'t deserialize a planet")\n                    }\n                    Err(e) => panic!("Error while Kafka message processing: {}", e)\n                };\n            }\n        }\n    }\n}\n')])])]),t("p",[e._v("Подписка может быть использована так же, как запросы и мутации:")]),e._v(" "),t("p",[t("em",[e._v("Пример использования подписки")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("subscription {\n  latestPlanet {\n    id\n    name\n    type\n    details {\n      meanRadius\n    }\n  }\n}\n")])])]),t("p",[e._v("Подписки должны отправляться на "),t("code",[e._v("ws://localhost:8001")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"интеграционные-тесты"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#интеграционные-тесты"}},[e._v("#")]),e._v(" Интеграционные тесты")]),e._v(" "),t("p",[e._v("Тесты запросов и мутаций можно написать так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/tests/query_tests.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Тест запроса")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[actix_rt::test]\nasync fn test_get_planets() {\n    let docker = Cli::default();\n    let (_pg_container, pool) = common::setup(&docker);\n\n    let mut service = test::init_service(App::new()\n        .configure(configure_service)\n        .data(create_schema_with_context(pool))\n    ).await;\n\n    let query = "\n        {\n            getPlanets {\n                id\n                name\n                type\n                details {\n                    meanRadius\n                    mass\n                    ... on InhabitedPlanetDetails {\n                        population\n                    }\n                }\n            }\n        }\n        ".to_string();\n\n    let request_body = GraphQLCustomRequest {\n        query,\n        variables: Map::new(),\n    };\n\n    let request = test::TestRequest::post().uri("/").set_json(&request_body).to_request();\n\n    let response: GraphQLCustomResponse = test::read_response_json(&mut service, request).await;\n\n    fn get_planet_as_json(all_planets: &serde_json::Value, index: i32) -> &serde_json::Value {\n        jsonpath::select(all_planets, &format!("$.getPlanets[{}]", index)).expect("Can\'t get planet by JSON path")[0]\n    }\n\n    let mercury_json = get_planet_as_json(&response.data, 0);\n    common::check_planet(mercury_json, 1, "Mercury", "TERRESTRIAL_PLANET", "2439.7");\n\n    let earth_json = get_planet_as_json(&response.data, 2);\n    common::check_planet(earth_json, 3, "Earth", "TERRESTRIAL_PLANET", "6371.0");\n\n    let neptune_json = get_planet_as_json(&response.data, 7);\n    common::check_planet(neptune_json, 8, "Neptune", "ICE_GIANT", "24622.0");\n}\n')])])]),t("p",[e._v("Если часть запроса может быть переиспользована в другом запросе, вы можете использовать "),t("a",{attrs:{href:"https://graphql.org/learn/queries/#fragments",target:"_blank",rel:"noopener noreferrer"}},[e._v("фрагменты"),t("OutboundLink")],1),e._v(":")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/tests/query_tests.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Тест запроса с использованием фрагмента")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const PLANET_FRAGMENT: &str = "\n    fragment planetFragment on Planet {\n        id\n        name\n        type\n        details {\n            meanRadius\n            mass\n            ... on InhabitedPlanetDetails {\n                population\n            }\n        }\n    }\n";\n\n#[actix_rt::test]\nasync fn test_get_planet_by_id() {\n    ...\n\n    let query = "\n        {\n            getPlanet(id: 3) {\n                ... planetFragment\n            }\n        }\n        ".to_string() + PLANET_FRAGMENT;\n\n    let request_body = GraphQLCustomRequest {\n        query,\n        variables: Map::new(),\n    };\n\n    ...\n}\n')])])]),t("p",[e._v("Чтобы использовать "),t("a",{attrs:{href:"https://graphql.org/learn/queries/#variables",target:"_blank",rel:"noopener noreferrer"}},[e._v("переменные"),t("OutboundLink")],1),e._v(", запишите тест так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/tests/query_tests.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Тест запроса с использованием фрагмента и переменной")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[actix_rt::test]\nasync fn test_get_planet_by_id_with_variable() {\n    ...\n\n    let query = "\n        query testPlanetById($planetId: String!) {\n            getPlanet(id: $planetId) {\n                ... planetFragment\n            }\n        }".to_string() + PLANET_FRAGMENT;\n\n    let jupiter_id = 5;\n    let mut variables = Map::new();\n    variables.insert("planetId".to_string(), jupiter_id.into());\n\n    let request_body = GraphQLCustomRequest {\n        query,\n        variables,\n    };\n\n    ...\n}\n')])])]),t("p",[e._v("В этом проекте используется библиотека "),t("code",[e._v("Testcontainers-rs")]),e._v(", что позволяет подготовить тестовое окружение, то есть, создать временную БД PostgreSQL.")]),e._v(" "),t("h3",{attrs:{id:"клиент-к-graphql-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#клиент-к-graphql-api"}},[e._v("#")]),e._v(" Клиент к GraphQL API")]),e._v(" "),t("p",[e._v("Вы можете использовать код из предыдущего раздела для создания клиента к внешнему GraphQL API. Также для этого существуют специальные библиотеки, например, "),t("a",{attrs:{href:"https://github.com/graphql-rust/graphql-client",target:"_blank",rel:"noopener noreferrer"}},[e._v("graphql-client"),t("OutboundLink")],1),e._v(", но я их не использовал.")]),e._v(" "),t("h3",{attrs:{id:"безопасность-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#безопасность-api"}},[e._v("#")]),e._v(" Безопасность API")]),e._v(" "),t("p",[e._v("Существуют различные угрозы безопасности GraphQL API (см. "),t("a",{attrs:{href:"https://leapgraph.com/graphql-api-security",target:"_blank",rel:"noopener noreferrer"}},[e._v("список"),t("OutboundLink")],1),e._v("); рассмотрим некоторые из них.")]),e._v(" "),t("h4",{attrs:{id:"ограничения-глубины-и-сложности-запроса"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ограничения-глубины-и-сложности-запроса"}},[e._v("#")]),e._v(" Ограничения глубины и сложности запроса")]),e._v(" "),t("p",[e._v("Если бы структура "),t("code",[e._v("Satellite")]),e._v(" содержала поле "),t("code",[e._v("planet")]),e._v(", был бы возможен такой запрос:")]),e._v(" "),t("p",[t("em",[e._v("Пример тяжёлого запроса")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  getPlanet(id: "1") {\n    satellites {\n      planet {\n        satellites {\n          planet {\n            satellites {\n              ... # more deep nesting!\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[e._v("Сделать такой запрос невалидным можно так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Пример ограничения глубины и сложности запроса")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pub fn create_schema_with_context(pool: PgPool) -> Schema<Query, Mutation, Subscription> {\n    ...\n\n    Schema::build(Query, Mutation, Subscription)\n        .limit_depth(3)\n        .limit_complexity(15)\n\n    ...\n}\n")])])]),t("p",[e._v("Стоит отметить, что при указании ограничений выше может перестать отображаться документация сервиса в GraphQL IDE. Это происходит потому, что IDE пытается выполнить introspection query, который имеет заметные глубину и сложность.")]),e._v(" "),t("h4",{attrs:{id:"аутентификация"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#аутентификация"}},[e._v("#")]),e._v(" Аутентификация")]),e._v(" "),t("p",[e._v("Эта функциональность реализована в "),t("code",[e._v("auth-service")]),e._v(" с использованием крэйтов "),t("code",[e._v("argonautica")]),e._v(" и "),t("code",[e._v("jsonwebtoken")]),e._v(". Первый отвечает за хэширование паролей пользователей с использованием алгоритма "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Argon2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Argon2"),t("OutboundLink")],1),e._v(". Аутентификация и авторизация показаны исключительно в демонстрационных целях; пожалуйста, изучите вопрос более тщательно перед использованием в продакшене.")]),e._v(" "),t("p",[e._v("Рассмотрим как реализован вход в систему:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/auth-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Реализация входа в систему")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('pub struct Mutation;\n\n#[Object]\nimpl Mutation {\n\n    async fn sign_in(&self, ctx: &Context<\'_>, input: SignInInput) -> Result<String, Error> {\n        let maybe_user = repository::get_user(&input.username, &get_conn_from_ctx(ctx)).ok();\n\n        if let Some(user) = maybe_user {\n            if let Ok(matching) = verify_password(&user.hash, &input.password) {\n                if matching {\n                    let role = AuthRole::from_str(user.role.as_str()).expect("Can\'t convert &str to AuthRole");\n                    return Ok(common_utils::create_token(user.username, role));\n                }\n            }\n        }\n\n        Err(Error::new("Can\'t authenticate a user"))\n    }\n}\n\n#[derive(InputObject)]\nstruct SignInInput {\n    username: String,\n    password: String,\n}\n')])])]),t("p",[e._v("Посмотреть реализацию функции "),t("code",[e._v("verify_password")]),e._v(" можно в "),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/auth-service/src/utils.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("модуле"),t("OutboundLink")],1),e._v(" "),t("code",[e._v("utils")]),e._v(", "),t("code",[e._v("create_token")]),e._v(" в "),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/common-utils/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("модуле"),t("OutboundLink")],1),e._v(" "),t("code",[e._v("common_utils")]),e._v(". Как вы могли бы ожидать, функция "),t("code",[e._v("sign_in")]),e._v(" возвращает JWT, который в дальнейшем может быть использован для авторизации в других сервисах.")]),e._v(" "),t("p",[e._v("Для получения JWT выполните следующую мутацию:")]),e._v(" "),t("p",[t("em",[e._v("Получение JWT")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mutation {\n  signIn(input: { username: "john_doe", password: "password" })\n}\n')])])]),t("p",[e._v("Используйте параметры "),t("em",[e._v("john_doe/password")]),e._v(". Включение полученного JWT в последующие запросы позволит получить доступ к защищённым ресурсам (см. следующий раздел).")]),e._v(" "),t("h4",{attrs:{id:"авторизация"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#авторизация"}},[e._v("#")]),e._v(" Авторизация")]),e._v(" "),t("p",[e._v("Чтобы запросить защищённые данные, добавьте заголовок в HTTP запрос в формате "),t("code",[e._v("Authorization: Bearer $JWT")]),e._v(". Функция "),t("code",[e._v("index")]),e._v(" извлечёт роль пользователя из HTTP запроса и добавит её в параметры GraphQL запроса/мутации:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Получение роли")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("async fn index(schema: web::Data<AppSchema>, http_req: HttpRequest, req: Request) -> Response {\n    let mut query = req.into_inner();\n\n    let maybe_role = common_utils::get_role(http_req);\n    if let Some(role) = maybe_role {\n        query = query.data(role);\n    }\n\n    schema.execute(query).await.into()\n}\n")])])]),t("p",[e._v("К ранее показанной мутации "),t("code",[e._v("create_planet")]),e._v(" применён следующий атрибут:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Использование гарда")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[graphql(guard(RoleGuard(role = "Role::Admin")))]\n')])])]),t("p",[e._v("Сам гард реализован так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Реализация гарда")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('struct RoleGuard {\n    role: Role,\n}\n\n#[async_trait::async_trait]\nimpl Guard for RoleGuard {\n    async fn check(&self, ctx: &Context<\'_>) -> Result<()> {\n        if ctx.data_opt::<Role>() == Some(&self.role) {\n            Ok(())\n        } else {\n            Err("Forbidden".into())\n        }\n    }\n}\n')])])]),t("p",[e._v('Таким образом, если вы не укажете токен, сервер ответит сообщением "Forbidden".')]),e._v(" "),t("h3",{attrs:{id:"определение-перечисления"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#определение-перечисления"}},[e._v("#")]),e._v(" Определение перечисления")]),e._v(" "),t("p",[e._v("GraphQL перечисление может быть определено так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/satellites-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение перечисления")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#[derive(SimpleObject)]\nstruct Satellite {\n    ...\n    life_exists: LifeExists,\n}\n\n#[derive(Copy, Clone, Eq, PartialEq, Debug, Enum, EnumString)]\n#[strum(serialize_all = "SCREAMING_SNAKE_CASE")]\npub enum LifeExists {\n    Yes,\n    OpenQuestion,\n    NoData,\n}\n')])])]),t("h3",{attrs:{id:"работа-с-датами"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#работа-с-датами"}},[e._v("#")]),e._v(" Работа с датами")]),e._v(" "),t("p",[e._v("Async-graphql поддерживает типы даты/времени из библиотеки "),t("code",[e._v("chrono")]),e._v(", поэтому вы можете определить такие поля как обычно:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/satellites-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение поля с датой")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#[derive(SimpleObject)]\nstruct Satellite {\n    ...\n    first_spacecraft_landing_date: Option<NaiveDate>,\n}\n")])])]),t("h3",{attrs:{id:"поддержка-apollo-federation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#поддержка-apollo-federation"}},[e._v("#")]),e._v(" Поддержка Apollo Federation")]),e._v(" "),t("p",[e._v("Одна из целей "),t("code",[e._v("satellites-service")]),e._v(" — продемонстрировать как распределённая GraphQL "),t("a",{attrs:{href:"https://www.apollographql.com/docs/federation/entities/",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("сущность")]),t("OutboundLink")],1),e._v(" ("),t("code",[e._v("Planet")]),e._v(") может резолвиться в двух (или более) сервисах и затем запрашиваться через Apollo Server.")]),e._v(" "),t("p",[e._v("Тип "),t("code",[e._v("Planet")]),e._v(" был ранее определён в "),t("code",[e._v("planets-service")]),e._v(" так:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение типа")]),t("OutboundLink")],1),e._v(" "),t("code",[e._v("Planet")]),e._v(" в "),t("code",[e._v("planets-service")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#[derive(Serialize, Deserialize)]\nstruct Planet {\n    id: ID,\n    name: String,\n    planet_type: PlanetType,\n}\n")])])]),t("p",[e._v("Также в "),t("code",[e._v("planets-service")]),e._v(" тип "),t("code",[e._v("Planet")]),e._v(" является сущностью:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/planets-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение сущности")]),t("OutboundLink")],1),e._v(" "),t("code",[e._v("Planet")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#[Object]\nimpl Query {\n    #[graphql(entity)]\n    async fn find_planet_by_id(&self, ctx: &Context<'_>, id: ID) -> Option<Planet> {\n        find_planet_by_id_internal(ctx, id)\n    }\n}\n")])])]),t("p",[t("code",[e._v("satellites-service")]),e._v(" расширяет сущность "),t("code",[e._v("Planet")]),e._v(" путём добавления поля "),t("code",[e._v("satellites")]),e._v(":")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/satellites-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Расширение типа")]),t("OutboundLink")],1),e._v(" "),t("code",[e._v("Planet")]),e._v(" в "),t("code",[e._v("satellites-service")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('struct Planet {\n    id: ID\n}\n\n#[Object(extends)]\nimpl Planet {\n    #[graphql(external)]\n    async fn id(&self) -> &ID {\n        &self.id\n    }\n\n    async fn satellites(&self, ctx: &Context<\'_>) -> Vec<Satellite> {\n        let id = self.id.to_string().parse::<i32>().expect("Can\'t get id from String");\n        repository::get_by_planet_id(id, &get_conn_from_ctx(ctx)).expect("Can\'t get satellites of planet")\n            .iter()\n            .map(|e| { Satellite::from(e) })\n            .collect()\n    }\n}\n')])])]),t("p",[e._v("Также вам нужно реализовать функцию поиска для расширяемого типа. В примере ниже функция просто создаёт новый инстанс "),t("code",[e._v("Planet")]),e._v(":")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/satellites-service/src/graphql.rs",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Функция поиска для типа")]),t("OutboundLink")],1),e._v(" "),t("code",[e._v("Planet")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#[Object]\nimpl Query {\n\n    #[graphql(entity)]\n    async fn get_planet_by_id(&self, id: ID) -> Planet {\n        Planet { id }\n    }\n}\n")])])]),t("p",[e._v("Async-graphql генерирует два дополнительных запроса ("),t("code",[e._v("_service")]),e._v(" and "),t("code",[e._v("_entities")]),e._v("), которые будут использованы Apollo Server'ом. Эти запросы — внутренние, то есть они не будут отображены в API Apollo Server'а. Конечно, сервис с поддержкой Apollo Federation по-прежнему может работать автономно.")]),e._v(" "),t("h3",{attrs:{id:"apollo-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apollo-server"}},[e._v("#")]),e._v(" Apollo Server")]),e._v(" "),t("p",[e._v("Apollo Server и Apollo Federation позволяют достичь две основные цели:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("создать единую точку доступа к нескольким GraphQL API")])]),e._v(" "),t("li",[t("p",[e._v("создать единый граф данных из распределённых сущностей")])])]),e._v(" "),t("p",[e._v("Таким образом, даже если вы не используете распределённые сущности, для frontend разработчиков удобнее использовать одну точку доступа, чем несколько.")]),e._v(" "),t("p",[e._v("Существует и другой способ создания единой GraphQL схемы, "),t("a",{attrs:{href:"https://www.graphql-tools.com/docs/schema-stitching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("schema stitching"),t("OutboundLink")],1),e._v(", но пока что я его не использовал.")]),e._v(" "),t("p",[e._v("Модуль включает следующий исходный код:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/apollo-server/package.json",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Мета-информация и зависимости")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "api-gateway",\n  "main": "gateway.js",\n  "scripts": {\n    "start-gateway": "nodemon gateway.js"\n  },\n  "devDependencies": {\n    "concurrently": "5.3.0",\n    "nodemon": "2.0.6"\n  },\n  "dependencies": {\n    "@apollo/gateway": "0.21.3",\n    "apollo-server": "2.19.0",\n    "graphql": "15.4.0"\n  }\n}\n')])])]),t("p",[t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/apollo-server/gateway.js",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("Определение Apollo Server")]),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const {ApolloServer} = require("apollo-server");\nconst {ApolloGateway, RemoteGraphQLDataSource} = require("@apollo/gateway");\n\nclass AuthenticatedDataSource extends RemoteGraphQLDataSource {\n    willSendRequest({request, context}) {\n        if (context.authHeaderValue) {\n            request.http.headers.set(\'Authorization\', context.authHeaderValue);\n        }\n    }\n}\n\nlet node_env = process.env.NODE_ENV;\n\nfunction get_service_url(service_name, port) {\n    let host;\n    switch (node_env) {\n        case \'docker\':\n            host = service_name;\n            break;\n        case \'local\': {\n            host = \'localhost\';\n            break\n        }\n    }\n\n    return "http://" + host + ":" + port;\n}\n\nconst gateway = new ApolloGateway({\n    serviceList: [\n        {name: "planets-service", url: get_service_url("planets-service", 8001)},\n        {name: "satellites-service", url: get_service_url("satellites-service", 8002)},\n        {name: "auth-service", url: get_service_url("auth-service", 8003)},\n    ],\n    buildService({name, url}) {\n        return new AuthenticatedDataSource({url});\n    },\n});\n\nconst server = new ApolloServer({\n    gateway, subscriptions: false, context: ({req}) => ({\n        authHeaderValue: req.headers.authorization\n    })\n});\n\nserver.listen({host: "0.0.0.0", port: 4000}).then(({url}) => {\n    console.log(`? Server ready at ${url}`);\n});\n')])])]),t("p",[e._v("Если код выше может быть упрощён, не стесняйтесь поправить.")]),e._v(" "),t("p",[e._v("Авторизация в "),t("code",[e._v("apollo-service")]),e._v(" работает так же, как было показано ранее для Rust сервисов (вам надо указать заголовок "),t("code",[e._v("Authorization")]),e._v(" и его значение).")]),e._v(" "),t("p",[e._v("Приложение, написанное на любом языке или фреймворке, может быть добавлено в качестве нижележащего сервиса под Apollo Server, если оно реализует "),t("a",{attrs:{href:"https://www.apollographql.com/docs/federation/federation-spec/",target:"_blank",rel:"noopener noreferrer"}},[e._v("спецификацию Federation"),t("OutboundLink")],1),e._v("; список библиотек, добавляющих поддержку этой спецификации доступен в "),t("a",{attrs:{href:"https://www.apollographql.com/docs/federation/other-servers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("документации"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("При реализации модуля я столкнулся со следующими ограничениями:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Apollo Gateway "),t("a",{attrs:{href:"https://github.com/apollographql/apollo-server/issues/3357",target:"_blank",rel:"noopener noreferrer"}},[e._v("не поддерживает"),t("OutboundLink")],1),e._v(" подписки (но они по-прежнему работают в standalone Rust сервисе)")])]),e._v(" "),t("li",[t("p",[e._v("сервису, пытающемуся расширить GraphQL интерфейс "),t("a",{attrs:{href:"https://github.com/apollographql/apollo-server/issues/2849",target:"_blank",rel:"noopener noreferrer"}},[e._v("требуется информация о его конкретных имплементациях"),t("OutboundLink")],1)])])]),e._v(" "),t("h3",{attrs:{id:"взаимодеиствие-с-бд"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#взаимодеиствие-с-бд"}},[e._v("#")]),e._v(" Взаимодействие с БД")]),e._v(" "),t("p",[e._v("Уровень хранения реализован с помощью PostgreSQL and Diesel. Если вы не используете Docker при локальном запуске, то нужно выполнить "),t("code",[e._v("diesel setup")]),e._v(", находясь в директории каждого из сервисов. Это создаст пустую БД, к которой далее будут применены миграции, создающие таблицы и инициализирующие данные.")]),e._v(" "),t("h3",{attrs:{id:"запуск-проекта-и-тестирование-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#запуск-проекта-и-тестирование-api"}},[e._v("#")]),e._v(" Запуск проекта и тестирование API")]),e._v(" "),t("p",[e._v("Как было отмечено ранее, проект можно запустить двумя способами:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("с использованием Docker Compose ("),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/docker-compose.yml",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-compose.yml"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("p",[e._v("Здесь, в свою очередь, также возможны два варианта:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("режим разработки (используя локально собранные образы)")]),e._v(" "),t("p",[t("code",[e._v("docker-compose up --build")])])]),e._v(" "),t("li",[t("p",[e._v("production mode (используя релизные образы)")]),e._v(" "),t("p",[t("code",[e._v("docker-compose -f docker-compose.yml up")])])])])]),e._v(" "),t("li",[t("p",[e._v("без Docker")]),e._v(" "),t("p",[e._v("Запустите каждый Rust сервис с помощью "),t("code",[e._v("cargo run")]),e._v(", потом запустите Apollo Server:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("cd")]),e._v(" в папку "),t("code",[e._v("apollo-server")])])]),e._v(" "),t("li",[t("p",[e._v("определите переменную среды "),t("code",[e._v("NODE_ENV")]),e._v(", например, "),t("code",[e._v("set NODE_ENV=local")]),e._v(" (для Windows)")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("npm install")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("npm run start-gateway")])])])])])]),e._v(" "),t("p",[e._v("Успешный запуск "),t("code",[e._v("apollo-server")]),e._v(" должен выглядеть так:")]),e._v(" "),t("p",[t("em",[e._v("Лог запуска Apollo Server")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[nodemon] 2.0.6\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node gateway.js`\nServer ready at http://0.0.0.0:4000/\n")])])]),t("p",[e._v("Вы можете перейти на "),t("code",[e._v("http://localhost:4000")]),e._v(" в браузере и использовать встроенную Playground IDE:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/fdf/52c/53b/fdf52c53bf8835a98aaab0f5ef04256c.png",alt:""}})]),e._v(" "),t("p",[e._v("Здесь возможно выполнять запросы, мутации и подписки, определённые в нижележащих сервисах. Кроме того, каждый из этих сервисов имеет собственную Playground IDE.")]),e._v(" "),t("h3",{attrs:{id:"тест-подписки"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#тест-подписки"}},[e._v("#")]),e._v(" Тест подписки")]),e._v(" "),t("p",[e._v("Чтобы убедиться в том, что подписка работает, откройте две вкладки любой GraphQL IDE; в первой подпишитесь таким образом:")]),e._v(" "),t("p",[t("em",[e._v("Пример подписки")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("subscription {\n  latestPlanet {\n    name\n    type\n  }\n}\n")])])]),t("p",[e._v("Во второй укажите заголовок "),t("code",[e._v("Authorization")]),e._v(" как было описано ранее и выполните мутацию:")]),e._v(" "),t("p",[t("em",[e._v("Пример мутации")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mutation {\n  createPlanet(\n    planet: {\n      name: "Pluto"\n      type: DWARF_PLANET\n      details: { meanRadius: "1188", mass: "1.303e22" }\n    }\n  ) {\n    id\n  }\n}\n')])])]),t("p",[e._v("Подписанный клиент будет уведомлен о событии:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://habrastorage.org/getpro/habr/upload_files/2df/bcf/421/2dfbcf4219935882b3ad6c3483bcb53e.gif",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"ci-cd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd"}},[e._v("#")]),e._v(" CI/CD")]),e._v(" "),t("p",[e._v("CI/CD сконфигурирован с помощью GitHub Actions ("),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo/blob/master/.github/workflows/workflow.yml",target:"_blank",rel:"noopener noreferrer"}},[e._v("workflow"),t("OutboundLink")],1),e._v("), который запускает тесты приложений, собирает их Docker образы и разворачивает их на Google Cloud Platform.")]),e._v(" "),t("p",[e._v("Вы можете посмотреть на описанные API "),t("a",{attrs:{href:"http://demo.romankudryashov.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[t("strong",[e._v("Замечание:")]),e._v(' На "продакшн" среде пароль отличается от указанного ранее, чтобы предотвратить изменение данных.')]),e._v(" "),t("h2",{attrs:{id:"заключение"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#заключение"}},[e._v("#")]),e._v(" Заключение")]),e._v(" "),t("p",[e._v("В этой статье я рассмотрел как решать наиболее частые вопросы, которые могут возникнуть при разработке GraphQL API на Rust. Также было показано как объединить API Rust GraphQL микросервисов для получения единого GraphQL интерфейса; в подобной архитектуре сущность может быть распределена среди нескольких микросервисов. Это достигается за счёт использования Apollo Server, Apollo Federation и библиотеки Async-graphql. Исходный код рассмотренного проекта доступен на "),t("a",{attrs:{href:"https://github.com/rkudryashov/graphql-rust-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1),e._v(". Не стесняйтесь написать мне, если найдёте ошибки в статье или исходном коде. Благодарю за внимание!")]),e._v(" "),t("h2",{attrs:{id:"полезные-ссылки"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#полезные-ссылки"}},[e._v("#")]),e._v(" Полезные ссылки")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://graphql.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("graphql.org"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://spec.graphql.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("spec.graphql.org"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://graphql.org/learn/best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("graphql.org/learn/best-practices"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.howtographql.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("howtographql.com"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/async-graphql/async-graphql",target:"_blank",rel:"noopener noreferrer"}},[e._v("Async-graphql"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://async-graphql.github.io/async-graphql/en/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Async-graphql book"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chentsulin/awesome-graphql",target:"_blank",rel:"noopener noreferrer"}},[e._v("Awesome GraphQL"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/APIs-guru/graphql-apis",target:"_blank",rel:"noopener noreferrer"}},[e._v("Public GraphQL APIs"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/apollographql/federation-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apollo Federation demo"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);t.default=n.exports}}]);