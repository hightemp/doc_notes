(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{543:function(e,t,a){"use strict";a.r(t);var r=a(14),l=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{pre:!0},[t("p",[e._v("https://uniwebsidad.com/libros/explore-flask/chapter-8/custom-filters")]),e._v(" "),t("p",[e._v("{% raw %}")]),e._v(" "),t("p",[e._v("Jinja filters are functions that can be applied to the result of an expression in the "),t("code",[e._v("{{ ... }}")]),e._v(" delimeters. It is applied before that result is printed to the template.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("<h2>{{ article.title|title }}</h2>\n")])])]),t("p",[e._v("In this code, the "),t("code",[e._v("title")]),e._v(" filter will take "),t("code",[e._v("article.title")]),e._v(' and return a title-cased version, which will then be printed to the template. This looks and works a lot like the UNIX practice of "piping" the output of one program to another.')]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v("There are loads of built-in filters like "),t("code",[e._v("title")]),e._v(". See "),t("a",{pre:!0,attrs:{href:"http://jinja.pocoo.org/docs/templates/#builtin-filters",target:"_blank",rel:"noopener noreferrer"}},[e._v("the full list"),t("OutboundLink",{pre:!0})],1),e._v(" in the Jinja docs.")]),e._v(" "),t("p",[e._v("We can define our own filters for use in our Jinja templates. As an example, we'll implement a simple "),t("code",[e._v("caps")]),e._v(" filter to capitalize all of the letters in a string.")]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v("Jinja already has an "),t("code",[e._v("upper")]),e._v(" filter that does this, and a "),t("code",[e._v("capitalize")]),e._v(" filter that capitalizes the first character and lowercases the rest. These also handle unicode conversion, but we'll keep our example simple to focus on the concept at hand.")]),e._v(" "),t("p",[e._v("We're going to define our filter in a module located at "),t("em",[e._v("myapp/util/filters.py")]),e._v(". This gives us a "),t("code",[e._v("util")]),e._v(" package in which to put other miscellaneous modules.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('# myapp/util/filters.py\n\nfrom .. import app\n\n@app.template_filter()\ndef caps(text):\n    """Convert a string to all caps."""\n    return text.uppercase()\n')])])]),t("p",[e._v("In this code we are registering our function as a Jinja filter by using the "),t("code",[e._v("@app.template_filter()")]),e._v(" decorator. The default filter name is just the name of the function, but you can pass an argument to the decorator to change that.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('@app.template_filter(\'make_caps\')\ndef caps(text):\n    """Convert a string to all caps."""\n    return text.uppercase()\n')])])]),t("p",[e._v("Now we can call "),t("code",[e._v("make_caps")]),e._v(" in the template rather than "),t("code",[e._v("caps")]),e._v(": "),t("code",[e._v('{{ "hello world!"|make_caps }}')]),e._v(".")]),e._v(" "),t("p",[e._v("To make our filter available in the templates, we just need to import it in our top-level "),t("em",[t("strong",[e._v("init.py")])]),e._v(".")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("# myapp/__init__.py\n\n# Make sure app has been initialized first to prevent circular imports.\nfrom .util import filters\n")])])]),t("p",[e._v("{% endraw %}")])])])}),[],!1,null,null,null);t.default=l.exports}}]);