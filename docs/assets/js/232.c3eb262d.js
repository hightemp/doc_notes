(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{504:function(v,_,e){"use strict";e.r(_);var a=e(14),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("https://laravel.demiart.ru/graphql-laravel/")]),v._v(" "),_("p",[v._v("В этой статье я расскажу вам, как создать свой собственный сервер GraphQL при помощи Laravel. Мы используем Lighthouse и научимся использовать встроенные директивы, создавать запросы и мутации, а также обрабатывать авторизацию и аутентификацию.")]),v._v(" "),_("p",[v._v("GraphQL — это язык запросов для API, который обеспечивает определенные преимущества по сравнению с альтернативными архитектурами, такими как REST. GraphQL чрезвычайно удобен, когда используется в качестве конечной точки для мобильных и одностраничных приложений. Он позволяет с относительной легкостью запрашивать вложенные и связанные данные в запросе, что позволяет разработчикам получать именно те данные, которые им нужны, за одно обращение на сервер.")]),v._v(" "),_("p",[v._v("Хотя сообщества GraphQL и Laravel значительно выросли с момента их появления, но документации, объясняющей, как использовать эти две технологии вместе, все еще мало.")]),v._v(" "),_("h3",{attrs:{id:"обзор-проекта"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#обзор-проекта"}},[v._v("#")]),v._v(" Обзор проекта")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://laravel.demiart.ru/wp-content/uploads/2019/10/GraphQL1-1024x167.png",alt:""}})]),v._v(" "),_("p",[v._v("Прежде чем начнем, давайте ознакомимся с проектом, который мы будем делать. Мы определим наши ресурсы и создадим схему GraphQL, которую позже будем использовать для обслуживания нашего API.")]),v._v(" "),_("h4",{attrs:{id:"ресурсы-проекта"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ресурсы-проекта"}},[v._v("#")]),v._v(" РЕСУРСЫ ПРОЕКТА")]),v._v(" "),_("p",[v._v("Наше приложение будет состоять из двух ресурсов: "),_("code",[v._v("Articles")]),v._v(" (Статьи) и "),_("code",[v._v("Users")]),v._v(" (Пользователи). Эти ресурсы будут определены как объекты в схеме GraphQL:")]),v._v(" "),_("p",[v._v("type User {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("name: String!")]),v._v(" "),_("p",[v._v("email: String!")]),v._v(" "),_("p",[v._v("articles: [Article!]!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type Article {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("title: String!")]),v._v(" "),_("p",[v._v("content: String!")]),v._v(" "),_("p",[v._v("author: User!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("На схеме мы видим, что между двумя нашими объектами существует отношение один ко многим. Пользователи могут написать много статей, а для статьи назначен автор (пользователь).")]),v._v(" "),_("p",[v._v("Теперь, когда у нас определены типы объектов, нам понадобится способ создания и запроса данных, поэтому давайте определим наши объекты запроса и мутации:")]),v._v(" "),_("p",[v._v("type Query {")]),v._v(" "),_("p",[v._v("user(id: ID!): User")]),v._v(" "),_("p",[v._v("users: [User!]!")]),v._v(" "),_("p",[v._v("article(id: ID!): Article")]),v._v(" "),_("p",[v._v("articles: [Article!]!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type Mutation {")]),v._v(" "),_("p",[v._v("createUser(name: String!, email: String!, password: String!): User")]),v._v(" "),_("p",[v._v("createArticle(title: String!, content: String!): Article")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"создание-проекта-laravel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#создание-проекта-laravel"}},[v._v("#")]),v._v(" Создание проекта Laravel")]),v._v(" "),_("p",[v._v("После того, как мы определили нашу схему GraphQL, давайте запустим наш приложение. Начнем с создания нового проекта Laravel через Composer:")]),v._v(" "),_("p",[v._v("composer create-project --prefer-dist laravel/laravel laravel-graphql")]),v._v(" "),_("p",[v._v("Для того, чтобы убедиться, что все работает, давайте загрузим наш сервер и посмотрим на дефолтную страницу:")]),v._v(" "),_("p",[v._v("cd laravel-graphql")]),v._v(" "),_("p",[v._v("php artisan serve")]),v._v(" "),_("p",[v._v("Laravel development server started: "),_("a",{attrs:{href:"http://127.0.0.1:8000",target:"_blank",rel:"noopener noreferrer"}},[v._v("http://127.0.0.1:8000"),_("OutboundLink")],1)]),v._v(" "),_("h3",{attrs:{id:"модели-базы-данных-и-миграции"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#модели-базы-данных-и-миграции"}},[v._v("#")]),v._v(" Модели базы данных и миграции")]),v._v(" "),_("p",[v._v("Для этой статьи мы будем использовать SQLite. Давайте внесем в файл .env следующие изменения:")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("DB_CONNECTION=sqlite\n\n# DB_HOST=\n\n# DB_PORT=\n\n# DB_DATABASE=database.sqlite\n\n# DB_USERNAME=\n\n# DB_PASSWORD=\n")])])]),_("p",[v._v("Создадим файл нашей базы данных:")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("touch ./database/database.sqlite\n")])])]),_("p",[v._v("Laravel уже поставляется с моделью User и основными файлами миграции. Добавим столбец "),_("code",[v._v("api_token")]),v._v(" в миграцию "),_("code",[v._v("CreateUsersTable")]),v._v(":")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("// /database/migrations/XXXX_XX_XX_000000_create_users_table.php\n\nuse Illuminate\\Database\\Migrations\\Migration;\n\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsersTable extends Migration\n\n{\n\n/**\n\n* Run the migrations.\n\n*/\n\npublic function up()\n\n{\n\nSchema::create('users', function (Blueprint $table) {\n\n$table->bigIncrements('id');\n\n$table->string('name');\n\n$table->string('email')->unique();\n\n$table->timestamp('email_verified_at')->nullable();\n\n$table->string('password');\n\n$table->string('api_token', 80)->unique()->nullable()->default(null);\n\n$table->rememberToken();\n\n$table->timestamps();\n\n});\n\n}\n\n/**\n\n* Reverse the migrations.\n\n*/\n\npublic function down()\n\n{\n\nSchema::dropIfExists('users');\n\n}\n\n}\n")])])]),_("p",[v._v("Мы вернемся к этому столбцу позже, когда займемся авторизацией. Продолжим и создадим модель "),_("code",[v._v("Article")]),v._v(" и файл миграции для неё:")]),v._v(" "),_("p",[v._v("php artisan make:model Article -m")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Параметр "),_("code",[v._v("-m")]),v._v(" создает файл миграции для создаваемой модели.")])]),v._v(" "),_("p",[v._v("Кое-что изменим в миграции:")]),v._v(" "),_("p",[v._v("public function up()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("Schema::create('articles', function (Blueprint $table) {")]),v._v(" "),_("p",[v._v("$table->bigIncrements('id');")]),v._v(" "),_("p",[v._v("$table->unsignedBigInteger('user_id');")]),v._v(" "),_("p",[v._v("$table->string('title');")]),v._v(" "),_("p",[v._v("$table->text('content');")]),v._v(" "),_("p",[v._v("$table->timestamps();")]),v._v(" "),_("p",[v._v("$table->foreign('user_id')->references('id')->on('users');")]),v._v(" "),_("p",[v._v("});")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Мы добавили внешний ключ, указывающий на "),_("code",[v._v("id")]),v._v(" в таблице "),_("code",[v._v("users")]),v._v(", а также столбцы "),_("code",[v._v("title")]),v._v(" и "),_("code",[v._v("content")]),v._v(", которые мы определили в схеме GraphQL.")]),v._v(" "),_("p",[v._v("Теперь, когда у нас есть файлы миграции, давайте их запустим:")]),v._v(" "),_("p",[v._v("php artisan migrate")]),v._v(" "),_("p",[v._v("Обновим наши модели, задав необходимые отношения:")]),v._v(" "),_("p",[v._v("//app/User.php")]),v._v(" "),_("p",[v._v("namespace App;")]),v._v(" "),_("p",[v._v("use Illuminate\\Notifications\\Notifiable;")]),v._v(" "),_("p",[v._v("use Illuminate\\Foundation\\Auth\\User as Authenticatable;")]),v._v(" "),_("p",[v._v("class User extends Authenticatable")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("use Notifiable;")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("The attributes that are mass assignable.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@var array")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("protected $fillable = [")]),v._v(" "),_("p",[v._v("'name', 'email', 'password',")]),v._v(" "),_("p",[v._v("];")]),v._v(" "),_("p",[v._v("// ...")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[v._v("@return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany")])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function articles()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("return $this->hasMany(Article::class);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("//app/Article.php")]),v._v(" "),_("p",[v._v("namespace App;")]),v._v(" "),_("p",[v._v("use Illuminate\\Database\\Eloquent\\Model;")]),v._v(" "),_("p",[v._v("class Article extends Model")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("The attributes that are mass assignable.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@var array")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("protected $fillable = [")]),v._v(" "),_("p",[v._v("'title', 'content',")]),v._v(" "),_("p",[v._v("];")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[v._v("@return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo")])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function user()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("return $this->belongsTo(User::class);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"заполнение-базы-данных"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#заполнение-базы-данных"}},[v._v("#")]),v._v(" Заполнение базы данных")]),v._v(" "),_("p",[v._v("Теперь, когда настроены модели и миграции, давайте заполним нашу базу данных. Начнем с создания сидеров для таблиц "),_("code",[v._v("articles")]),v._v(" и "),_("code",[v._v("users")]),v._v(":")]),v._v(" "),_("p",[v._v("php artisan make:seeder UsersTableSeeder")]),v._v(" "),_("p",[v._v("php artisan make:seeder ArticlesTableSeeder")]),v._v(" "),_("p",[v._v("Настроим их для добавления фиктивных данных в SQLite:")]),v._v(" "),_("p",[v._v("//database/seeds/UsersTableSeeder.php")]),v._v(" "),_("p",[v._v("use App\\User;")]),v._v(" "),_("p",[v._v("use Illuminate\\Database\\Seeder;")]),v._v(" "),_("p",[v._v("class UsersTableSeeder extends Seeder")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[v._v("Run the database seeds.")])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function run()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("\\App\\User::truncate();")]),v._v(" "),_("p",[v._v("$faker = \\Faker\\Factory::create();")]),v._v(" "),_("p",[v._v("$password = bcrypt('secret');")]),v._v(" "),_("p",[v._v("\\App\\User::create([")]),v._v(" "),_("p",[v._v("'name' => $faker->name,")]),v._v(" "),_("p",[v._v("'email' => 'graphql@test.com',")]),v._v(" "),_("p",[v._v("'password' => $password,")]),v._v(" "),_("p",[v._v("]);")]),v._v(" "),_("p",[v._v("for ($i = 0; $i < 10; ++$i) {")]),v._v(" "),_("p",[v._v("\\App\\User::create([")]),v._v(" "),_("p",[v._v("'name' => $faker->name,")]),v._v(" "),_("p",[v._v("'email' => $faker->email,")]),v._v(" "),_("p",[v._v("'password' => $password,")]),v._v(" "),_("p",[v._v("]);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("// database/seeds/ArticlesTableSeeder.php")]),v._v(" "),_("p",[v._v("use App\\Article;")]),v._v(" "),_("p",[v._v("use Illuminate\\Database\\Seeder;")]),v._v(" "),_("p",[v._v("class ArticlesTableSeeder extends Seeder")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[v._v("Run the database seeds.")])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function run()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("\\App\\Article::truncate();")]),v._v(" "),_("p",[v._v("\\App\\Article::unguard();")]),v._v(" "),_("p",[v._v("$faker = \\Faker\\Factory::create();")]),v._v(" "),_("p",[v._v("\\App\\User::all()->each(function ($user) use ($faker) {")]),v._v(" "),_("p",[v._v("foreach (range(1, 5) as $i) {")]),v._v(" "),_("p",[v._v("\\App\\Article::create([")]),v._v(" "),_("p",[v._v("'user_id' => $user->id,")]),v._v(" "),_("p",[v._v("'title' => $faker->sentence,")]),v._v(" "),_("p",[v._v("'content' => $faker->paragraphs(3, true),")]),v._v(" "),_("p",[v._v("]);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("});")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("// database/seeds/DatabaseSeeder.php")]),v._v(" "),_("p",[v._v("use Illuminate\\Database\\Seeder;")]),v._v(" "),_("p",[v._v("class DatabaseSeeder extends Seeder")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Seed the application's database.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@return void")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function run()")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("$this->call(UsersTableSeeder::class);")]),v._v(" "),_("p",[v._v("$this->call(ArticlesTableSeeder::class);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Запустим наши сидеры и заполним базу данных:")]),v._v(" "),_("p",[v._v("php artisan db:seed")]),v._v(" "),_("h3",{attrs:{id:"laravel-lighthouse-и-сервер-graphql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#laravel-lighthouse-и-сервер-graphql"}},[v._v("#")]),v._v(" Laravel Lighthouse и сервер GraphQL")]),v._v(" "),_("p",[v._v("Теперь, когда у нас есть настроенная база данных и модели, пришло время приступить к созданию сервера GraphQL. Для Laravel существует несколько вариантов, в этой статье мы будем использовать "),_("a",{attrs:{href:"https://github.com/nuwave/lighthouse",target:"_blank",rel:"noopener noreferrer"}},[v._v("Lighthouse"),_("OutboundLink")],1),v._v(".")]),v._v(" "),_("p",[v._v("Lighthouse — это пакет, который я создал несколько лет назад. Недавно он получил удивительную поддержку со стороны растущего вокруг него сообщества. Он позволяет разработчикам быстро настроить сервер GraphQL, используя Laravel с небольшим количеством кода. При этом пакет достаточно гибкий и настраивается для использования в практически любом проекте.")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://laravel.demiart.ru/wp-content/uploads/2019/10/GraphQL2-1024x310.png",alt:"GraphQL и Laravel"}})]),v._v(" "),_("p",[v._v("Установим пакет в наш проект:")]),v._v(" "),_("p",[v._v('composer require nuwave/lighthouse:"3.1.*"')]),v._v(" "),_("p",[v._v("Опубликуем файл конфигурации Lighthouse:")]),v._v(" "),_("p",[v._v('php artisan vendor:publish --provider="Nuwave\\Lighthouse\\LighthouseServiceProvider" --tag=config')]),v._v(" "),_("p",[_("em",[v._v("Примечание. Вы также можете опубликовать дефолтную схему Lighthouse, просто удалив параметр "),_("code",[v._v("--tag=config")]),v._v(". Но в этой статье мы будем создавать схему с нуля.")])]),v._v(" "),_("p",[v._v("Если вы посмотрите в файл "),_("code",[v._v("config/lighthouse.php")]),v._v(", то увидите настройку, используемую для регистрации нашего файла схемы в Lighthouse:")]),v._v(" "),_("p",[v._v("'schema' => [")]),v._v(" "),_("p",[v._v("'register' => base_path('graphql/schema.graphql'),")]),v._v(" "),_("p",[v._v("],")]),v._v(" "),_("p",[v._v("Давайте создадим файл схемы "),_("code",[v._v("/graphql/schema.graphql")]),v._v(" и настроим тип объекта пользователя и запроса:")]),v._v(" "),_("p",[v._v("type User {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("name: String!")]),v._v(" "),_("p",[v._v("email: String!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type Query {")]),v._v(" "),_("p",[v._v("user(id: ID! @eq): User @find")]),v._v(" "),_("p",[v._v("users: [User!]! @all")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Скорей всего вы заметили, что наша схема выглядит так же как и та, которую мы сделали раньше, за исключением того, что мы добавили некоторые идентификаторы, называемые "),_("a",{attrs:{href:"https://www.apollographql.com/docs/graphql-tools/schema-directives",target:"_blank",rel:"noopener noreferrer"}},[v._v("директивами схемы"),_("OutboundLink")],1),v._v(".")]),v._v(" "),_("p",[v._v("Разберем схему. Наше первое определение — это тип объекта "),_("code",[v._v("User")]),v._v(", который имеет отношение к eloquent модели "),_("code",[v._v("App\\User")]),v._v(". Мы определили поля "),_("code",[v._v("id")]),v._v(", "),_("code",[v._v("name")]),v._v(" и "),_("code",[v._v("email")]),v._v(", которые могут быть запрошены в модели "),_("code",[v._v("User")]),v._v(". Это также означает, что к полям "),_("code",[v._v("password")]),v._v(", "),_("code",[v._v("created_at")]),v._v(", и "),_("code",[v._v("updated_at")]),v._v(" нельзя обращаться из API.")]),v._v(" "),_("p",[v._v("Далее у нас есть тип "),_("code",[v._v("Query")]),v._v(", являющийся точкой входа в наш API и использующийся для запроса данных. Наше первое поле — "),_("code",[v._v("users")]),v._v(", возвращающее массив типов объектов "),_("code",[v._v("User")]),v._v(". Директива "),_("code",[v._v("@all")]),v._v(" сообщает Lighthouse, что нужно выполнить запрос Eloquent, используя модель "),_("code",[v._v("User")]),v._v(" и получить все результаты. Тоже самое, что и:")]),v._v(" "),_("p",[v._v("$users = \\App\\User::all();")]),v._v(" "),_("p",[_("em",[v._v("Примечание: Lighthouse знает, что модель нужно искать в пространстве имен "),_("code",[v._v("\\App\\User")]),v._v(" по опции "),_("code",[v._v("namespaces")]),v._v(" в файле конфигурации.")])]),v._v(" "),_("p",[v._v("Второе поле в типе запроса — это вызов "),_("code",[v._v("user")]),v._v(", который принимает "),_("code",[v._v("id")]),v._v(" в качестве аргумента и возвращает один тип объекта "),_("code",[v._v("User")]),v._v(". Мы также добавили две директивы, которые помогут Lighthouse автоматически построить запрос и вернуть один результат. Директива "),_("code",[v._v("@eq")]),v._v(" сообщает Lighthouse, что нужно добавить "),_("code",[v._v("where")]),v._v(" по "),_("code",[v._v("id")]),v._v(", а директива "),_("code",[v._v("@find")]),v._v(" указывает на возврат одного результата. Если написать этот запрос, используя построитель запросов Laravel, то он будет выглядеть так:")]),v._v(" "),_("p",[v._v("$user = \\App\\User::where('id', $args['id'])->first();")]),v._v(" "),_("h3",{attrs:{id:"работаем-с-api-graphql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#работаем-с-api-graphql"}},[v._v("#")]),v._v(" Работаем с API GraphQL")]),v._v(" "),_("p",[v._v("Теперь, когда у нас есть представление о том, как Lighthouse использует нашу схему для создания запросов, давайте запустим наш сервер и запросим данные. Начнем с запуска нашего сервера:")]),v._v(" "),_("p",[v._v("php artisan serve")]),v._v(" "),_("p",[v._v("Laravel development server started: "),_("a",{attrs:{href:"http://127.0.0.1:8000",target:"_blank",rel:"noopener noreferrer"}},[v._v("http://127.0.0.1:8000"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("Чтобы запросить конечную точку GraphQL, вы можете запустить команду cURL в терминале или стандартном клиенте, например в Postman. Однако, для того, чтобы получить все преимущества GraphQL (такие как автозаполнение, выделение ошибок, документация и т.д.), мы будем использовать "),_("a",{attrs:{href:"https://github.com/prisma/graphql-playground",target:"_blank",rel:"noopener noreferrer"}},[v._v("GraphQL Playground"),_("OutboundLink")],1),v._v(" ("),_("a",{attrs:{href:"https://github.com/prisma/graphql-playground/releases",target:"_blank",rel:"noopener noreferrer"}},[v._v("скачать"),_("OutboundLink")],1),v._v(").")]),v._v(" "),_("p",[v._v("При запуске Playground, нажмите на вкладку «URL Endpoint» и введите "),_("code",[v._v("http://localhost:8000/graphql")]),v._v(", чтобы указать GraphQL Playground наш сервер. В левой части редактора мы можем запрашивать наши данные. Давайте начнем с того, что запросим всех пользователей, которых мы добавили в базу данных:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("users {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("name")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Когда вы нажмете кнопку play в середине IDE (или Ctrl+Enter), то увидите ответ JSON от сервера с правой стороны, который будет выглядеть примерно так:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"users": [')]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com",')]),v._v(" "),_("p",[v._v('"name": "Carolyn Powlowski"')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "2",')]),v._v(" "),_("p",[v._v('"email": "kheaney@yahoo.com",')]),v._v(" "),_("p",[v._v('"name": "Elouise Raynor"')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "3",')]),v._v(" "),_("p",[v._v('"email": "orlando.sipes@yahoo.com",')]),v._v(" "),_("p",[v._v('"name": "Mrs. Dejah Wiza"')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("...")]),v._v(" "),_("p",[v._v("]")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Поскольку мы использовали Faker для заполнения базы данных, то данные в полях "),_("code",[v._v("email")]),v._v(" и "),_("code",[v._v("name")]),v._v(" будут отличаться.")])]),v._v(" "),_("p",[v._v("Давайте попробуем запросить одного пользователя:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("user(id: 1) {")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("name")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("И получим следующий ответ:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"user": {')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com",')]),v._v(" "),_("p",[v._v('"name": "Carolyn Powlowski"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("С запроса таких данных приятно начинать, но маловероятно, что вы окажетесь в проекте, где нужно будет запрашивать все данные разом. Поэтому добавим пагинацию. Если посмотреть на широкий спектр встроенных директив Lighthouse, то можно увидеть директиву "),_("code",[v._v("@paginate")]),v._v(". Обновим объект запроса нашей схемы следующим образом:")]),v._v(" "),_("p",[v._v("type Query {")]),v._v(" "),_("p",[v._v("user(id: ID! @eq): User @find")]),v._v(" "),_("p",[v._v("users: [User!]! @paginate")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Если перезагрузить GraphQL Playground через Ctrl/Cmd+R и попробовать выполнить запрос пользователей еще раз, то вы получите ошибку «"),_("em",[v._v("Cannot query field «id» on type «UserPaginator»")]),v._v("». Что же случилось? Lighthouse манипулирует нашей схемой, чтобы мы могли получить постраничный вывод результатов, и делает это, изменяя тип возвращаемого поля "),_("code",[v._v("users")]),v._v(".")]),v._v(" "),_("p",[v._v("Давайте подробнее рассмотрим нашу схему на вкладке Docs в GraphQL Playground. Посмотрите на поле "),_("code",[v._v("users")]),v._v(" — оно возвращает "),_("code",[v._v("UserPaginator")]),v._v(", который возвращает массив пользователей и заданный Lighthouse’ом тип "),_("code",[v._v("PaginatorInfo")]),v._v(":")]),v._v(" "),_("p",[v._v("type UserPaginator {")]),v._v(" "),_("p",[v._v("paginatorInfo: PaginatorInfo!")]),v._v(" "),_("p",[v._v("data: [User!]!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type PaginatorInfo {")]),v._v(" "),_("p",[v._v("count: Int!")]),v._v(" "),_("p",[v._v("currentPage: Int!")]),v._v(" "),_("p",[v._v("firstItem: Int")]),v._v(" "),_("p",[v._v("hasMorePages: Boolean!")]),v._v(" "),_("p",[v._v("lastItem: Int")]),v._v(" "),_("p",[v._v("lastPage: Int!")]),v._v(" "),_("p",[v._v("perPage: Int!")]),v._v(" "),_("p",[v._v("total: Int!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Если вы знакомы со встроенной пагинацией в Laravel, то поля, доступные в типе "),_("code",[v._v("PaginatorInfo")]),v._v(", вам уже знакомы. Итак, чтобы запросить двух пользователей, получить общее количество пользователей и проверить, что у нас есть страницы для цикла, мы бы отправили следующий запрос:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("users(count:2) {")]),v._v(" "),_("p",[v._v("paginatorInfo {")]),v._v(" "),_("p",[v._v("total")]),v._v(" "),_("p",[v._v("hasMorePages")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("data {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("name")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Который вернет нам следующий ответ:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"users": {')]),v._v(" "),_("p",[v._v('"paginatorInfo": {')]),v._v(" "),_("p",[v._v('"total": 11,')]),v._v(" "),_("p",[v._v('"hasMorePages": true')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v('"data": [')]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"name": "Carolyn Powlowski",')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com"')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "2",')]),v._v(" "),_("p",[v._v('"name": "Elouise Raynor",')]),v._v(" "),_("p",[v._v('"email": "kheaney@yahoo.com"')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("]")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"отношения"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#отношения"}},[v._v("#")]),v._v(" Отношения")]),v._v(" "),_("p",[v._v("Как правило, при разработке приложений большая часть данных связана. В нашем случае "),_("code",[v._v("User")]),v._v(" может написать много "),_("code",[v._v("Articles")]),v._v(", поэтому давайте добавим это отношение к типу "),_("code",[v._v("User")]),v._v(" и определим тип "),_("code",[v._v("Article")]),v._v(":")]),v._v(" "),_("p",[v._v("type User {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("name: String!")]),v._v(" "),_("p",[v._v("email: String!")]),v._v(" "),_("p",[v._v("articles: [Article!]! @hasMany")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type Article {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("title: String!")]),v._v(" "),_("p",[v._v("content: String!")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Здесь мы используем директиву "),_("code",[v._v("@hasMany")]),v._v(", которая сообщает Lighthouse, что модель "),_("code",[v._v("User")]),v._v(" имеет отношение "),_("code",[v._v("\\Illuminate\\Database\\Eloquent\\Relations\\HasMany")]),v._v(" с моделью "),_("code",[v._v("Article")]),v._v(".")]),v._v(" "),_("p",[v._v("Давайте запросим свежеопределенные отношения:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("user(id:1) {")]),v._v(" "),_("p",[v._v("articles {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("title")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Мы получим такой ответ:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"user": {')]),v._v(" "),_("p",[v._v('"articles": [')]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"title": "Aut velit et temporibus ut et tempora sint."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "2",')]),v._v(" "),_("p",[v._v('"title": "Voluptatem sed labore ea voluptas."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "3",')]),v._v(" "),_("p",[v._v('"title": "Beatae sit et maxime consequatur et natus totam."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "4",')]),v._v(" "),_("p",[v._v('"title": "Corrupti beatae cumque accusamus."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "5",')]),v._v(" "),_("p",[v._v('"title": "Aperiam quidem sit esse rem sed cupiditate."')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("]")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Теперь добавим отношение "),_("code",[v._v("author")]),v._v(" к нашему типу объекта "),_("code",[v._v("Article")]),v._v(" используя директиву "),_("code",[v._v("@belongsTo")]),v._v(" и обновим "),_("code",[v._v("Query")]),v._v(":")]),v._v(" "),_("p",[v._v("type Article {")]),v._v(" "),_("p",[v._v("id: ID!")]),v._v(" "),_("p",[v._v("title: String!")]),v._v(" "),_("p",[v._v("content: String!")]),v._v(" "),_("p",[v._v('author: User! @belongsTo(relation: "user")')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("type Query {")]),v._v(" "),_("p",[v._v("user(id: ID! @eq): User @find")]),v._v(" "),_("p",[v._v("users: [User!]! @paginate")]),v._v(" "),_("p",[v._v("article(id: ID! @eq): Article @find")]),v._v(" "),_("p",[v._v("articles: [Article!]! @paginate")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Как вы видите, мы добавили опциональный аргумент "),_("code",[v._v("relation")]),v._v(" в директиву "),_("code",[v._v("@belongsTo")]),v._v(". Он говорит Lighthouse использовать отношение "),_("code",[v._v("user")]),v._v(" модели "),_("code",[v._v("Articles")]),v._v(" и назначать его в полю "),_("code",[v._v("author")]),v._v(".")]),v._v(" "),_("p",[v._v("Давайте запросим список статей с их авторами:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("articles(count:2) {")]),v._v(" "),_("p",[v._v("paginatorInfo {")]),v._v(" "),_("p",[v._v("total")]),v._v(" "),_("p",[v._v("hasMorePages")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("data {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("title")]),v._v(" "),_("p",[v._v("author {")]),v._v(" "),_("p",[v._v("name")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Мы должны получить следующий ответ от сервера:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"articles": {')]),v._v(" "),_("p",[v._v('"paginatorInfo": {')]),v._v(" "),_("p",[v._v('"total": 55,')]),v._v(" "),_("p",[v._v('"hasMorePages": true')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v('"data": [')]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"title": "Aut velit et temporibus ut et tempora sint.",')]),v._v(" "),_("p",[v._v('"author": {')]),v._v(" "),_("p",[v._v('"name": "Carolyn Powlowski",')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "2",')]),v._v(" "),_("p",[v._v('"title": "Voluptatem sed labore ea voluptas.",')]),v._v(" "),_("p",[v._v('"author": {')]),v._v(" "),_("p",[v._v('"name": "Carolyn Powlowski",')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("]")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"graphql-мутация"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#graphql-мутация"}},[v._v("#")]),v._v(" GraphQL Мутация")]),v._v(" "),_("p",[v._v("Теперь, когда мы можем запрашивать данные, давайте напишем мутации для создания новых пользователей и статей. Начнем с пользовательской модели:")]),v._v(" "),_("p",[v._v("type Mutation {")]),v._v(" "),_("p",[v._v("createUser(")]),v._v(" "),_("p",[v._v("name: String!")]),v._v(" "),_("p",[v._v('email: String! @rules(apply: ["email", "unique:users"])')]),v._v(" "),_("p",[v._v('password: String! @bcrypt @rules(apply: ["min:6"])')]),v._v(" "),_("p",[v._v("): User @create")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Разберем эту схему. Мы создали мутацию под именем "),_("code",[v._v("createUser")]),v._v(", которая принимает три аргумента ("),_("code",[v._v("name")]),v._v(", email и "),_("code",[v._v("password")]),v._v("). Мы применили директиву "),_("code",[v._v("@rules")]),v._v(" к аргументам "),_("code",[v._v("email")]),v._v(" и "),_("code",[v._v("password")]),v._v(" . Это может показаться вам знакомым, так как это похоже на "),_("a",{attrs:{href:"https://laravel.com/docs/5.8/validation#quick-writing-the-validation-logic",target:"_blank",rel:"noopener noreferrer"}},[v._v("валидацию в Laravel"),_("OutboundLink")],1),v._v(".")]),v._v(" "),_("p",[v._v("Затем мы применяем директиву "),_("code",[v._v("@bcrypt")]),v._v(" к полю "),_("code",[v._v("password")]),v._v(". Это зашифрует пароль, прежде чем он будет передан во вновь созданную модель.")]),v._v(" "),_("p",[v._v("Наконец, чтобы помочь нам создать новые модели, Lighthouse предоставляет директиву "),_("code",[v._v("@create")]),v._v(", которая будет принимать заданные нами аргументы и создавать новую модель. Выполнение той же логики в контроллере будет выглядеть следующим образом:")]),v._v(" "),_("p",[v._v("namespace App\\Http\\Controllers;")]),v._v(" "),_("p",[v._v("use Illuminate\\Http\\Request;")]),v._v(" "),_("p",[v._v("class UserController extends Controller")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Create a new user.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@param \\Illuminate\\Http\\Request $request")])]),v._v(" "),_("li",[_("p",[v._v("@return \\Illuminate\\Http\\Response")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function store(Request $request)")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("$data = $this->validate($request, [")]),v._v(" "),_("p",[v._v("'email' => ['email', 'unique:users'],")]),v._v(" "),_("p",[v._v("'password' => ['min:6']")]),v._v(" "),_("p",[v._v("]);")]),v._v(" "),_("p",[v._v("$user = \\App\\User::create($data);")]),v._v(" "),_("p",[v._v("return response()->json(['user' => $user]);")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Поле мутации "),_("code",[v._v("createUser")]),v._v(" настроили, давайте запустим его в GraphQL Playground:")]),v._v(" "),_("p",[v._v("mutation {")]),v._v(" "),_("p",[v._v("createUser(")]),v._v(" "),_("p",[v._v('name:"John Doe"')]),v._v(" "),_("p",[v._v('email:"john.doe@example.com"')]),v._v(" "),_("p",[v._v('password: "secret"')]),v._v(" "),_("p",[v._v(") {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("name")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Мы должны получить следующий ответ:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"createUser": {')]),v._v(" "),_("p",[v._v('"id": "12",')]),v._v(" "),_("p",[v._v('"name": "John Doe",')]),v._v(" "),_("p",[v._v('"email": "john.doe@example.com"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"graphql-аутентификация-и-авторизация"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#graphql-аутентификация-и-авторизация"}},[v._v("#")]),v._v(" GraphQL Аутентификация и Авторизация")]),v._v(" "),_("p",[v._v("Поскольку нам нужно добавить "),_("code",[v._v("user_id")]),v._v(" к моделям "),_("code",[v._v("Article")]),v._v(", сейчас самое время перейти к аутентификации и авторизации в GraphQL/Lighthouse.")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://laravel.demiart.ru/wp-content/uploads/2019/10/GraphQL3-1024x396.png",alt:"GraphQL и Laravel"}})]),v._v(" "),_("p",[v._v("Чтобы аутентифицировать пользователя, нам нужно предоставить ему "),_("code",[v._v("api_token")]),v._v(". Давайте создадим для этого мутацию и добавим директиву "),_("code",[v._v("@field")]),v._v(", указывающую Lighthouse на отдельный "),_("code",[v._v("resolver")]),v._v(", который будет обрабатывать эту логику. И настроим его как "),_("a",{attrs:{href:"https://laravel.com/docs/5.8/controllers#basic-controllers",target:"_blank",rel:"noopener noreferrer"}},[v._v("обычный контроллер в Laravel"),_("OutboundLink")],1),v._v(", используя аргумент "),_("code",[v._v("resolver")]),v._v(".")]),v._v(" "),_("p",[v._v("Директивой "),_("code",[v._v("@field,")]),v._v(" определенной ниже, мы сообщаем Lighthouse, что когда запускается мутация "),_("code",[v._v("login")]),v._v(", то использовать метод "),_("code",[v._v("createToken")]),v._v(" в "),_("code",[v._v("App\\GraphQL\\Mutations\\AuthMutator")]),v._v(":")]),v._v(" "),_("p",[v._v("type Mutation {")]),v._v(" "),_("h1",{attrs:{id:""}},[_("a",{staticClass:"header-anchor",attrs:{href:"#"}},[v._v("#")]),v._v(" ...")]),v._v(" "),_("p",[v._v("login(")]),v._v(" "),_("p",[v._v("email: String!")]),v._v(" "),_("p",[v._v("password: String!")]),v._v(" "),_("p",[v._v('): String @field(resolver: "AuthMutator@resolve")')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Вам не нужно здесь использовать пространство имен. Для мутаций оно уже определено как "),_("code",[v._v("App\\\\GraphQL\\\\Mutations")]),v._v(" в конфигурационном файле "),_("code",[v._v("lighthouse.php")]),v._v(". Однако вы можете использовать полное пространство имен, если хотите.")])]),v._v(" "),_("p",[v._v("Давайте используем генератор Lighthouse для создания нового класса преобразователя (mutator):")]),v._v(" "),_("p",[v._v("php artisan lighthouse:mutation AuthMutator")]),v._v(" "),_("p",[v._v("Обновим нашу функцию resolver следующим образом:")]),v._v(" "),_("p",[v._v("namespace App\\GraphQL\\Mutations;")]),v._v(" "),_("p",[v._v("use Illuminate\\Support\\Arr;")]),v._v(" "),_("p",[v._v("use Illuminate\\Support\\Str;")]),v._v(" "),_("p",[v._v("use Illuminate\\Support\\Facades\\Auth;")]),v._v(" "),_("p",[v._v("use GraphQL\\Type\\Definition\\ResolveInfo;")]),v._v(" "),_("p",[v._v("use Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;")]),v._v(" "),_("p",[v._v("class AuthMutator")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Return a value for the field.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@param null $rootValue Usually contains the result returned from the parent field. In this case, it is always "),_("code",[v._v("null")]),v._v(".")])]),v._v(" "),_("li",[_("p",[v._v("@param mixed[] $args The arguments that were passed into the field.")])]),v._v(" "),_("li",[_("p",[v._v("@param \\Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext $context Arbitrary data that is shared between all fields of a single query.")])]),v._v(" "),_("li",[_("p",[v._v("@param \\GraphQL\\Type\\Definition\\ResolveInfo $resolveInfo Information about the query itself, such as the execution state, the field name, path to the field from the root, and more.")])]),v._v(" "),_("li",[_("p",[v._v("@return mixed")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function resolve($rootValue, array $args, GraphQLContext $context, ResolveInfo $resolveInfo)")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("$credentials = Arr::only($args, ['email', 'password']);")]),v._v(" "),_("p",[v._v("if (Auth::once($credentials)) {")]),v._v(" "),_("p",[v._v("$token = Str::random(60);")]),v._v(" "),_("p",[v._v("$user = auth()->user();")]),v._v(" "),_("p",[v._v("$user->api_token = $token;")]),v._v(" "),_("p",[v._v("$user->save();")]),v._v(" "),_("p",[v._v("return $token;")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("return null;")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Теперь, когда "),_("code",[v._v("resolver")]),v._v(" настроен, давайте его проверим и попробуем получить токен API, используя следующую мутацию в GraphQL Playground:")]),v._v(" "),_("p",[v._v("mutation {")]),v._v(" "),_("p",[v._v('login(email:"graphql@test.com", password:"secret")')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Мы должны получить токен:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"login": "VJCz1DCpmdvB9WatqvWbXBP2RN8geZQlrQatUnWIBJCdbAyTl3UsdOuio3VE"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Обязательно скопируйте присланный токен для того, чтобы его можно было использовать позже.")])]),v._v(" "),_("p",[v._v("Для того, чтобы убедиться, что наша логика работает, давайте добавим поле запроса, которое вернет аутентифицированного пользователя. Поле под названием "),_("code",[v._v("me")]),v._v(" и с директивой "),_("code",[v._v("@auth")]),v._v(". Установим аргумент "),_("code",[v._v("guard")]),v._v(" равным "),_("code",[v._v("api")]),v._v(", поскольку именно так мы будем аутентифицировать пользователя.")]),v._v(" "),_("p",[v._v("Выполним запрос. В GraphQL Playground вы можете устанавливать заголовки ваших запросов, дважды кликнув на вкладку «Http Headers» внизу. Мы добавили заголовки с JSON объектом, поэтому для добавления bearer токена в каждый запрос надо добавить следующее:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"Authorization": "Bearer VJCz1DCpmdvB9WatqvWbXBP2RN8geZQlrQatUnWIBJCdbAyTl3UsdOuio3VE"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Замените bearer токен на тот, который вы получили при логине.")])]),v._v(" "),_("p",[v._v("Давайте выполним запрос "),_("code",[v._v("me")]),v._v(":")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("me {")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("articles {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("title")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("В результате мы должны получить следующее:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"me": {')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com",')]),v._v(" "),_("p",[v._v('"articles": [')]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"title": "Rerum perspiciatis et quos occaecati exercitationem."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "2",')]),v._v(" "),_("p",[v._v('"title": "Placeat quia cumque laudantium optio voluptatem sed qui."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "3",')]),v._v(" "),_("p",[v._v('"title": "Optio voluptatem et itaque sit animi."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "4",')]),v._v(" "),_("p",[v._v('"title": "Excepturi in ad qui dolor ad perspiciatis adipisci."')]),v._v(" "),_("p",[v._v("},")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"id": "5",')]),v._v(" "),_("p",[v._v('"title": "Qui nemo blanditiis sed fugit consequatur."')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("]")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"мидлвар"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#мидлвар"}},[v._v("#")]),v._v(" Мидлвар")]),v._v(" "),_("p",[v._v("Теперь мы знаем, что наша аутентификация работает правильно. Пора написать нашу последнюю мутацию для создания статьи для аутентифицированного пользователя. Мы будем использовать директиву "),_("code",[v._v("@field")]),v._v(", чтобы указывать Lighthouse на наш "),_("code",[v._v("resolver")]),v._v(", а также включим директиву "),_("code",[v._v("@middleware")]),v._v(" для гарантии, что пользователь залогинен.")]),v._v(" "),_("p",[v._v("type Mutation {")]),v._v(" "),_("h1",{attrs:{id:"-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[v._v("#")]),v._v(" ...")]),v._v(" "),_("p",[v._v("createArticle(title: String!, content: String!): Article")]),v._v(" "),_("p",[v._v('@field(resolver: "ArticleMutator@create")')]),v._v(" "),_("p",[v._v('@middleware(checks: ["auth:api"])')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Во-первых, давайте сгенерируем класс преобразователя:")]),v._v(" "),_("p",[v._v("php artisan lighthouse:mutation ArticleMutator")]),v._v(" "),_("p",[v._v("И добавим в него следующую логику:")]),v._v(" "),_("p",[v._v("namespace App\\GraphQL\\Mutations;")]),v._v(" "),_("p",[v._v("use Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;")]),v._v(" "),_("p",[v._v("class ArticleMutator")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("/**")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Return a value for the field.")])]),v._v(" "),_("li"),v._v(" "),_("li",[_("p",[v._v("@param null $rootValue")])]),v._v(" "),_("li",[_("p",[v._v("@param mixed[] $args")])]),v._v(" "),_("li",[_("p",[v._v("@param \\Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext $context")])]),v._v(" "),_("li",[_("p",[v._v("@return mixed")])])]),v._v(" "),_("p",[v._v("*/")]),v._v(" "),_("p",[v._v("public function create($rootValue, array $args, GraphQLContext $context)")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v("$article = new \\App\\Article($args);")]),v._v(" "),_("p",[v._v("$context->user()->articles()->save($article);")]),v._v(" "),_("p",[v._v("return $article;")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("em",[v._v("Примечание. Мы переименовали дефолтную функцию "),_("code",[v._v("resolve")]),v._v(" в "),_("code",[v._v("create")]),v._v(". Но не нужно создавать новый класс для каждого resolver, вы просто можете группировать логику.")])]),v._v(" "),_("p",[v._v("Запустим нашу новую мутацию и проверим результат. Не забудьте сохранить заголовок "),_("code",[v._v("Authorization")]),v._v(" из нашего предыдущего запроса на вкладке «HTTP Headers»:")]),v._v(" "),_("p",[v._v("mutation {")]),v._v(" "),_("p",[v._v("createArticle(")]),v._v(" "),_("p",[v._v('title:"Building a GraphQL Server with Laravel"')]),v._v(" "),_("p",[v._v('content:"In case you\'re not currently familiar with it, GraphQL is a query language used to interact with your API..."')]),v._v(" "),_("p",[v._v(") {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("author {")]),v._v(" "),_("p",[v._v("id")]),v._v(" "),_("p",[v._v("email")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("Должны получить:")]),v._v(" "),_("p",[v._v("{")]),v._v(" "),_("p",[v._v('"data": {')]),v._v(" "),_("p",[v._v('"createArticle": {')]),v._v(" "),_("p",[v._v('"id": "56",')]),v._v(" "),_("p",[v._v('"author": {')]),v._v(" "),_("p",[v._v('"id": "1",')]),v._v(" "),_("p",[v._v('"email": "graphql@test.com"')]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("h3",{attrs:{id:"завершение"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#завершение"}},[v._v("#")]),v._v(" Завершение")]),v._v(" "),_("p",[v._v("Напомню, мы использовали Lighthouse для создания сервера GraphQL для нашего проекта на Laravel. Использовали встроенные директивы, создавали запросы и мутации, а также обрабатывали авторизацию и аутентификацию.")]),v._v(" "),_("p",[v._v("Lighthouse позволяет  делать гораздо больше (например, создавать собственные директивы), но в этой статье мы остановились на основах и смогли установить и запустить сервер GraphQL с небольшой шаблонной структурой.")]),v._v(" "),_("p",[v._v("В следующий раз, когда вам нужно настроить API для мобильного или одностраничного приложения, обязательно рассмотрите GraphQL как способ запроса ваших данных!")])])}),[],!1,null,null,null);_.default=t.exports}}]);