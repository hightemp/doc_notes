(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{507:function(e,t,a){"use strict";a.r(t);var n=a(14),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("https://habr.com/ru/articles/659443/")]),e._v(" "),t("p",[e._v("Каждый разработчик рано или поздно сталкивается с необходимостью повторного использования собственного кода. В проектах PHP для этих целей создаются пакеты, устанавливаемые с помощью Composer. При этом пакеты могут быть абстрагированы от каких-либо фреймворков, либо могут быть предназначены для использования в конкретном PHP-фреймворке. В данной статье рассказывается о том, как создать PHP-пакеты для фреймворка Laravel, но материал будет полезен и тем, кто собирается разрабатывать любые другие PHP-пакеты (как публичные, так и приватные).")]),e._v(" "),t("p",[e._v("Для лучшего понимания данного материала рекомендуется ознакомиться с разделом о разработке пакетов в официальной документации "),t("a",{attrs:{href:"https://laravel.com/docs/9.x/packages",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel"),t("OutboundLink")],1),e._v(". А для более детального изучения темы будет полезен данный "),t("a",{attrs:{href:"https://laravelpackage.com/#reasons-to-develop-a-package",target:"_blank",rel:"noopener noreferrer"}},[e._v("ресурс"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Данная статья в большей мере ориентирована на начинающих разработчиков.")]),e._v(" "),t("h2",{attrs:{id:"разработка-пакета"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#разработка-пакета"}},[e._v("#")]),e._v(" Разработка пакета")]),e._v(" "),t("p",[e._v("Для разработки Laravel-пакета будем использовать пакет "),t("a",{attrs:{href:"https://github.com/orchestral/testbench",target:"_blank",rel:"noopener noreferrer"}},[e._v("orchestral/testbench"),t("OutboundLink")],1),e._v(". Данный инструмент позволяет разрабатывать Laravel-пакеты по методологии TDD ("),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Test-driven_development#:~:text=Test%2Ddriven%20development%20(TDD),software%20against%20all%20test%20cases",target:"_blank",rel:"noopener noreferrer"}},[e._v("Test-driven development"),t("OutboundLink")],1),e._v("). В своих зависимостях он содержит ядро фреймворка Laravel и предоставляет доступ ко всем возможностям функциональных (Feature) тестов Laravel.")]),e._v(" "),t("p",[e._v("С применением "),t("strong",[e._v("orchestral/testbench")]),e._v(" написаны официальные пакеты Laravel ("),t("a",{attrs:{href:"https://github.com/laravel/sanctum",target:"_blank",rel:"noopener noreferrer"}},[e._v("sanctum"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/laravel/telescope",target:"_blank",rel:"noopener noreferrer"}},[e._v("telescope"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/laravel/horizon",target:"_blank",rel:"noopener noreferrer"}},[e._v("horizon"),t("OutboundLink")],1),e._v(" и т.д.), а также многие другие Laravel-пакеты от комьюнити, например пакеты от компании "),t("a",{attrs:{href:"https://spatie.be/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spatie"),t("OutboundLink")],1),e._v(" ("),t("a",{attrs:{href:"https://github.com/spatie/laravel-permission",target:"_blank",rel:"noopener noreferrer"}},[e._v("laravel-permission"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/spatie/laravel-query-builder",target:"_blank",rel:"noopener noreferrer"}},[e._v("laravel-query-builder"),t("OutboundLink")],1),e._v("). Чтобы понять, как пользоваться "),t("strong",[e._v("orchestral/testbench")]),e._v(", достаточно ознакомиться с кодом тестов перечисленных пакетов. Если вы имеете достаточный опыт в написании тестов в Laravel, можете прямо сейчас переходить по ссылкам и изучать код тестов указанных пакетов.")]),e._v(" "),t("p",[e._v("В рамках данного туториала разрабатывается пакет "),t("strong",[e._v("laravel-example")]),e._v(". Его код можно найти "),t("a",{attrs:{href:"https://github.com/yuraplohov/laravel-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(". Это демонстрационный пакет, в котором мы задействуем такие основные компоненты фреймворка Laravel, как миграции, модели, файлы конфигурации, роуты, контроллеры, консольные команды.")]),e._v(" "),t("p",[e._v("Для разработки потребуются интерпретатор PHP и Composer.")]),e._v(" "),t("p",[e._v("Приступим к разработке пакета и первым делом создадим директорию "),t("strong",[e._v("laravel-example")]),e._v(".")]),e._v(" "),t("p",[e._v("В этой директории необходимо создать файл "),t("strong",[e._v("composer.json")]),e._v(". Его можно создать двумя способами.")]),e._v(" "),t("p",[t("strong",[e._v("Первый способ")]),e._v(" - создать файл с помощью Composer. Для этого необходимо выполнить консольную команду "),t("code",[e._v("composer init")]),e._v(", после чего Composer попросит ввести в консоль ответы на вопросы относительно создаваемого пакета.")]),e._v(" "),t("p",[t("strong",[e._v("Второй способ")]),e._v(" - создать файл "),t("strong",[e._v("composer.json")]),e._v(" вручную и затем поместить в него некий заготовленный шаблон конфигурации, например такой:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "yuraplohov/laravel-example",\n  "description": "Laravel package example",\n  "license": "MIT",\n  "authors": [\n    {\n      "name": "Yuriy PLokhov",\n      "email": "yurii.plohov@gmail.com"\n    }\n  ],\n  "require": {\n    "php": "^8.1"\n  },\n  "require-dev": {\n    "orchestra/testbench": "^7.2",\n    "phpunit/phpunit": "^9.5"\n  },\n  "autoload": {\n    "psr-4": {\n      "Yuraplohov\\\\LaravelExample\\\\": "src/"\n    }\n  },\n  "autoload-dev": {\n    "psr-4": {\n      "Yuraplohov\\\\LaravelExample\\\\Test\\\\": "tests/"\n    }\n  }\n}\n')])])]),t("p",[e._v("Со всеми директивами файла "),t("strong",[e._v("composer.json")]),e._v(", можно ознакомиться "),t("a",{attrs:{href:"https://getcomposer.org/doc/04-schema.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(". В рамках данного материала будут упомянуты лишь некоторые из них.")]),e._v(" "),t("p",[e._v("В директиве "),t("strong",[e._v("name")]),e._v(' необходимо указать название создаваемого пакета. Название состоит из имени вендора и имени самого пакета, разделенных слешем ("/"). В качестве имени вендора можете использовать никнейм вашего аккаунта в git-репозитории, в котором будет храниться пакет.')]),e._v(" "),t("p",[e._v("Далее в "),t("strong",[e._v("laravel-example")]),e._v(" создаем директории "),t("strong",[e._v("src")]),e._v(" и "),t("strong",[e._v("tests")]),e._v(". В нашем файле "),t("strong",[e._v("composer.json")]),e._v(" в директивах "),t("strong",[e._v("autoload")]),e._v(" и "),t("strong",[e._v("autoload-dev")]),e._v(" указаны пространства имен, ассоциируемые именно с этими директориями. Имена пространств имен для пакетов принято создавать на основе названия пакета в CamelCase. Так, в нашем примере для пакета с названием "),t("strong",[e._v('"yuraplohov/laravel-example"')]),e._v(" мы создаем основное пространство имен "),t("strong",[e._v('"Yuraplohov\\LaravelExample"')]),e._v(', а для пространства имен с тестами добавляем "'),t("strong",[e._v("\\Test")]),e._v('".')]),e._v(" "),t("p",[e._v("Чтобы разместить в пакете все эти компоненты, в директории "),t("strong",[e._v("laravel-example")]),e._v(" необходимо создать структуру директорий, аналогичную структуре Laravel-проекта. Обратите внимание, что в Laravel-проекте основное пространство имен направлено на директорию "),t("strong",[e._v("app")]),e._v(", а в нашем пакете - на "),t("strong",[e._v("src")]),e._v(". Это значит, что "),t("strong",[e._v("src")]),e._v(" соответствует "),t("strong",[e._v("app")]),e._v(", и дальнейшую структуру пакета мы создаем, учитывая это соответствие. Например, директории "),t("strong",[e._v("config")]),e._v(", "),t("strong",[e._v("database")]),e._v(", "),t("strong",[e._v("routes")]),e._v(" мы помещаем на один уровень с "),t("strong",[e._v("src")]),e._v(", а в саму "),t("strong",[e._v("src")]),e._v(" помещаем "),t("strong",[e._v("Console/Commands")]),e._v(", "),t("strong",[e._v("Http/Controllers")]),e._v(", "),t("strong",[e._v("Models")]),e._v(", "),t("strong",[e._v("Providers")]),e._v(".")]),e._v(" "),t("p",[e._v("В результате структура директории "),t("strong",[e._v("laravel-example")]),e._v(" выглядит так:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("laravel-example")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("config")])]),e._v(" "),t("li",[t("p",[e._v("database")]),e._v(" "),t("ul",[t("li",[e._v("migrations")])])]),e._v(" "),t("li",[t("p",[e._v("routes")])]),e._v(" "),t("li",[t("p",[e._v("src")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Console")]),e._v(" "),t("ul",[t("li",[e._v("Commands")])])]),e._v(" "),t("li",[t("p",[e._v("Http")]),e._v(" "),t("ul",[t("li",[e._v("Controllers")])])]),e._v(" "),t("li",[t("p",[e._v("Models")])]),e._v(" "),t("li",[t("p",[e._v("Providers")])])])]),e._v(" "),t("li",[t("p",[e._v("tests")])])])])]),e._v(" "),t("p",[e._v("Для разработки пакета нам потребуются две dev-зависимости. Чтобы установить их выполняем последовательно следующие команды:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer require --dev phpunit/phpunit\n\ncomposer require --dev orchestra/testbench\n")])])]),t("p",[e._v("Обратите внимание, что таким образом мы устанавливаем последнюю версию пакета "),t("strong",[e._v("orchestra/testbench")]),e._v(", но надо иметь ввиду, что конкретные мажорные версии "),t("strong",[e._v("orchestra/testbench")]),e._v(" совместимы с конкретными версиями фреймворка Laravel. С таблицей соответствия версий можно ознакомиться "),t("a",{attrs:{href:"https://laravelpackage.com/02-development-environment.html#orchestra-testbench",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(". На момент написания статьи последней версией "),t("strong",[e._v("testbench")]),e._v(" является 7.x, которая соответствует версии 9.x фреймворка Laravel.")]),e._v(" "),t("p",[e._v("В том случае, если вы указываете зависимости пакета вручную, редактируя файл "),t("strong",[e._v("composer.json")]),e._v(', то версии зависимостей рекомендуется указывать в формате, обеспечивающем обратную совместимость загружаемых пакетов. Например, с кареткой и номерами мажорной и минорной версий: "^x.y". Чтобы проверить корректность указываемых ограничений вы можете воспользоваться данным '),t("a",{attrs:{href:"https://jubianchi.github.io/semver-check/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("сервисом"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("После установки зависимостей создаем в корне пакета файл "),t("strong",[e._v("phpunit.xml")]),e._v(". Данный файл предназначен для конфигурирования фреймворка PHPUnit. Помещаем в него следующий код:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<phpunit backupGlobals="false"\n         backupStaticAttributes="false"\n         beStrictAboutTestsThatDoNotTestAnything="false"\n         bootstrap="vendor/autoload.php"\n         colors="true"\n         convertDeprecationsToExceptions="true"\n         convertErrorsToExceptions="true"\n         convertNoticesToExceptions="true"\n         convertWarningsToExceptions="true"\n         processIsolation="false"\n         stopOnFailure="false"\n>\n  <testsuites>\n    <testsuite name="Example Test Suite">\n      <directory suffix="Test.php">./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n')])])]),t("p",[e._v("Со всеми элементами файла "),t("strong",[e._v("phpunit.xml")]),e._v(" можно ознакомиться "),t("a",{attrs:{href:"https://phpunit.readthedocs.io/en/9.5/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(". В данный момент лишь обратите внимание на элемент "),t("strong",[e._v("directory")]),e._v(", в котором указан относительный путь к директории с тестами ("),t("strong",[e._v("./tests/")]),e._v("), а также суффикс "),t("strong",[e._v("Test.php")]),e._v(", на который должно оканчиваться название каждого файла с тестами.")]),e._v(" "),t("p",[e._v("Для того чтобы выполнить тестирование необходимо запустить файл "),t("strong",[e._v("vendor/bin/phpunit")]),e._v(". При этом запуск тестов можно упростить, добавив в файл "),t("strong",[e._v("composer.json")]),e._v(" следующий параметр:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"scripts": {\n\t\t"test": [\n\t  \t\t"vendor/bin/phpunit"\n\t\t]\n},\n')])])]),t("p",[e._v("Теперь тесты можно запустить так:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer test\n")])])]),t("p",[e._v("Переходим непосредственно к написанию кода. Создадим в нашем пакете некоторые компоненты фреймворка Laravel.")]),e._v(" "),t("p",[e._v("Для начала создадим файл миграции, в котором описывается схема некой таблицы "),t("strong",[e._v("items")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateItemsTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('items', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('items');\n    }\n}\n")])])]),t("p",[e._v("Каждый класс миграций в Laravel зависит от нескольких классов фреймворка. Речь идет о трех классах, подключаемых с помощью ключевого слова "),t("strong",[e._v("use")]),e._v(". Создав класс миграции мы делаем наш пакет зависящим от двух пакетов ("),t("strong",[e._v("Illuminate\\Database")]),e._v(", "),t("strong",[e._v("Illuminate\\Support")]),e._v("), в которых находятся указанные три класса. Данные пакеты уже были скачаны в нашу директорию "),t("strong",[e._v("vendor")]),e._v(" в момент установки "),t("strong",[e._v("orchestra/testbench")]),e._v(", и мы можем их использовать в коде. Но, кроме того, данные зависимости необходимо явно указать в файле "),t("strong",[e._v("composer.json")]),e._v(" разрабатываемого пакета. Для этого в директиве require мы добавляем следующие строки:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"illuminate/database": "^9.0",\n"illuminate/support": "^9.0"\n')])])]),t("p",[e._v("Для созданной таблицы "),t("strong",[e._v("items")]),e._v(" мы добавляем модель "),t("strong",[e._v("src/Models/Item.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Item extends Model\n{\n\n}\n")])])]),t("p",[e._v("Создаем файл контроллера "),t("strong",[e._v("src/Http/Controllers/ItemsController.php")]),e._v(" с методом "),t("strong",[e._v("index()")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Http\\Controllers;\n\nuse Yuraplohov\\LaravelExample\\Models\\Item;\n\nclass ItemsController\n{\n    public function index()\n    {\n        $items = Item::select(['name'])->get();\n\n        return response()->json([\n            'items' => $items,\n        ]);\n    }\n}\n")])])]),t("p",[e._v("Создаем файл роутов "),t("strong",[e._v("routes/api.php")]),e._v(" с вызовом нашего контроллера:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Yuraplohov\\LaravelExample\\Http\\Controllers\\ItemsController;\n\nRoute::get('items', [ItemsController::class, 'index']);\n")])])]),t("p",[e._v("Создаем файл конфигурации "),t("strong",[e._v("config/example.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nreturn [\n    'param' => env('EXAMPLE_PARAM', 100),\n];\n")])])]),t("p",[e._v("Создаем консольную команду в файле "),t("strong",[e._v("src/Console/Commands/ExampleCommand.php")]),e._v(". В данной команде мы используем наш файл конфигурации "),t("strong",[e._v("config/example.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\Config;\n\nclass ExampleCommand extends Command\n{\n    protected $signature = 'example-command';\n\n    protected $description = 'Example Command';\n\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    public function handle()\n    {\n        $this->info(\"Command executed with config param value \" . Config::get('example.param'));\n\n        return 0;\n    }\n}\n")])])]),t("p",[e._v("Консольная команда требует еще одну зависимость, а именно "),t("strong",[e._v("Illuminate\\Console")]),e._v(". Добавляем ее в директиву require файла "),t("strong",[e._v("composer.json")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"illuminate/console": "^9.0",\n')])])]),t("p",[e._v("Также создадим в пакете некий сервисный класс в файле "),t("strong",[e._v("src/ExampleService.php")]),e._v(", который не зависит от фреймворка Laravel:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample;\n\nclass ExampleService\n{\n    public function getSomeResult()\n    {\n        return 'bar';\n    }\n}\n")])])]),t("p",[e._v("Создаем сервис-провайдер нашего пакета в файле "),t("strong",[e._v("src/Providers/LaravelExampleServiceProvider.php")]),e._v(". Это обязательный компонент каждого Laravel-пакета:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Yuraplohov\\LaravelExample\\Console\\Commands\\ExampleCommand;\n\nclass LaravelExampleServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        if ($this->app->runningInConsole()) {\n            $this->loadMigrationsFrom(__DIR__ . '/../../database/migrations');\n\n            $this->publishes([\n                __DIR__ . '/../../config/example.php' => config_path('example.php'),\n            ]);\n\n            $this->commands([\n                ExampleCommand::class,\n            ]);\n        }\n\n        $this->loadRoutesFrom(__DIR__ . '/../../routes/api.php');\n    }\n}\n")])])]),t("p",[e._v("Сервис провайдер связывает наш пакет с Laravel-приложением. В методе "),t("strong",[e._v("boot()")]),e._v(" сервис-провайдера происходит загрузка компонентов пакета в Laravel-приложение, а также указываются те ресурсы пакета, которые требуют публикации (копирования) из пакета в структуру приложения. Подробно о сервис-провайдерах в Laravel можно прочитать "),t("a",{attrs:{href:"https://laravel.com/docs/9.x/providers",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(" и "),t("a",{attrs:{href:"https://laravel.com/docs/9.x/packages#service-providers",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("В нашем примере в методе "),t("strong",[e._v("boot()")]),e._v(" загружаются миграции, консольные команды и роуты пакета. Кроме того, в методе "),t("strong",[e._v("boot()")]),e._v(" для публикации в приложение подготовлен файл конфигурации "),t("strong",[e._v("example.php")]),e._v(". После того, как разработчик установит наш пакет ему потребуется опубликовать файл "),t("strong",[e._v("example.php")]),e._v(" в структуру проекта. Для этого необходимо выполнить следующую команду, в которой по неймспейсу указан путь к сервис-провайдеру пакета:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('php artisan vendor:publish --provider="Yuraplohov\\LaravelExample\\Providers\\LaravelExampleServiceProvider\\"\n')])])]),t("p",[e._v("В результате выполнения данной команды файл "),t("strong",[e._v("example.php")]),e._v(" из пакета будет скопирован в директорию "),t("strong",[e._v("config")]),e._v(" проекта, и именно созданная копия будет использоваться пакетом в качестве файла конфигурации. Данную команду надо указать в файле "),t("strong",[e._v("README.md")]),e._v(" пакета в разделе описания процесса установки.")]),e._v(" "),t("p",[e._v("Обратите внимание на условную конструкцию "),t("code",[e._v("if ($this->app->runningInConsole())")]),e._v(" в методе "),t("strong",[e._v("boot()")]),e._v(". Данное условие выполняется, когда приложение запущено с помощью CLI (Command-Line Interface), и не выполняется когда запрос приходит с web-сервера. Таким образом, код, доступ к которому необходим только в режиме CLI, не будет выполняться при обработке приложением web-запроса. Этой оптимизацией не стоит пренебрегать, так как методы "),t("strong",[e._v("boot()")]),e._v(" всех сервис-провайдеров выполняются при каждом запросе к приложению.")]),e._v(" "),t("p",[e._v("Переходим к написанию тестов.")]),e._v(" "),t("p",[e._v("Для начала попробуем написать обычный Unit-тест. Тестировать будем сервисный класс "),t("strong",[e._v("ExampleService")]),e._v(".")]),e._v(" "),t("p",[e._v("Данный класс не зависит от фреймворка Laravel. В нем не используются ни фасады, ни модели, ни файлы конфигурации и никакие другие компоненты Laravel. То есть тестирование этого класса не требует запуска Laravel-приложения. Это значит, что его можно протестировать обычным Unit-тестом. В директории "),t("strong",[e._v("tests")]),e._v(" создадим файл "),t("strong",[e._v("ExampleServiceTest.php")]),e._v(" с тестом метода "),t("strong",[e._v("getSomeResult()")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Test;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Yuraplohov\\LaravelExample\\ExampleService;\n\nclass ExampleServiceTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function it_gets_some_result()\n    {\n        $sut = new ExampleService;\n        $this->assertEquals('bar', $sut->getSomeResult());\n    }\n}\n")])])]),t("p",[e._v("Тестовый класс мы наследуем от "),t("strong",[e._v("PHPUnit\\Framework\\TestCase")]),e._v(". Таким образом мы можем писать обычные Unit-тесты для тех классов пакета, которые не зависят от фреймворка.")]),e._v(" "),t("p",[e._v("Теперь перейдем к функциональным (Feature) тестам, которые тестируют код, зависящий от фреймворка Laravel.")]),e._v(" "),t("p",[e._v("Создаем абстрактный класс "),t("strong",[e._v("FeatureTestCase")]),e._v(", от которого в дальнейшем будем наследовать все классы функциональных тестов. При этом сам абстрактный "),t("strong",[e._v("FeatureTestCase")]),e._v(" наследуем от класса "),t("strong",[e._v("Orchestra\\Testbench\\TestCase")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Test;\n\nuse Orchestra\\Testbench\\TestCase;\n\nclass FeatureTestCase extends TestCase\n{\n\n}\n")])])]),t("p",[e._v("Прежде всего в данном классе мы переопределяем метод "),t("strong",[e._v("setUp()")]),e._v(", который выполняется перед каждым тестом.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public function setUp(): void\n{\n    parent::setUp();\n}\n")])])]),t("p",[e._v("В данном методе мы лишь вызываем его родительскую реализацию. После этого вызова можно выполнить дополнительные настройки приложения, чем мы воспользуемся позже.")]),e._v(" "),t("p",[e._v("Для того чтобы в функциональных тестах мы имели доступ ко всем компонентам разрабатываемого пакета, нам необходимо загрузить его сервис-провайдер. Для этого в "),t("strong",[e._v("Testbench")]),e._v(" предусмотрен метод "),t("strong",[e._v("getPackageProviders()")]),e._v(". Переопределяем его в нашем "),t("strong",[e._v("FeatureTestCase")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nprotected function getPackageProviders($app)\n{\n    return [\n        'Yuraplohov\\LaravelExample\\Providers\\LaravelExampleServiceProvider',\n    ];\n}\n")])])]),t("p",[e._v("В данном методе необходимо вернуть массив сервис-провайдеров, используемых пакетом. Прежде всего, это сервис-провайдеры самого разрабатываемого пакета, но кроме того, если в числе своих зависимостей пакет имеет другие Laravel-пакеты, то их сервис-провайдеры также необходимо указать в этом методе. При этом сервис-провайдеры указываются по их пространствам имен.")]),e._v(" "),t("p",[e._v("После загрузки сервис-провайдера, загружаемые в его методе boot компоненты (у нас это миграции, команды и роуты) становятся доступны в наших тестах.")]),e._v(" "),t("p",[e._v("Так как наш пакет предоставляет класс миграции, для его тестирования потребуется база данных. В качестве СУБД мы будем использовать SQLite. SQLite - это встраиваемая кроссплатформенная СУБД, реализованная в виде библиотеки на языке С, и которая присутствует в любом дистрибутиве интерпретатора PHP. Данный вариант драйвера идеально подходит для тестирования Laravel-пакетов, использующих базу данных.")]),e._v(" "),t("p",[e._v("При работе с Laravel-проектом, для того, чтобы иметь доступ к SQLite нам бы потребовалось внести соответствующие настройки в файл "),t("strong",[e._v("config/database.php")]),e._v(". Пакет "),t("strong",[e._v("Orchestra\\Testbench")]),e._v(" предоставляет метод "),t("strong",[e._v("getEnvironmentSetUp()")]),e._v(" для настройки конфигурации.")]),e._v(" "),t("p",[e._v("Переопределяем данный метод в нашем классе "),t("strong",[e._v("FeatureTestCase")]),e._v(", и настраиваем в нем доступ к SQLite.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nprotected function getEnvironmentSetUp($app)\n{\n    $app['config']->set('database.default', 'sqlite');\n    $app['config']->set('database.connections.sqlite', [\n        'driver' => 'sqlite',\n        'database' => ':memory:',\n        'prefix' => '',\n    ]);\n}\n")])])]),t("p",[e._v("В данном методе вы можете устанавливать любые значения параметров конфигурации Laravel-приложения (файлы "),t("strong",[e._v("config/app.php")]),e._v(", "),t("strong",[e._v("config/auth.php")]),e._v(" и т. д.), конфигурации разрабатываемого пакета, а также конфигураций Laravel-пакетов, указанных в качестве зависимостей разрабатываемого пакета.")]),e._v(" "),t("p",[e._v("После настройки базы данных нам необходимо выполнить миграции, предоставляемые нашим пакетом. Так как миграции уже загружены в приложение сервис-провайдером, нам необходимо лишь выполнить Artisan-команду "),t("strong",[e._v("'migrate'")]),e._v(". Создадим метод "),t("strong",[e._v("setUpDatabase()")]),e._v(" с вызовом Artisan-команды для запуска миграций:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nprotected function setUpDatabase()\n{\n    $this->artisan('migrate')->run();\n}\n")])])]),t("p",[e._v("Вызовем этот метод в нашем методе "),t("strong",[e._v("setUp()")]),e._v(" после вызова его родительской реализации.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\npublic function setUp(): void\n{\n    parent::setUp();\n\n    $this->setUpDatabase();\n}\n")])])]),t("p",[e._v("Теперь каждый наш функциональный тест будет иметь доступ к базе данных с готовой структурой таблиц. Если таблицы необходимо наполнить тестовыми данными, сделать это можно как в самих тестовых методах, так и в методе "),t("strong",[e._v("setUpDatabase()")]),e._v(" сразу после запуска миграций.")]),e._v(" "),t("p",[e._v("Для запуска миграций в пакете "),t("strong",[e._v("Testbench")]),e._v(" предусмотрен альтернативный вариант. Он подходит в том случае, если миграции пакета в сервис-провайдере не загружаются, а подготавливаются к публикации. То есть если в методе "),t("strong",[e._v("boot()")]),e._v(" сервис-провайдера к миграциям применяется не метод "),t("strong",[e._v("loadMigrationsFrom()")]),e._v(", а метод "),t("strong",[e._v("publishes()")]),e._v(". Такие миграции по Artisan-команде не выполнятся, их необходимо сначала загрузить в приложение, а затем выполнить. Для этого в пакете "),t("strong",[e._v("Testbench")]),e._v(" предусмотрен метод с уже знакомым именем "),t("strong",[e._v("loadMigrationsFrom()")]),e._v(". Этот метод не только загружает миграции в приложение, но и тут же выполняет их. Таким образом, вместо вызова Artisan-команды в методе "),t("strong",[e._v("setUpDatabase()")]),e._v(" мы могли бы использовать следующий код:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\n$this->loadMigrationsFrom(__DIR__ . '/../database/migrations/0000_00_00_000000_create_items_table.php');\n")])])]),t("p",[e._v("Если разрабатываемый вами пакет имеет в своих зависимостях Laravel-пакеты с собственными публикуемыми миграциями, запустить их можно также методом "),t("strong",[e._v("loadMigrationsFrom()")]),e._v(", указав путь к файлу миграции через директорию vendor.")]),e._v(" "),t("p",[e._v("После того как в базе данных созданы необходимые таблицы их можно наполнить тестовыми данными. Сделать это можно как в методе "),t("strong",[e._v("setUpDatabase()")]),e._v(" сразу после запуска миграций, так и непосредственно в самих тестовых методах. Воспользуемся вторым вариантом.")]),e._v(" "),t("p",[e._v("Сначала напишем тест для нашего контроллера. Создаем файл "),t("strong",[e._v("tests/ItemsTest.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Test;\n\nuse Yuraplohov\\LaravelExample\\Models\\Item;\n\nclass ItemsTest extends FeatureTestCase\n{\n    /**\n     * @test\n     */\n    public function it_gets_all_items()\n    {\n        Item::forceCreate(['name' => 'Name 1']);\n        Item::forceCreate(['name' => 'Name 2']);\n\n        $response = $this->get('items');\n\n        $response->assertStatus(200);\n\n        $response->assertExactJson([\n            'items' => [\n                ['name' => 'Name 1'],\n                ['name' => 'Name 2'],\n            ]\n        ]);\n    }\n}\n")])])]),t("p",[e._v("Класс теста мы наследуем от созданного абстрактного класса "),t("strong",[e._v("FeatureTestCase")]),e._v(". В данном тесте мы наполняем базу данных тестовыми данными; вызываем роут "),t("strong",[e._v("'items'")]),e._v(", предоставляемый пакетом и проверяем код http-ответа и содержимое тела ответа.")]),e._v(" "),t("p",[e._v("Теперь напишем тест для консольной команды, предоставляемой нашим пакетом. Создаем файл "),t("strong",[e._v("tests/CommandTest.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<?php\n\nnamespace Yuraplohov\\LaravelExample\\Test;\n\nclass CommandTest extends FeatureTestCase\n{\n    protected function getEnvironmentSetUp($app)\n    {\n        parent::getEnvironmentSetUp($app);\n\n        $app['config']->set('example.param', 200);\n    }\n\n    /**\n     * @test\n     */\n    public function it_executes_example_command()\n    {\n        $output = $this->artisan('example-command');\n\n        $output->assertExitCode(0);\n\n        $output->expectsOutput(\"Command executed with config param value 200\");\n    }\n}\n")])])]),t("p",[e._v("Так как наша консольная команда использует файл конфигурации "),t("strong",[e._v("config/example.php")]),e._v(", нам необходимо установить тестовое значение его параметров. В классе "),t("strong",[e._v("CommandTest")]),e._v(" мы переопределяем метод "),t("strong",[e._v("getEnvironmentSetUp()")]),e._v(" и после вызова его родительской реализации устанавливаем тестовое значение параметра "),t("strong",[e._v("example.param")]),e._v(". В самом тестовом методе мы вызываем консольную команду и проверяем код завершения команды, а также выведенный в консоль текст.")]),e._v(" "),t("p",[e._v("Таким образом, мы покрыли тестами функционал нашего пакета.")]),e._v(" "),t("p",[e._v("В завершение работы над кодом пакета добавим в файл "),t("strong",[e._v("composer.json")]),e._v(" следующую директиву для упрощения процесса установки пакета:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"extra": {\n  "laravel": {\n    "providers": [\n      "Yuraplohov\\\\LaravelExample\\\\Providers\\\\EloquentFilterServiceProvider"\n    ]\n  }\n}\n')])])]),t("p",[e._v("Данная директива позволяет использовать механизм автоматического обнаружения пакетов Laravel. Без этого кода при установке пакета потребуется вручную добавлять наш сервис-провайдер в массив "),t("strong",[e._v("providers")]),e._v(" в файле "),t("strong",[e._v("config/app.php")]),e._v(" проекта, а с наличием этого кода сервис-провайдер будет загружен автоматически и все объявленные в нем компоненты станут доступны в приложении.")]),e._v(" "),t("p",[e._v("Разработку пакета будем считать завершенной. После завершения разработки пакета настоятельно рекомендуется создать файл "),t("strong",[e._v("README.md")]),e._v(". В этом файле должны быть описаны шаги установки пакета, а также варианты использования функционала, предоставляемого пакетом. При составлении "),t("strong",[e._v("README.md")]),e._v(" может быть полезен данный "),t("a",{attrs:{href:"https://www.makeareadme.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ресурс"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Файлом "),t("strong",[e._v("README.md")]),e._v(" не стоит пренебрегать ни только в публичных пакетах, но и в приватных. Один раз задокументировав функционал пакета, вы облегчите жизнь себе и своим коллегам.")]),e._v(" "),t("h2",{attrs:{id:"выпуск-релиза-пакета"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#выпуск-релиза-пакета"}},[e._v("#")]),e._v(" Выпуск релиза пакета")]),e._v(" "),t("p",[e._v("Перед тем, как загрузить пакет в git-репозиторий, в корне пакета создаем файл "),t("strong",[e._v(".gitignore")]),e._v(". В него добавляем следующее содержимое:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vendor\ncomposer.lock\n.phpunit.result.cache\n")])])]),t("p",[e._v("Данные директории и файлы не будут добавлены в git-репозиторий.")]),e._v(" "),t("p",[e._v("Обратите внимание, что файл "),t("strong",[e._v("composer.lock")]),e._v(" добавляется в "),t("strong",[e._v(".gitignore")]),e._v(" только при разработке пакета. При разработке проекта файл "),t("strong",[e._v("composer.lock")]),e._v(" в "),t("strong",[e._v(".gitignore")]),e._v(" не добавляется и должен быть помещен в git-репозиторий. В процессе развертывания проекта при выполнении команды "),t("code",[e._v("composer install")]),e._v(" все зависимости проекта будут скачаны согласно версиям, указанным в "),t("strong",[e._v("composer.lock")]),e._v(". В пакете же "),t("strong",[e._v("composer.lock")]),e._v(" не нужен. При установке пакета в проект, все зависимости пакета будут скачаны согласно версиям, указанным в "),t("strong",[e._v("composer.json")]),e._v(". Даже если "),t("strong",[e._v("composer.lock")]),e._v(" добавлен в репозиторий пакета, его содержимое никак не повлияет на установку зависимостей пакета.")]),e._v(" "),t("p",[e._v("После того, как вы загрузили свой пакет в git-репозиторий и убедились, что в основной ветке (обычно это ветка "),t("strong",[e._v("master")]),e._v(" либо "),t("strong",[e._v("main")]),e._v(") находится версия кода, готовая к установке в проект, вам необходимо создать тэг. Тэг в данном случае - это версия релиза пакета, которая традиционно указывается согласно правилам семантического версионирования.")]),e._v(" "),t("p",[e._v("Объяснение правил семантического версионирования выходит за рамки данного туториала. Ознакомиться с этими правилами можно "),t("a",{attrs:{href:"https://semver.org/lang/ru/",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(". В рамках же текущего материала стоит отметить, что соблюдение правил семантического версионирования при разработке пакетов строго обязательно. Необходимо следовать им не только в публичных пакетах, но и в приватных. Это избавит вас и вашу команду от многих проблем.")]),e._v(" "),t("p",[e._v("Чтобы создать тэг и залить его в git-репозиторий, необходимо выполнить следующие команды:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git tag 1.0.0\ngit push --tags\n")])])]),t("p",[e._v("Теперь в вашем пакете создан релиз с версией 1.0.0, и ему соответствует состояние основной ветки, зафиксированное перед созданием тега.")]),e._v(" "),t("p",[e._v("Для просмотра существующих тегов (версий) пакета необходимо выполнить команду:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git tag\n")])])]),t("p",[e._v("Если вы создаете публичный пакет, его необходимо добавить в реестр "),t("a",{attrs:{href:"https://packagist.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("packagist.org"),t("OutboundLink")],1),e._v(". Сделать это несложно. Для этого необходимо создать аккаунт и указать путь к git-репозиторию через соответствующую "),t("a",{attrs:{href:"https://packagist.org/packages/submit",target:"_blank",rel:"noopener noreferrer"}},[e._v("форму"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"установка-пакета"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#установка-пакета"}},[e._v("#")]),e._v(" Установка пакета")]),e._v(" "),t("p",[e._v("Для того, чтобы установить в проект публичный, зарегистрированный на "),t("a",{attrs:{href:"http://packagist.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("packagist.org"),t("OutboundLink")],1),e._v(" пакет, достаточно выполнить команду "),t("code",[e._v("composer require")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer require yuraplohov/laravel-example\n")])])]),t("p",[e._v("Для того, чтобы установить приватный пакет сначала необходимо указать его репозиторий в файле "),t("strong",[e._v("composer.json")]),e._v(" проекта.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"repositories": [\n    {\n        "type": "vcs",\n        "url": "git@github.com:yuraplohov/laravel-example.git"\n    }\n]\n')])])]),t("p",[e._v("Далее выполняем привычную команду:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer require yuraplohov/laravel-example\n")])])]),t("p",[e._v("При этом Сomposer попросит вас ввести логин и пароль вашего аккаунта в git-репозитории. После авторизации пакет будет установлен.")]),e._v(" "),t("p",[e._v('Если в процессе разработки пакета появилась необходимость протестировать его в реальном проекте, то вам не обязательно создавать новый релиз, чтобы затем установить его. Пакет можно установить по названию ветки и идентификатору конкретного коммита в этой ветке. Для этого при установке пакета вместо тэга версии указывается название ветки с префиксом "'),t("strong",[e._v("dev-")]),e._v('", а через символ решетки (#) можно указать идентификатор коммита. Например, так можно установить версию пакета, соответствующую текущему состоянию ветки master.')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer require yuraplohov/laravel-example:dev-master\n")])])]),t("p",[e._v("А так можно установить версию пакета, соответствующую конкретному коммиту в ветке "),t("strong",[e._v("master")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("composer require yuraplohov/laravel-example:dev-master#ecb50b62a5ca4edd4f74ba94792660631277a779\n")])])]),t("p",[e._v("Подробнее о способах установки пакетов можно прочитать "),t("a",{attrs:{href:"https://getcomposer.org/doc/05-repositories.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Код демонстрационного пакета, разработанного в рамках данного туториала, можно найти "),t("a",{attrs:{href:"https://github.com/yuraplohov/laravel-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("здесь"),t("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);