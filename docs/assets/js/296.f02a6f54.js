(window.webpackJsonp=window.webpackJsonp||[]).push([[296],{568:function(e,t,r){"use strict";r.r(t);var a=r(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{pre:!0},[t("p",[e._v("https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn")]),e._v(" "),t("p",[e._v("{% raw %}")]),e._v(" "),t("h1",{pre:!0,attrs:{id:"day12-write-web-app-with-actix-web-100dayofrust"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#day12-write-web-app-with-actix-web-100dayofrust"}},[e._v("#")]),e._v(" Day12:Write web app with actix-web - 100DayOfRust")]),e._v(" "),t("p",[e._v("The reason I chose "),t("code",[e._v("actix-web")]),e._v(" over "),t("code",[e._v("rocket")]),e._v(" is 1) it doesn't rely on the nightly version 2) it support web socket")]),e._v(" "),t("h3",{pre:!0,attrs:{id:"_1-hello-world-with-actix-web"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#_1-hello-world-with-actix-web"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#1-hello-world-with-actixweb",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("1, Hello world with actix-web")]),e._v(" "),t("ol",[t("li",[e._v("Create a empty project, "),t("code",[e._v("cargo new actixtest")])]),e._v(" "),t("li",[e._v("Edit "),t("code",[e._v("Cargo.toml")]),e._v(" to add "),t("code",[e._v("actix-web")]),e._v(", at time of writing this article, the latest version is 1.0.9")])]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('[dependencies]\nactix-web = "1.0.9"\n')])])]),t("ol",{pre:!0,attrs:{start:"3"}},[t("li",[e._v("Edit "),t("code",[e._v("main.rs")]),e._v(" to code the server:")])]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('use actix_web::{web, App, HttpServer, HttpResponse, Responder};\n\nfn index() -> impl Responder {\n    HttpResponse::Ok().body("hello world!")\n}\n\nfn main() {\n    HttpServer::new(|| {\n        App::new()\n            .route("/", web::get().to(index))\n    })\n    .bind("127.0.0.1:7000")\n    .unwrap()\n    .run()\n    .unwrap();\n}\n')])])]),t("p",[e._v("The code is quite straightforward: create new app and setup routes (route url to handler), and put app inside a http server instance."),t("br"),e._v("\n4) Build and run: "),t("code",[e._v("cargo run")]),t("br"),e._v("\n5) Now visit "),t("a",{pre:!0,attrs:{href:"http://127.0.0.1:7000/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:7000/"),t("OutboundLink",{pre:!0})],1),e._v(', you can see "hello world!"')]),e._v(" "),t("h3",{pre:!0,attrs:{id:"_2-restful-url"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#_2-restful-url"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#2-restful-url",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("2, RESTful URL")]),e._v(" "),t("p",[e._v('When we want to provide RESTful API, we might align several methods to the same resource url, for example, align method get and put to "/users". Here we use '),t("code",[e._v("web::resource")]),e._v(" to rewrite the routing part code:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('use actix_web::{web, App, HttpServer, HttpResponse, Responder};\n\nfn index() -> impl Responder {\n    HttpResponse::Ok().body("hello world!")\n}\n\nfn get_users() -> impl Responder {\n    HttpResponse::Ok().body("[Alice, Bob]")\n}\n\nfn put_users() -> impl Responder {\n    // here do some logic to put a new user\n    HttpResponse::Ok().body("success")\n}\n\nfn main() {\n    HttpServer::new(|| {\n        App::new()\n            .service(\n                web::resource("/")\n                    .route(web::get().to(index))\n            )\n            .service(\n                web::resource("/users")\n                    .route(web::get().to(get_users))\n                    .route(web::put().to(put_users))\n            )\n    })\n    .bind("127.0.0.1:7000")\n    .unwrap()\n    .run()\n    .unwrap();\n}\n')])])]),t("h3",{pre:!0,attrs:{id:"_3-pass-parameter-from-url"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#_3-pass-parameter-from-url"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#3-pass-parameter-from-url",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("3, Pass parameter from URL")]),e._v(" "),t("p",[e._v('Now we want to support when user visit "/hello/{name}", let the page print "hello {name}", for example, "/hello/alice" will print out "hello alice"')]),e._v(" "),t("p",[e._v("First let's import another class "),t("code",[e._v("HttpRequest")]),e._v(" from the actix_web package, so change the first line to:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("use actix_web::{web, App, HttpServer, HttpRequest, HttpResponse, Responder};\n")])])]),t("p",[e._v("Now let's add the URL routing part:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('...\n            .service(\n                web::resource("/hello/{name}")\n                    .route(web::get().to(say_hello))\n            )\n...\n')])])]),t("p",[e._v("Last let's add the "),t("code",[e._v("say_hello")]),e._v(" handler function:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('fn say_hello(req: HttpRequest) -> impl Responder {\n    let name = req.match_info().get("name").unwrap();\n    let resp = format!("hello {}", name);\n    HttpResponse::Ok().body(resp)\n}\n')])])]),t("p",[e._v("We get the "),t("code",[e._v("name")]),e._v(" value from req's match info, then format the return string and return the response.")]),e._v(" "),t("p",[e._v("Now visit "),t("a",{pre:!0,attrs:{href:"http://127.0.0.1:7000/hello/alice",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:7000/hello/alice"),t("OutboundLink",{pre:!0})],1),e._v(', you will see "hello alice", visit '),t("a",{pre:!0,attrs:{href:"http://127.0.0.1:7000/hello/bob",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:7000/hello/bob"),t("OutboundLink",{pre:!0})],1),e._v(', you will see "hello bob"')]),e._v(" "),t("h3",{pre:!0,attrs:{id:"_4-render-page-from-template-file"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#_4-render-page-from-template-file"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#4-render-page-from-template-file",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("4, Render page from template file")]),e._v(" "),t("p",[e._v("To render html out, we are going to use a template engine called "),t("code",[e._v("tera")]),e._v(", so first let's add "),t("code",[e._v("tera")]),e._v(" to "),t("code",[e._v("Cargo.toml")])]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('[dependencies]\nactix-web = "1.0.9"\ntera = "0.11"\n')])])]),t("p",[e._v("Now let's create our template files. Let's first create a folder called "),t("code",[e._v("templates")]),e._v(", put it at the same level with file "),t("code",[e._v("Cargo.toml")]),e._v(", so like this:")]),e._v(" "),t("p",[e._v("actixtest"),t("br"),e._v("\n|- Cargo.toml"),t("br"),e._v("\n|- templates"),t("br"),e._v("\n|- src")]),e._v(" "),t("p",[e._v("Inside templates folder, create 2 files: "),t("code",[e._v("base.html")]),e._v(" and "),t("code",[e._v("index.html")]),e._v(":")]),e._v(" "),t("p",[e._v("base.html")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="utf-8">\n        <title>Actix Web</title>\n    </head>\n    <body>\n        {% block content %}\n        {% endblock content %}\n    </body>\n</html>\n')])])]),t("p",[e._v("Then in "),t("code",[e._v("index.html")]),e._v(", we will inherit the "),t("code",[e._v("base.html")]),e._v(" and overwrite the "),t("code",[e._v("content")]),e._v(" block:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('{% extends "base.html" %}\n\n{% block content %}\n<h1>hello {{name}}</h1>\n{% endblock content %}\n')])])]),t("p",[e._v("Ok, now our template files are ready, let's setup tera in our main.rs.")]),e._v(" "),t("p",[e._v("First import it:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("use tera::{Tera, Context};\n")])])]),t("p",[e._v("Then in "),t("code",[e._v("HttpServer::new")]),e._v(" closure function, before the line "),t("code",[e._v("App::new()")]),e._v(", let's setup the tera instance:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('        let tera =\n            Tera::new(\n                concat!(env!("CARGO_MANIFEST_DIR"), "/templates/**/*")\n            ).unwrap();\n')])])]),t("p",[e._v('You can see here we pass the "templates" folder path to Tera, Tera will find all files under that folder and compile them.')]),e._v(" "),t("p",[e._v("Now let's create a data struct to save all the data for the App Context")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("struct AppData {\n    tmpl: Tera\n}\n")])])]),t("p",[e._v("Around the line "),t("code",[e._v("App::new()")]),e._v(", add:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v("        App::new()\n            .data(AppData {tmpl: tera})\n")])])]),t("p",[e._v("Ok, now we have the tera instance and passed this instance to app data in the app context. Let's setup a new route url to test template rendering:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('        .service(\n                web::resource("/tmpl/{name}")\n                    .route(web::get().to(render_tmpl))\n            )\n')])])]),t("p",[e._v("Last we define this "),t("code",[e._v("render_tmpl")]),e._v(" handler:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('fn render_tmpl(data: web::Data<AppData>, req:HttpRequest) -> impl Responder {\n    let name = req.match_info().get("name").unwrap();\n    let mut ctx = Context::new();\n    ctx.insert("name", name);\n    let rendered = data.tmpl.render("index.html", &ctx).unwrap();\n    HttpResponse::Ok().body(rendered)\n}\n')])])]),t("p",[e._v("Now "),t("code",[e._v("cargo run")]),e._v(", visit "),t("a",{pre:!0,attrs:{href:"http://127.0.0.1:7000/tmpl/bob",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:7000/tmpl/bob"),t("OutboundLink",{pre:!0})],1),e._v(' you will see the html version "hello bob" inside a '),t("code",[e._v("h1")]),e._v(" tag from our "),t("code",[e._v("index.html")]),e._v(" template.")]),e._v(" "),t("h3",{pre:!0,attrs:{id:"final-code"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#final-code"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#final-code",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("Final code")]),e._v(" "),t("p",[e._v("Here is our final complete code:")]),e._v(" "),t("div",{pre:!0,attrs:{class:"language- extra-class"}},[t("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[t("code",[e._v('use actix_web::{web, App, HttpServer, HttpRequest, HttpResponse, Responder};\nuse tera::{Tera, Context};\n\nfn index() -> impl Responder {\n    HttpResponse::Ok().body("hello world!")\n}\n\nfn get_users() -> impl Responder {\n    HttpResponse::Ok().body("[Alice, Bob]")\n}\n\nfn put_users() -> impl Responder {\n    // here do some logic to put a new user\n    HttpResponse::Ok().body("success")\n}\n\nfn say_hello(req: HttpRequest) -> impl Responder {\n    let name = req.match_info().get("name").unwrap();\n    let resp = format!("hello {}", name);\n    HttpResponse::Ok().body(resp)\n}\n\nfn render_tmpl(data: web::Data<AppData>, req:HttpRequest) -> impl Responder {\n    let name = req.match_info().get("name").unwrap();\n    let mut ctx = Context::new();\n    ctx.insert("name", name);\n    let rendered = data.tmpl.render("index.html", &ctx).unwrap();\n    HttpResponse::Ok().body(rendered)\n}\n\nstruct AppData {\n    tmpl: Tera\n}\n\n\nfn main() {\n    HttpServer::new(|| {\n        let tera =\n            Tera::new(\n                concat!(env!("CARGO_MANIFEST_DIR"), "/templates/**/*")\n            ).unwrap();\n\n        App::new()\n            .data(AppData {tmpl: tera})\n            .service(\n                web::resource("/")\n                    .route(web::get().to(index))\n            )\n            .service(\n                web::resource("/users")\n                    .route(web::get().to(get_users))\n                    .route(web::put().to(put_users))\n            )\n            .service(\n                web::resource("/hello/{name}")\n                    .route(web::get().to(say_hello))\n            )\n            .service(\n                web::resource("/tmpl/{name}")\n                    .route(web::get().to(render_tmpl))\n            )\n    })\n    .bind("127.0.0.1:7000")\n    .unwrap()\n    .run()\n    .unwrap();\n}\n')])])]),t("h3",{pre:!0,attrs:{id:"reference"}},[t("a",{pre:!0,attrs:{class:"header-anchor",href:"#reference"}},[e._v("#")]),e._v(" "),t("a",{pre:!0,attrs:{href:"https://dev.to/0xbf/day11-write-web-app-with-actix-web-100dayofrust-1lkn#reference",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink",{pre:!0})],1),e._v("Reference")]),e._v(" "),t("ul",[t("li",[t("a",{pre:!0,attrs:{href:"https://actix.rs/docs/url-dispatch/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://actix.rs/docs/url-dispatch/"),t("OutboundLink",{pre:!0})],1)]),e._v(" "),t("li",[t("a",{pre:!0,attrs:{href:"https://tera.netlify.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://tera.netlify.com/"),t("OutboundLink",{pre:!0})],1)]),e._v(" "),t("li",[t("a",{pre:!0,attrs:{href:"http://siciarz.net/24-days-rust-tera/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://siciarz.net/24-days-rust-tera/"),t("OutboundLink",{pre:!0})],1)]),e._v(" "),t("li",[t("a",{pre:!0,attrs:{href:"https://github.com/actix/examples/blob/master/template_tera/src/main.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/actix/examples/blob/master/template_tera/src/main.rs"),t("OutboundLink",{pre:!0})],1)])]),e._v(" "),t("p",[e._v("{% endraw %}")])])])}),[],!1,null,null,null);t.default=n.exports}}]);