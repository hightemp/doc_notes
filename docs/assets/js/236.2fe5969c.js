(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{507:function(e,t,r){"use strict";r.r(t);var o=r(14),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("https://habr.com/ru/articles/671018/")]),e._v(" "),t("p",[e._v("В процессе работы программисту всегда полезно иметь структурированные записи для последующего к ним возвращения. Это позволяет не терять нужные знания и разгрузить память. Вашему вниманию предлагается полезная в работе запись, к которой можно всегда обращаться для организации (рефакторинга) роутов. Перевод статьи известного в кругах Ларавел "),t("a",{attrs:{href:"https://laravel-news.com/laravel-route-organization-tips",target:"_blank",rel:"noopener noreferrer"}},[e._v("PovilasKorop"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Laravel Routing - это функция, которую разработчики изучают с самого начала. Но по мере роста проектов становится все труднее управлять постоянно растущими файлами маршрутов, прокручивая их, чтобы найти нужное "),t("code",[e._v("Route::get()")]),e._v(" объявление. К счастью, существуют методы, позволяющие сделать файлы маршрутов короче и читабельнее, группируя маршруты и их настройки по-разному. Давайте посмотрим.")]),e._v(" "),t("p",[e._v("Здесь мы не будем говорить только об общем простом "),t("code",[e._v("Route::group()")]),e._v("- это начальный уровень. Давайте погрузимся немного глубже.")]),e._v(" "),t("h3",{attrs:{id:"группировка-1-route-resource-и-route-apiresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-1-route-resource-и-route-apiresource"}},[e._v("#")]),e._v(" Группировка 1. Route::resource и Route::ApiResource")]),e._v(" "),t("p",[e._v('Начнем со "слона в комнате": это, пожалуй, самая известная группировка. Если у вас есть типичный набор CRUD-действий вокруг одной модели, стоит сгруппировать их в контроллер '),t("a",{attrs:{href:"https://laravel.com/docs/9.x/controllers#resource-controllers",target:"_blank",rel:"noopener noreferrer"}},[e._v("ресурсов"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Такой контроллер может состоять "),t("a",{attrs:{href:"https://laravel.com/docs/9.x/controllers#actions-handled-by-resource-controller",target:"_blank",rel:"noopener noreferrer"}},[e._v("до 7 методов"),t("OutboundLink")],1),e._v(" (но может иметь и меньше):")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("index()")])]),e._v(" "),t("li",[t("p",[e._v("create()")])]),e._v(" "),t("li",[t("p",[e._v("store()")])]),e._v(" "),t("li",[t("p",[e._v("show()")])]),e._v(" "),t("li",[t("p",[e._v("edit()")])]),e._v(" "),t("li",[t("p",[e._v("update()")])]),e._v(" "),t("li",[t("p",[e._v("destroy()")])])]),e._v(" "),t("p",[e._v("Поэтому, если ваш набор маршрутов соответствует этим методам, вместо кода:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::get('books', [BookController::class, 'index'])->name('books.index');\nRoute::get('books/create', [BookController::class, 'create'])->name('books.create');\nRoute::post('books', [BookController::class, 'store'])->name('books.store');\nRoute::get('books/{book}', [BookController::class, 'show'])->name('books.show');\nRoute::get('books/{book}/edit', [BookController::class, 'edit'])->name('books.edit');\nRoute::put('books/{book}', [BookController::class, 'update'])->name('books.update');\nRoute::delete('books/{book}', [BookController::class, 'destroy'])->name('books.destroy');\n")])])]),t("p",[e._v(".. у вас может быть только одна строка:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::resource('books', BookController::class);\n")])])]),t("p",[e._v("Если вы работаете с проектом API, вам не нужны визуальные маршруты для для создания / редактирования (роуты edit и create), поэтому у вас может быть другой синтаксис. "),t("code",[e._v("apiResource()")]),e._v(" он будет охватывать 5 методов из 7:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::apiResource('books', BookController::class);\n")])])]),t("p",[e._v("Кроме того, я советую вам рассмотреть контроллеры ресурсов, даже если у вас есть 2-4 метода, а не полные 7. Просто потому, что он соблюдает стандартное соглашение об именах - для URL-адресов, методов и имен маршрутов.")]),e._v(" "),t("p",[e._v("Например, в этом случае вам не нужно указывать имена вручную:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::get('books/create', [BookController::class, 'create'])->name('books.create');\nRoute::post('books', [BookController::class, 'store'])->name('books.store');\n// Instead, here names \"books.create\" and \"books.store\" are assigned automatically\nRoute::resource('books', BookController::class)->only(['create', 'store']);\n")])])]),t("h3",{attrs:{id:"группировка-2-группа-внутри-группы"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-2-группа-внутри-группы"}},[e._v("#")]),e._v(" Группировка 2. Группа внутри группы")]),e._v(" "),t("p",[e._v("Конечно, все знают об общей "),t("a",{attrs:{href:"https://laravel.com/docs/9.x/routing#route-groups",target:"_blank",rel:"noopener noreferrer"}},[e._v("Route grouping"),t("OutboundLink")],1),e._v(". Но для более сложных проектов одного уровня группировки может быть недостаточно.")]),e._v(" "),t("p",[e._v("Реальный пример: вы хотите, чтобы авторизованные маршруты были сгруппированы с "),t("code",[e._v("auth")]),e._v(" middleware, но внутри вам нужно разделить больше подгрупп, таких как администратор и простой пользователь.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::middleware('auth')->group(function() {\n    Route::middleware('is_admin')->prefix('admin')->group(function() {\n    \tRoute::get(...) // administrator routes\n    });\n\n\n    Route::middleware('is_user')->prefix('user')->group(function() {\n    \tRoute::get(...) // user routes\n    });\n});\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"группировка-3-повторение-middleware-в-группу"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-3-повторение-middleware-в-группу"}},[e._v("#")]),e._v(" Группировка 3. Повторение middleware в группу")]),e._v(" "),t("p",[e._v("Что делать, если у вас довольно много middleware, некоторые из которых повторяются в нескольких группах маршрутов?")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::prefix('students')->middleware(['auth', 'check.role', 'check.user.status', 'check.invoice.status', 'locale'])->group(function () {\n    // ... student routes\n});\n\n\nRoute::prefix('managers')->middleware(['auth', 'check.role', 'check.user.status', 'locale'])->group(function () {\n    // ... manager routes\n});\n")])])]),t("p",[e._v("Как видите, существует 5 middleware, 4 из которых повторяются. Таким образом, мы можем переместить эти 4 в отдельную группу middleware в файле "),t("code",[e._v("app/Http/Kernel.php")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("protected $middlewareGroups = [\n    // This group comes from default Laravel\n    'web' => [\n        \\App\\Http\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n\n    // This group comes from default Laravel\n    'api' => [\n        // \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n        'throttle:api',\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n\n    // THIS IS OUR NEW MIDDLEWARE GROUP\n    'check_user' => [\n        'auth',\n        'check.role',\n        'check.user.status',\n        'locale'\n    ],\n];\n")])])]),t("p",[e._v("Так мы назвали нашу группу "),t("code",[e._v("check_user")]),e._v(", и теперь мы можем сократить маршруты:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::prefix('students')->middleware(['check_user', 'check.invoice.status'])->group(function () {\n    // ... student routes\n});\n\nRoute::prefix('managers')->middleware(['check_user'])->group(function () {\n    // ... manager routes\n});\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"группировка-4-контроллеры-с-одинаковыми-именами-разные-пространства-имен"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-4-контроллеры-с-одинаковыми-именами-разные-пространства-имен"}},[e._v("#")]),e._v(" Группировка 4. Контроллеры с одинаковыми именами, разные пространства имен")]),e._v(" "),t("p",[e._v("Довольно распространенная ситуация - это иметь, например, "),t("code",[e._v("HomeController")]),e._v(" для разных ролей пользователей, например "),t("code",[e._v("Admin/HomeController")]),e._v(" и "),t("code",[e._v("User/HomeController")]),e._v(" И если вы используете полный путь в своих маршрутах, это выглядит примерно так:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::prefix('admin')->middleware('is_admin')->group(function () {\n    Route::get('home', [\\App\\Http\\Controllers\\Admin\\HomeController::class, 'index']);\n});\n\n \n\nRoute::prefix('user')->middleware('is_user')->group(function () {\n    Route::get('home', [\\App\\Http\\Controllers\\User\\HomeController::class, 'index']);\n});\n")])])]),t("p",[e._v("Довольно много кода для ввода с этими полными путями, не так ли? Вот почему многие разработчики предпочитают иметь только "),t("code",[e._v("HomeController::class")]),e._v(" в списке маршрутов и добавьте что-то вроде этого сверху:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("use App\\Http\\Controllers\\Admin\\HomeController;\n")])])]),t("p",[e._v("Но проблема здесь в том, что у нас одно и то же имя класса контроллера! Так что это не сработает:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("use App\\Http\\Controllers\\Admin\\HomeController;\nuse App\\Http\\Controllers\\User\\HomeController;\n")])])]),t("p",[e._v('Какой из них будет "официальным"? Ну, один из способов - изменить имя и назначить псевдоним одному из них:')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("use App\\Http\\Controllers\\Admin\\HomeController as AdminHomeController;\nuse App\\Http\\Controllers\\User\\HomeController;\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("use App\\Http\\Controllers\\Admin\\HomeController as AdminHomeController;\nuse App\\Http\\Controllers\\User\\HomeController;\n\n \nRoute::prefix('admin')->middleware('is_admin')->group(function () {\n    Route::get('home', [AdminHomeController::class, 'index']);\n});\n\n\nRoute::prefix('user')->middleware('is_user')->group(function () {\n    Route::get('home', [HomeController::class, 'index']);\n});\n")])])]),t("p",[e._v("Но лично для меня изменение имени класса сверху довольно запутанно, мне нравится другой подход: добавить "),t("code",[e._v("namespace()")]),e._v(" для подпапок Контроллеров:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::prefix('admin')->namespace('App\\Http\\Controllers\\Admin')->middleware('is_admin')->group(function () {\n    Route::get('home', [HomeController::class, 'index']);\n    // ... other controllers from Admin namespace\n});\n\n \nRoute::prefix('user')->namespace('App\\Http\\Controllers\\User')->middleware('is_user')->group(function () {\n    Route::get('home', [HomeController::class, 'index']);\n    // ... other controllers from User namespace\n});\n")])])]),t("p",[e._v("Hidden text")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/upload_files/b0f/bba/815/b0fbba815986dd8935191608846abd84.png",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://laravel.com/docs/8.x/routing#route-group-namespaces",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink")],1)]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"группировка-5-отдельные-фаилы-маршрутов"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-5-отдельные-фаилы-маршрутов"}},[e._v("#")]),e._v(" Группировка 5. Отдельные файлы маршрутов")]),e._v(" "),t("p",[e._v("Если вы чувствуете, что ваш главный "),t("code",[e._v("routes/web.php")]),e._v(" или "),t("code",[e._v("routes/api.php")]),e._v(" становится слишком большим, вы можете взять некоторые маршруты и поместить их в отдельный файл, назвать их так, как вы хотите, например "),t("code",[e._v("routes/admin.php")]),e._v(".")]),e._v(" "),t("p",[e._v('Затем, чтобы включить этот файл, у вас есть два способа: Я называю это "Laravel way" и "PHP way".')]),e._v(" "),t("p",[e._v("Если вы хотите следовать структуре того, как Laravel структурирует свои файлы маршрутов по умолчанию, это происходит в "),t("strong",[e._v("app/Providers/RouteServiceProvider.php")]),e._v(" :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public function boot()\n{\n    $this->configureRateLimiting();\n    $this->routes(function () {\n        Route::middleware('api')\n            ->prefix('api')\n            ->group(base_path('routes/api.php'));\n\n        Route::middleware('web')\n            ->group(base_path('routes/web.php'));\n    });\n}\n\n")])])]),t("p",[e._v("Как видите, и то, и другое "),t("code",[e._v("routes/api.php")]),e._v(" и "),t("code",[e._v("routes/web.php")]),e._v(" находятся здесь, с немного другими настройками. Итак, все, что вам нужно сделать, это добавить сюда свой файл администратора:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$this->routes(function () {\n    Route::middleware('api')\n        ->prefix('api')\n        ->group(base_path('routes/api.php'));\n \n    Route::middleware('web')\n        ->group(base_path('routes/web.php'));\n\n    Route::middleware('is_admin')\n        ->group(base_path('routes/admin.php'));\n});\n")])])]),t("p",[e._v("Но если вы не хотите погружаться в "),t("a",{attrs:{href:"https://laravel-news.com/service-providers",target:"_blank",rel:"noopener noreferrer"}},[e._v("поставщиков услуг"),t("OutboundLink")],1),e._v(" , есть более короткий путь - просто включите / требуйте файл routes в другой файл, как вы сделали бы в любом PHP-файле, вне рамок Laravel.")]),e._v(" "),t("p",[e._v("На самом деле это сделал сам Тейлор Отуэлл, потребовав "),t("code",[e._v("routes/auth.php")]),e._v(" файл непосредственно в "),t("a",{attrs:{href:"https://github.com/laravel/breeze/blob/1.x/stubs/default/routes/web.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("маршруты Laravel Breeze"),t("OutboundLink")],1),e._v(" :")]),e._v(" "),t("p",[t("strong",[e._v("routes/web.php")]),e._v(" :")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::get('/', function () {\n    return view('welcome');\n});\n\nRoute::get('/dashboard', function () {\n    return view('dashboard');\n})->middleware(['auth'])->name('dashboard');\n\nrequire __DIR__.'/auth.php';\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"группировка-6-новое-в-laravel-9-route-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#группировка-6-новое-в-laravel-9-route-controller"}},[e._v("#")]),e._v(" Группировка 6. Новое в Laravel 9: Route::controller()")]),e._v(" "),t("p",[e._v("Если у вас есть несколько методов в контроллере, но они не соответствуют стандартной структуре ресурсов, вы все равно можете сгруппировать их, не повторяя имя контроллера для каждого метода.")]),e._v(" "),t("p",[e._v("Вместо:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::get('profile', [ProfileController::class, 'getProfile']);\nRoute::put('profile', [ProfileController::class, 'updateProfile']);\nRoute::delete('profile', [ProfileController::class, 'deleteProfile']);\n")])])]),t("p",[e._v("Вы можете сделать:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Route::controller(ProfileController::class)->group(function() {\n    Route::get('profile', 'getProfile');\n    Route::put('profile', 'updateProfile');\n    Route::delete('profile', 'deleteProfile');\n});\n")])])]),t("p",[e._v("Эта функция доступна в Laravel 9 и последних младших версиях Laravel 8.")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Вот и все, это методы группировки, которые, надеюсь, помогут вам организовать и поддерживать ваши маршруты, независимо от того, насколько велик ваш проект.")])])}),[],!1,null,null,null);t.default=a.exports}}]);