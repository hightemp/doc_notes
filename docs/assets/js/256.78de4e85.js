(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{529:function(e,r,t){"use strict";t.r(r);var a=t(14),n=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("div",{pre:!0},[r("p",[e._v("Для реализации UI рассмотрим пример написания веб-клиента для нашего GraphQL-сервера. И коли уж мы решили не следовать старым добрым традициям, то и в UI этого делать, конечно же, не будем и напишем его на кастомных веб-компонентах с использованием замечательной "),r("a",{pre:!0,attrs:{href:"https://www.polymer-project.org/2.0/start/",target:"_blank",rel:"noopener noreferrer"}},[e._v("библиотеки Polymer"),r("OutboundLink",{pre:!0})],1),e._v(".")]),e._v(" "),r("p",[e._v("Почему для подключения к GraphQL-серверу была выбрана "),r("a",{pre:!0,attrs:{href:"http://dev.apollodata.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("библиотека Apollo"),r("OutboundLink",{pre:!0})],1),e._v(" сказать сложно, так как аналогов для работы с GraphQL я не встречал. Изначально библиотека, как и вся ее документация заточена под React, а вся информация об интеграции с Polymer ограничивается лишь "),r("a",{pre:!0,attrs:{href:"http://dev.apollodata.com/core/polymer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ссылкой"),r("OutboundLink",{pre:!0})],1),e._v(" на компонент в разделе Integrations. Таким образом, если вы работаете с React, вам и карты в руки. Все примеры, твики и хуки именно для него.")]),e._v(" "),r("h2",{pre:!0,attrs:{id:"собственно-код"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#собственно-код"}},[e._v("#")]),e._v(" Собственно, код")]),e._v(" "),r("p",[r("a",{pre:!0,attrs:{href:"https://github.com/timur560/graphql-client-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Готовый проект клиента можно посмотреть и скачать тут"),r("OutboundLink",{pre:!0})],1),e._v(".")]),e._v(" "),r("h3",{pre:!0,attrs:{id:"шаг-1-установка-polymer"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-1-установка-polymer"}},[e._v("#")]),e._v(" Шаг 1. Установка Polymer")]),e._v(" "),r("p",[e._v('Данный шаг не несет целевой нагрузки, но, опять же, необходим для начала работы с GraphQL. Таким образом, если вы с веб-компонентами на "ты", то можете этот шаг смело пропускать.')]),e._v(" "),r("p",[r("strong",[e._v("Установка Polymer")])]),e._v(" "),r("h3",{pre:!0,attrs:{id:"шаг-2-установка-модуля-для-работы-с-graphql"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-2-установка-модуля-для-работы-с-graphql"}},[e._v("#")]),e._v(" Шаг 2. Установка модуля для работы с GraphQL")]),e._v(" "),r("p",[r("a",{pre:!0,attrs:{href:"https://github.com/aruntk/polymer-apollo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Модуль для работы с библиотекой Apollo с неплохой документацией"),r("OutboundLink",{pre:!0})],1),e._v(".")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v("$> npm install --save polymer-apollo apollo-client\n")])])]),r("h3",{pre:!0,attrs:{id:"шаг-3-установка-и-настроика-webpack"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-3-установка-и-настроика-webpack"}},[e._v("#")]),e._v(" Шаг 3. Установка и настройка webpack")]),e._v(" "),r("p",[e._v("К сожалению реальность такова, что работа с этим модулем происходит через webpack. С одной стороны это не так и плохо, ввиду того, что webpack упаковывает все наши скрипты так, чтоб всё работало быстрее и эффективнее. Но с другой стороны для полноценной работы с webpack необходимо использовать npm вместо Polymer CLI. Из-за этого в работе с Polymer могут возникать непредвиденные ситуации. Это происходит из-за того, что невозможно настроить некоторые функции мимо конфигурационного файла polymer.json. Но тут, скорее всего, проблема в кривых руках backend-щика, так что не минусуйте сильно, а лучше поделитесь способами конфигурации в комментариях.")]),e._v(" "),r("p",[r("strong",[e._v("Ничего общего с GraphQL, посему в спойлер")])]),e._v(" "),r("h3",{pre:!0,attrs:{id:"шаг-4-создание-структуры"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-4-создание-структуры"}},[e._v("#")]),e._v(" Шаг 4. Создание структуры")]),e._v(" "),r("p",[e._v("Определенной структуры на стороне frontend, как мне кажется, быть не может по той причине, что она, как правило, заточена под конкретный проект. Но два элемента нам всё же понадобятся:")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("Это директория src/models, которая будет хранить все (прямо таки все-все) GraphQL запросы и ничего кроме них, и в дальнейшем будут подключаться по мере необходимости к местам использования. И...")])]),e._v(" "),r("li",[r("p",[e._v("src/client.js — место подключения к GraphQL-серверу, которым мы сразу же и займемся.")])])]),e._v(" "),r("h4",{pre:!0,attrs:{id:"шаг-4-1-src-client-js"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-4-1-src-client-js"}},[e._v("#")]),e._v(" Шаг 4.1 src/client.js")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v("import ApolloClient, { createNetworkInterface, addTypename } from 'apollo-client';\n\n// Создаем GraphQL клиент\nexport const apolloClient = new ApolloClient({\n    networkInterface: createNetworkInterface({\n        // здесь заменяем URL на необходимый\n        uri: 'http://graphql.server.demo/api/graphql',\n        transportBatching: true,\n    })\n});\n")])])]),r("p",[e._v("… и не забываем добавить его в entry.js:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v('import "src/client.js"\n')])])]),r("h4",{pre:!0,attrs:{id:"шаг-4-2-модель-user-js"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-4-2-модель-user-js"}},[e._v("#")]),e._v(" Шаг 4.2 Модель user.js")]),e._v(" "),r("p",[e._v("К понятию модель как таковому эти файлы никакого отношения не имеют. Это лишь библиотеки строковых констант с запросами, сгруппированные по конкретному функционалу. Не принципиально привязываться именно к сущности. Возможна разбивка по конкретным страницам или функциональным элементам. Все на усмотрение разработчика.")]),e._v(" "),r("p",[e._v("src/models/user.js:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v("// чтобы мы могли писать наши запросы подключаем\nimport gql from 'graphql-tag';\n\n// несмотря на то, что это и не обязательно,\n// важно писать именованные запросы\n// (т.е. запросы с алиасом: query getUserInfo { ... })\n// в дальнейшем это нам поможет при отладке\nexport const getUserInfoQuery = gql`\n    query getUserInfo {\n        user(id: 1) {\n            firstname\n            lastname\n            createDate(format: \"d M, H:i\")\n            addresses {\n                city {\n                    name\n                }\n            }\n        }\n        addresses {\n            user {\n                firstname\n            }\n        }\n    }\n`;\n")])])]),r("h4",{pre:!0,attrs:{id:"шаг-4-3-компонент"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-4-3-компонент"}},[e._v("#")]),e._v(" Шаг 4.3 Компонент")]),e._v(" "),r("p",[e._v("Для удобства вынесем js из нашего созданного полимером компонента в отдельный файл, и внесем в него изменения чтобы он сотрудничал с библиотекой Apollo.")]),e._v(" "),r("p",[e._v("src/graphql-client-demo-app/graphql-client-demo-app.js:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v("import { PolymerApolloMixin } from 'polymer-apollo';\nimport { apolloClient } from '../client';\n// заимпортим все необходимые запросы\n// (пока что он у нас один)\nimport { getUserInfoQuery } from '../models/user';\n\nclass GraphqlClientDemoApp extends PolymerApolloMixin({ apolloClient }, Polymer.Element) {\n\n    static get is() { return 'graphql-client-demo-app'; }\n\n    static get properties() {\n        return {\n            appName: {\n                type: String,\n                value: 'GraphQL Client Demo'\n            },\n\n            // ВАЖНО!!!\n            // постарайтесь хорошо запомнить,\n            // что имя property должно в \n            // точности соответствовать названию\n            // корнегово поля запроса\n            // т.е. в данном случае наш запрос \n            // будет выглядеть следующим образом:\n            // query { user { ... } }\n            user: {\n                type: Object,\n                value: {}\n            }\n        };\n    }\n\n    // ну а здесь и будут наши запросы из моделей\n    get apollo() {\n        return {\n            getUserInfo: {\n                // наш запрос, который мы\n                // заимпортили из моделей\n                // нужно понимать, что этот запрос\n                // дернется сразу же при инициализации\n                // компонента\n                // можно ли этого избежать, \n                // я пока не разобрался\n                // разве что вызовом отдельной функции\n                query: getUserInfoQuery\n            }\n        };\n    }\n}\n\nwindow.customElements.define(GraphqlClientDemoApp.is, GraphqlClientDemoApp);\n")])])]),r("p",[e._v("… и снова не забываем добавить его в entry.js:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v('import "src/client.js"\n')])])]),r("p",[e._v("Ну и собственно осталось посмотреть на всё то, что придет с сервера.")]),e._v(" "),r("p",[e._v("src/graphql-client-demo-app/graphql-client-demo-app.html:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v('<dom-module id="graphql-client-demo-app">\n    <template>\n        <style>\n        </style>\n        \x3c!-- просто пример вывода property --\x3e\n        <h1>[[appName]]</h1>\n\n        \x3c!-- пытаемся подтянуть данные из того\n        что должно было вернуться с сервера --\x3e\n        <p><b>Name:</b> [[user.firstname]] [[user.lastname]]!</p>\n        <p><b>Created date:</b> [[user.createDate]]</p>\n        <h2>Addresses:</h2>\n        <table>\n            \x3c!-- перебор массива --\x3e\n            <template is="dom-repeat" items="{{user.addresses}}">\n                \x3c!-- к несчастью в этом примере\n                только одно поле, но ведь мы понимаем,\n                что их может быть больше --\x3e\n                <tr>\n                    <td>{{index}}</td>\n                    <td>{{item.city.name}}</td>\n                </tr>\n            </template>\n        </table>\n    </template>\n</dom-module>\n')])])]),r("p",[e._v("К слову, во время разработки шаблона мое окно среды выглядит примерно следующим образом:")]),e._v(" "),r("p",[r("img",{pre:!0,attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/post_images/c01/a21/252/c01a212523b2ac3d43a7f5195efa88ce.png",alt:"image"}})]),e._v(" "),r("p",[e._v("В левой части экрана я полностью вижу структуру запроса (которая идентична структуре ответа), и описываю ее в шаблоне необходимым мне образом. Удобно.")]),e._v(" "),r("h3",{pre:!0,attrs:{id:"шаг-5-сборка-тестирование-и-отладка"}},[r("a",{pre:!0,attrs:{class:"header-anchor",href:"#шаг-5-сборка-тестирование-и-отладка"}},[e._v("#")]),e._v(" Шаг 5. Сборка, тестирование и отладка")]),e._v(" "),r("p",[e._v("Для начала не забываем собрать webpack:")]),e._v(" "),r("div",{pre:!0,attrs:{class:"language- extra-class"}},[r("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[r("code",[e._v("$> webpack\n")])])]),r("p",[e._v("Во время разработки вам, к сожалению, придется это делать после каждого обновления js-скриптов. Этого можно избежать, если следовать туториалу, написанным самим разработчиком polymer-apollo, и использовать npm start, но повторюсь, что если работать мимо polymer CLI, у вас могут возникнуть проблемы с некоторыми компонентами Polymer и с деплоем (конкретно я столкнулся с проблемой некорректной работы iron-pages и lazy-import, которую здесь описывать не буду т.к., к сожалению, пока еще не до конца решил).")]),e._v(" "),r("p",[e._v("Открываем Chrome, переходим на адрес нашего уже поднятого клиента (адрес можно увидеть сразу после выполнения "),r("code",[e._v("$ polymer serve")]),e._v(", как правило это "),r("a",{pre:!0,attrs:{href:"http://127.0.0.1:8081/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://127.0.0.1:8081/"),r("OutboundLink",{pre:!0})],1),e._v(") и радуемся результатам, вернувшимся с нашего GraphQL сервера:")]),e._v(" "),r("p",[r("img",{pre:!0,attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/post_images/819/d1d/4c0/819d1d4c0ebcf07b04ab9714dec3fbe7.png",alt:"image"}})]),e._v(" "),r("p",[e._v("И снова я не могу нарадоваться тулзам для отладки. Ставим расширение для Chrome "),r("a",{pre:!0,attrs:{href:"https://dev-blog.apollodata.com/apollo-client-developer-tools-ff89181ebcf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apollo Client Developer Tools"),r("OutboundLink",{pre:!0})],1),e._v(", открываем консоль, переходим на вкладку Apollo, откидываемся на спинку кресла и начинаем получать удовольствие:")]),e._v(" "),r("p",[r("img",{pre:!0,attrs:{src:"https://habrastorage.org/r/w1560/getpro/habr/post_images/793/83a/bf0/79383abf08080895adc3542f2b0bf3a5.png",alt:"image"}})]),e._v(" "),r("p",[e._v("Помните, мы задавали алиас нашему запросу? Так вот в этом списке будут отображаться запросы именно по этим алиасам (иначе просто номер). Запросы и мутации отображаются отдельными списками. Стоит отметить, что эта тулза не является полной заменой вкладке Network, т.к. она показывает только запросы, а вот ответы — нет. Правда любой запрос одним нажатием на кнопочку возле алиаса запроса (или мутации) можно тут же загрузить во встроенный в это же расширение GraphiQL.")]),e._v(" "),r("p",[e._v("В целом такой себе лаконичный инспектор, так что коли вы захотите все же посмотреть по хедерам и статусам, милости просим на старую добрую вкладку Network.")]),e._v(" "),r("p",[e._v("В следующей(их) части(ях) мы наконец рассмотрим "),r("a",{pre:!0,attrs:{href:"https://habrahabr.ru/post/337046/",target:"_blank",rel:"noopener noreferrer"}},[e._v("мутации"),r("OutboundLink",{pre:!0})],1),e._v(", рассмотрим один из способов серверной валидации, и конечно же сделаем выводы.")])])])}),[],!1,null,null,null);r.default=n.exports}}]);