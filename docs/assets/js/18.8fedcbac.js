(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{289:function(e,n,t){"use strict";t.r(n);var r=t(14),o=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("https://github.com/NVIDIA/TensorRT/blob/main/demo/HuggingFace/notebooks/t5.ipynb")]),e._v(" "),n("h1",{attrs:{id:"accelerating-huggingface-t5-inference-with-tensorrt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#accelerating-huggingface-t5-inference-with-tensorrt"}},[e._v("#")]),e._v(" Accelerating HuggingFace T5 Inference with TensorRT")]),e._v(" "),n("p",[e._v("T5 is an encoder-decoder model that converts all NLP problems into a text-to-text format. More specifically, it does so by encoding different tasks as text directives in the input stream. This enables a single model to be trained supervised on a wide variety of NLP tasks such as translation, classification, Q&A and summarization.")]),e._v(" "),n("p",[e._v("This notebook shows 3 easy steps to convert a  "),n("a",{attrs:{href:"https://huggingface.co/transformers/model_doc/t5.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HuggingFace PyTorch T5 model"),n("OutboundLink")],1),e._v("  to a TensorRT engine for high-performance inference.")]),e._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/NVIDIA/TensorRT/blob/59898c103f07e100d3c1108c038d767f5485e0b9/demo/HuggingFace/notebooks/#1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Download HuggingFace T5 model"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/NVIDIA/TensorRT/blob/59898c103f07e100d3c1108c038d767f5485e0b9/demo/HuggingFace/notebooks/#2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Convert to ONNX format"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/NVIDIA/TensorRT/blob/59898c103f07e100d3c1108c038d767f5485e0b9/demo/HuggingFace/notebooks/#3",target:"_blank",rel:"noopener noreferrer"}},[e._v("Convert to TensorRT engine"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"prerequisite"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prerequisite"}},[e._v("#")]),e._v(" Prerequisite")]),e._v(" "),n("p",[e._v("Follow the instruction at  https://github.com/NVIDIA/TensorRT  to build the TensorRT-OSS docker container required to run this notebook.")]),e._v(" "),n("p",[e._v("Next, we install some extra dependencies.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("%%capture\n!pip3 install -r ../requirements.txt")]),e._v(" "),n("p",[n("strong",[e._v("Note:")]),e._v("  After this step, you should restart the Jupyter kernel for the change to take effect.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v('import os\nimport sys\nROOT_DIR = os.path.abspath("../")\nsys.path.append(ROOT_DIR)')]),e._v(" "),n("p",[e._v("import torch\nimport tensorrt as trt")]),e._v(" "),n("p",[e._v("# huggingface\nfrom transformers import (\nT5ForConditionalGeneration,\nT5Tokenizer,\nT5Config,\n)")]),e._v(" "),n("h2",{attrs:{id:"_1-download-huggingface-t5-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-download-huggingface-t5-model"}},[e._v("#")]),e._v(" 1. Download HuggingFace T5 model")]),e._v(" "),n("p",[e._v("First, we download the original HuggingFace PyTorch T5 model from HuggingFace model hubs, together with its associated tokernizer.")]),e._v(" "),n("p",[e._v("The T5 variants that are suported by TensorRT 8 are: t5-small (60M), t5-base (220M), t5-large (770M), t5-3b(3B), t5-11b(11B)")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("T5_VARIANT = 't5-small' # choices: t5-small | t5-base | t5-large | t5-3b | t5-11b")]),e._v(" "),n("p",[e._v("t5_model = T5ForConditionalGeneration.from_pretrained(T5_VARIANT)\ntokenizer = T5Tokenizer.from_pretrained(T5_VARIANT)\nconfig = T5Config.from_pretrained(T5_VARIANT, use_cache = False)")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# save model locally\npytorch_model_dir = './models/{}/pytorch'.format(T5_VARIANT)\n!mkdir  -p  $pytorch_model_dir")]),e._v(" "),n("p",[e._v('t5_model.save_pretrained(pytorch_model_dir)\nprint("Pytorch Model saved to {}".format(pytorch_model_dir))')]),e._v(" "),n("h3",{attrs:{id:"inference-with-pytorch-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inference-with-pytorch-model"}},[e._v("#")]),e._v(" Inference with PyTorch model")]),e._v(" "),n("p",[e._v("Next, we will carry out inference with the PyTorch model.")]),e._v(" "),n("h4",{attrs:{id:"single-example-inference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#single-example-inference"}},[e._v("#")]),e._v(" Single example inference")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v('inputs = tokenizer("translate English to German: That is good.", return_tensors="pt").to(\'cuda:0\')\nnum_beams = 1')]),e._v(" "),n("p",[e._v("# inference on a single example\nt5_model.to('cuda:0').eval()\nwith torch.no_grad():\noutputs = t5_model(**inputs, labels=inputs[\"input_ids\"])")]),e._v(" "),n("p",[e._v("logits = outputs.logits")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# Generate sequence for an input\noutputs = t5_model.to('cuda:0').generate(inputs.input_ids.to('cuda:0'), num_beams=num_beams)\nprint(tokenizer.decode(outputs[0], skip_special_tokens=True))")]),e._v(" "),n("h4",{attrs:{id:"model-inference-benchmark-encoder-and-decoder-stacks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#model-inference-benchmark-encoder-and-decoder-stacks"}},[e._v("#")]),e._v(" Model inference benchmark: encoder and decoder stacks")]),e._v(" "),n("p",[e._v("For benchmarking purposes, we will employ a helper functions  "),n("code",[e._v("encoder_inference")]),e._v("  and  "),n("code",[e._v("decoder_inference")]),e._v("  which execute the inference repeatedly for the T5 encoder and decoder stacks separately, and measure end to end execution time. Let's take note of this execution time for comparison with TensorRT.")]),e._v(" "),n("p",[n("code",[e._v("TimingProfile")]),e._v("  is a named tuple that specifies the number of experiments and number of times to call the function per iteration (and number of warm-up calls although it is not used here).")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("from T5.measurements import decoder_inference, encoder_inference, full_inference\nfrom T5.export import T5EncoderTorchFile, T5DecoderTorchFile, T5EncoderTRTEngine, T5DecoderTRTEngine\nfrom NNDF.networks import TimingProfile\nfrom NNDF.torch_utils import expand_inputs_for_beam_search")]),e._v(" "),n("p",[e._v("t5_torch_encoder = T5EncoderTorchFile.TorchModule(t5_model.encoder)\nt5_torch_decoder = T5DecoderTorchFile.TorchModule(\nt5_model.decoder, t5_model.lm_head, t5_model.config\n)")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("input_ids = inputs.input_ids")]),e._v(" "),n("p",[e._v("encoder_last_hidden_state, encoder_e2e_median_time = encoder_inference(\nt5_torch_encoder, input_ids, TimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50)\n)\nencoder_e2e_median_time")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("_, decoder_e2e_median_time = decoder_inference(\nt5_torch_decoder, input_ids, encoder_last_hidden_state, TimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50)\n)\ndecoder_e2e_median_time")]),e._v(" "),n("h4",{attrs:{id:"full-model-inference-and-benchmark"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#full-model-inference-and-benchmark"}},[e._v("#")]),e._v(" Full model inference and benchmark")]),e._v(" "),n("p",[e._v("Next, we will try the T5 model for the task of translation from English to German.")]),e._v(" "),n("p",[e._v("For benchmarking purposes, we will employ a helper function  "),n("code",[e._v("full_inference")]),e._v("  which executes the inference repeatedly and measures end to end execution time. Let's take note of this execution time for comparison with TensorRT.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("from T5.T5ModelConfig import T5ModelTRTConfig, T5Metadata\ndecoder_output, full_e2e_median_runtime = full_inference(\nt5_torch_encoder,\nt5_torch_decoder,\ninput_ids,\ntokenizer,\nTimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50),\nnum_beams=num_beams,\nmax_length=T5ModelTRTConfig.MAX_SEQUENCE_LENGTH[T5_VARIANT],\n)\nfull_e2e_median_runtime")]),e._v(" "),n("p",[e._v("Let us decode the model's output back into text.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# De-tokenize output to raw text\nprint(tokenizer.decode(decoder_output[0], skip_special_tokens=True))")]),e._v(" "),n("h2",{attrs:{id:"_2-convert-to-onnx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-convert-to-onnx"}},[e._v("#")]),e._v(" 2. Convert to ONNX")]),e._v(" "),n("p",[e._v("Prior to converting the model to a TensorRT engine, we will first convert the PyTorch model to an intermediate universal format.")]),e._v(" "),n("p",[e._v("ONNX is an open format for machine learning and deep learning models. It allows you to convert deep learning and machine learning models from different frameworks such as TensorFlow, PyTorch, MATLAB, Caffe, and Keras to a single format.")]),e._v(" "),n("p",[e._v("The steps to convert a PyTorch model to TensorRT are as follows:")]),e._v(" "),n("ul",[n("li",[e._v("Convert the pretrained image segmentation PyTorch model into ONNX.")]),e._v(" "),n("li",[e._v("Import the ONNX model into TensorRT.")]),e._v(" "),n("li",[e._v("Apply optimizations and generate an engine.")]),e._v(" "),n("li",[e._v("Perform inference on the GPU.")])]),e._v(" "),n("p",[e._v("For the T5 model, we will convert the encoder and decoder seperately.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# helpers\nfrom NNDF.networks import NetworkMetadata, Precision")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("onnx_model_path = './models/{}/ONNX'.format(T5_VARIANT)\n!mkdir  -p  $onnx_model_path")]),e._v(" "),n("p",[e._v("metadata=NetworkMetadata(variant=T5_VARIANT, precision=Precision(fp16=True), other=T5Metadata(kv_cache=False))")]),e._v(" "),n("p",[e._v('encoder_onnx_model_fpath = T5_VARIANT + "-encoder.onnx"\ndecoder_onnx_model_fpath = T5_VARIANT + "-decoder-with-lm-head.onnx"')]),e._v(" "),n("p",[e._v("t5_encoder = T5EncoderTorchFile(t5_model.to('cpu'), metadata)\nt5_decoder = T5DecoderTorchFile(t5_model.to('cpu'), metadata)")]),e._v(" "),n("p",[e._v("onnx_t5_encoder = t5_encoder.as_onnx_model(\nos.path.join(onnx_model_path, encoder_onnx_model_fpath), force_overwrite=False\n)\nonnx_t5_decoder = t5_decoder.as_onnx_model(\nos.path.join(onnx_model_path, decoder_onnx_model_fpath), force_overwrite=False\n)")]),e._v(" "),n("h2",{attrs:{id:"_3-convert-to-tensorrt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-convert-to-tensorrt"}},[e._v("#")]),e._v(" 3. Convert to TensorRT")]),e._v(" "),n("p",[e._v("Now we are ready to parse the ONNX encoder and decoder models and convert them to optimized TensorRT engines.")]),e._v(" "),n("p",[e._v("Since the models contains dynamic input shapes, we can specify a valid input range with a TensorRT optimization profile.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("from T5.export import T5DecoderONNXFile, T5EncoderONNXFile\nfrom polygraphy.backend.trt import Profile\nfrom tensorrt import PreviewFeature")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v('tensorrt_model_path = \'./models/{}/tensorrt\'.format(T5_VARIANT)\n!mkdir  -p  tensorrt_model_path\n# Decoder optimization profiles\nbatch_size = 1\nmax_sequence_length = T5ModelTRTConfig.MAX_SEQUENCE_LENGTH[T5_VARIANT]\ndecoder_profile = Profile()\ndecoder_profile.add(\n"input_ids",\nmin=(batch_size * num_beams, 1),\nopt=(batch_size * num_beams, max_sequence_length // 2),\nmax=(batch_size * num_beams, max_sequence_length),\n)\ndecoder_profile.add(\n"encoder_hidden_states",\nmin=(batch_size * num_beams, 1, max_sequence_length),\nopt=(batch_size * num_beams, max_sequence_length // 2, max_sequence_length),\nmax=(batch_size * num_beams, max_sequence_length, max_sequence_length),\n)')]),e._v(" "),n("p",[e._v('# Encoder optimization profiles\nencoder_profile = Profile()\nencoder_profile.add(\n"input_ids",\nmin=(batch_size, 1),\nopt=(batch_size, max_sequence_length // 2),\nmax=(batch_size, max_sequence_length),\n)')]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v('preview_dynamic_shapes = True\nengine_tag = f"bs{batch_size}"')]),e._v(" "),n("p",[e._v('if num_beams > 1:\nengine_tag += "-beam{}".format(num_beams)')]),e._v(" "),n("p",[e._v('preview_features = []\nif preview_dynamic_shapes:\npreview_features = [PreviewFeature.FASTER_DYNAMIC_SHAPES_0805]\nengine_tag += "-previewFasterDynamicShapes"')]),e._v(" "),n("p",[e._v('encoder_engine_name = os.path.join(tensorrt_model_path, encoder_onnx_model_fpath) + f"-{engine_tag}.engine".replace(f"-beam{num_beams}", "") # encoder engine not affected by beam search\ndecoder_engine_name = os.path.join(tensorrt_model_path, decoder_onnx_model_fpath) + f"-{engine_tag}.engine"')]),e._v(" "),n("p",[e._v("if not os.path.exists(encoder_engine_name):\nt5_trt_encoder_engine = T5EncoderONNXFile(os.path.join(onnx_model_path, encoder_onnx_model_fpath), metadata).as_trt_engine(\nencoder_engine_name,\nprofiles=[encoder_profile],\npreview_features=preview_features)\nelse:\nt5_trt_encoder_engine = T5EncoderTRTEngine(encoder_engine_name, metadata)")]),e._v(" "),n("p",[e._v("if not os.path.exists(decoder_engine_name):\nt5_trt_decoder_engine = T5DecoderONNXFile(os.path.join(onnx_model_path, decoder_onnx_model_fpath), metadata).as_trt_engine(\ndecoder_engine_name,\nprofiles=[decoder_profile],\npreview_features=preview_features)\nelse:\nt5_trt_decoder_engine = T5DecoderTRTEngine(decoder_engine_name, metadata)")]),e._v(" "),n("h3",{attrs:{id:"inference-with-tensorrt-engine"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inference-with-tensorrt-engine"}},[e._v("#")]),e._v(" Inference with TensorRT engine")]),e._v(" "),n("p",[e._v("Great, if you have reached this stage, it means we now have an optimized TensorRT engine for the T5 model, ready for us to carry out inference.")]),e._v(" "),n("h4",{attrs:{id:"single-example-inference-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#single-example-inference-2"}},[e._v("#")]),e._v(" Single example inference")]),e._v(" "),n("p",[e._v("The T5 model with TensorRT backend can now be employed in place of the original HuggingFace T5 model.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# Initialize TensorRT engines\nfrom T5.trt import T5TRTEncoder, T5TRTDecoder")]),e._v(" "),n("p",[e._v("t5_trt_encoder = T5TRTEncoder(\nt5_trt_encoder_engine, metadata, config\n)\nt5_trt_decoder = T5TRTDecoder(\nt5_trt_decoder_engine, metadata, config, num_beams=num_beams\n)")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# Inference on a single sample\nencoder_last_hidden_state = t5_trt_encoder(input_ids=input_ids)\noutputs = t5_trt_decoder(\nexpand_inputs_for_beam_search(input_ids, num_beams) if num_beams > 1 else input_ids,\nexpand_inputs_for_beam_search(encoder_last_hidden_state, num_beams) if num_beams > 1 else encoder_last_hidden_state)")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("# Generate sequence for an input\nmax_length = 64")]),e._v(" "),n("p",[e._v('decoder_input_ids = torch.full(\n(1, 1), tokenizer.convert_tokens_to_ids(tokenizer.pad_token), dtype=torch.int32\n).to("cuda:0")')]),e._v(" "),n("p",[e._v("encoder_last_hidden_state = t5_trt_encoder(input_ids=input_ids)")]),e._v(" "),n("h4",{attrs:{id:"trt-engine-inference-benchmark-encoder-and-decoder-stacks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trt-engine-inference-benchmark-encoder-and-decoder-stacks"}},[e._v("#")]),e._v(" TRT engine inference benchmark: encoder and decoder stacks")]),e._v(" "),n("p",[e._v("First, we will bechmark the encoder and decoder stacks as before.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("encoder_last_hidden_state, encoder_e2e_median_time = encoder_inference(\nt5_trt_encoder, input_ids, TimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50)\n)\nencoder_e2e_median_time")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("_, decoder_e2e_median_time = decoder_inference(\nt5_trt_decoder, expand_inputs_for_beam_search(input_ids, num_beams) if num_beams > 1 else input_ids,\nexpand_inputs_for_beam_search(encoder_last_hidden_state, num_beams) if num_beams > 1 else encoder_last_hidden_state, TimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50)\n)\ndecoder_e2e_median_time")]),e._v(" "),n("h3",{attrs:{id:"full-model-inference-benchmark"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#full-model-inference-benchmark"}},[e._v("#")]),e._v(" Full model inference benchmark")]),e._v(" "),n("p",[e._v("Next, we will try the full TensorRT T5 engine for the task of translation. As before, note the time difference.")]),e._v(" "),n("p",[e._v("In [ ]:")]),e._v(" "),n("p",[e._v("decoder_output, full_e2e_median_runtime = full_inference(\nt5_trt_encoder,\nt5_trt_decoder,\ninput_ids,\ntokenizer,\nTimingProfile(iterations=10, number=1, warmup=1, duration=0, percentile=50),\nmax_length=T5ModelTRTConfig.MAX_SEQUENCE_LENGTH[metadata.variant],\nnum_beams=num_beams,\nuse_cuda=True,\n)")]),e._v(" "),n("p",[e._v("print(tokenizer.decode(decoder_output[0], skip_special_tokens=True))\nfull_e2e_median_runtime")]),e._v(" "),n("p",[e._v("You can now compare the output of the original PyTorch model and the TensorRT engine. Notice the speed difference. On an NVIDIA V100 32GB GPU, this results in upto ~10x performance improvement (from 0.0802s to 0.0082s for the T5-small variant).")]),e._v(" "),n("h2",{attrs:{id:"conclusion-and-where-to-next"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-and-where-to-next"}},[e._v("#")]),e._v(" Conclusion and where-to next?")]),e._v(" "),n("p",[e._v("This notebook has walked you through the process of converting a HuggingFace PyTorch T5 model to an optimized TensorRT engine for inference in 3 easy steps. The TensorRT inference engine can be conviniently used as a drop-in replacement for the orginial HuggingFace T5 model while providing significant speed up.")]),e._v(" "),n("p",[e._v("If you are interested in further details of the conversion process, check out  "),n("a",{attrs:{href:"https://github.com/NVIDIA/TensorRT/blob/59898c103f07e100d3c1108c038d767f5485e0b9/demo/HuggingFace/T5/trt.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("T5/trt.py"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=o.exports}}]);