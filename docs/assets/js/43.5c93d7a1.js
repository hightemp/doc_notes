(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{314:function(v,_,t){"use strict";t.r(_);var l=t(14),i=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("Hexagonal architecture, также известная как Ports and Adapters architecture, это архитектурный паттерн, который позволяет создавать приложения, которые легко тестируются, масштабируются и поддерживаются. Он состоит из следующих основных элементов:")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Ядро (Core) - центральная часть системы, которая содержит бизнес-логику и не зависит от других частей системы. Она определяет API для взаимодействия со всеми другими компонентами системы.")])]),v._v(" "),_("li",[_("p",[v._v("Порты (Ports) - интерфейсы, которые определяют способ взаимодействия системы с внешним миром. К ним относятся интерфейсы для работы с базой данных, файловой системой, сетью и т.д.")])]),v._v(" "),_("li",[_("p",[v._v("Адаптеры (Adapters) - компоненты, которые реализуют порты и обеспечивают связь между ядром и внешним миром. Они преобразуют данные из формата, понятного системе, в формат, понятный внешним системам.")])]),v._v(" "),_("li",[_("p",[v._v("Входные порты (Input Ports) - интерфейсы, которые определяют способы взаимодействия системы с внешним миром. Это могут быть REST API, интерфейсы командной строки или графические интерфейсы пользователя.")])]),v._v(" "),_("li",[_("p",[v._v("Выходные порты (Output Ports) - интерфейсы, которые определяют способы взаимодействия системы с базой данных, файловой системой, сетью и т.д. Они обеспечивают связь между системой и внешним миром.")])]),v._v(" "),_("li",[_("p",[v._v("Конфигурация (Configuration) - компонент, который определяет конфигурацию системы и ее зависимости. Он может использоваться для настройки соединений с базой данных, выбора реализации адаптеров и т.д.")])])]),v._v(" "),_("p",[v._v("Преимущества Hexagonal architecture:")]),v._v(" "),_("ul",[_("li",[v._v("Упрощение тестирования и поддержки системы.")]),v._v(" "),_("li",[v._v("Большая гибкость и возможность масштабирования системы.")]),v._v(" "),_("li",[v._v("Улучшение безопасности за счет отделения бизнес-логики от внешнего мира.")]),v._v(" "),_("li",[v._v("Упрощение внесения изменений и добавления новых функций.")])]),v._v(" "),_("p",[v._v("Рассмотрим пример использования Hexagonal architecture в веб-приложении. В данном случае мы можем выделить следующие компоненты:")]),v._v(" "),_("ol",[_("li",[v._v("Порт ввода: интерфейс взаимодействия с пользователем (например, веб-сервер).")]),v._v(" "),_("li",[v._v("Порт вывода: интерфейс для обмена данными с базой данных или другой системой.")]),v._v(" "),_("li",[v._v("Бизнес-логика: компонент, отвечающий за обработку запросов, валидацию данных и выполнение бизнес-логики приложения.")]),v._v(" "),_("li",[v._v("Адаптеры: компоненты, связывающие порты ввода и вывода с бизнес-логикой.")])]),v._v(" "),_("p",[v._v("В рамках Hexagonal architecture мы можем описать работу приложения следующим образом:")]),v._v(" "),_("ol",[_("li",[v._v("Пользователь отправляет запрос через веб-интерфейс (порт ввода).")]),v._v(" "),_("li",[v._v("Адаптер веб-сервера преобразует запрос в формат, понятный бизнес-логике, и передает его на обработку.")]),v._v(" "),_("li",[v._v("Бизнес-логика проверяет запрос на соответствие требованиям и выполняет необходимые действия (например, сохранение данных в базе данных через порт вывода).")]),v._v(" "),_("li",[v._v("Бизнес-логика возвращает ответ через порт ввода.")]),v._v(" "),_("li",[v._v("Адаптер веб-сервера преобразует ответ в формат, понятный пользователю, и отправляет его на веб-интерфейс.")])]),v._v(" "),_("p",[v._v("Таким образом, Hexagonal architecture позволяет создать гибкое приложение, которое может легко масштабироваться и приспосабливаться к изменениям.")]),v._v(" "),_("p",[v._v("Written by Chatsonic")])])}),[],!1,null,null,null);_.default=i.exports}}]);