(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{530:function(e,r,t){"use strict";t.r(r);var v=t(14),_=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("https://backendinterview.ru/architecture/ddd")]),e._v(" "),r("p",[r("strong",[e._v("Domain-driven design")]),e._v(" (Предметно-ориентированное проектирование, реже проблемно-ориентированное) — это набор принципов и схем, направленных на создание оптимальных систем объектов. Сводится к созданию программных абстракций, которые называются моделями "),r("a",{attrs:{href:"https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%B4%D0%BC%D0%B5%D1%82%D0%BD%D0%B0%D1%8F_%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C",target:"_blank",rel:"noopener noreferrer"}},[e._v("предметных областей"),r("OutboundLink")],1),e._v(". В эти модели входит "),r("a",{attrs:{href:"https://ru.wikipedia.org/wiki/%D0%91%D0%B8%D0%B7%D0%BD%D0%B5%D1%81-%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D0%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("бизнес-логика"),r("OutboundLink")],1),e._v(", устанавливающая связь между реальными условиями области применения продукта и кодом.")]),e._v(" "),r("p",[e._v("Предметно-ориентированное проектирование не является какой-либо конкретной технологией или методологией. DDD — это набор правил, которые позволяют принимать правильные проектные решения. Данный подход позволяет значительно ускорить процесс проектирования программного обеспечения в незнакомой предметной области.")]),e._v(" "),r("h2",{attrs:{id:"стратегическое-проектирование"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#стратегическое-проектирование"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5",target:"_blank",rel:"noopener noreferrer"}},[e._v("Стратегическое проектирование"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Проектирование на высоком уровне абстракции, без технических нюансов, осуществляемое всей командой - как менеджерами/заказчиками, так и техническими специалистами.")]),e._v(" "),r("p",[e._v("Основной целью применения DDD является получение высококачественной модели программного обеспечения, которая будет максимально точно отражать поставленные бизнес-цели. Для реализации этого требуется объединение усилий как разработчиков, так и экспертов в предметной области. Создание дружной и сплоченной команды позволяет получить большое количество преимуществ для бизнеса. Обмен знаниями между членами команды снижает шансы появления «тайного знания» о модели, достигается консенсус между экспертами предметной области в отношении различных понятий и терминологии, разрабатывается более точное определение и описание самого бизнеса.")]),e._v(" "),r("h3",{attrs:{id:"ubiquitous-language-единыи-язык"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ubiquitous-language-единыи-язык"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#ubiquitous-language-%D0%95%D0%B4%D0%B8%D0%BD%D1%8B%D0%B9-%D1%8F%D0%B7%D1%8B%D0%BA",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubiquitous Language (Единый язык)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Для того чтобы уравнять разработчиков и экспертов предметной области, чтобы было гораздо проще обмениваться полезными знаниями о предметной области, подход DDD предлагает применять общий набор терминов, понятий и фраз, который будет использоваться в общении между членами команды, и который позже отразится в исходном коде результирующей программы.")]),e._v(" "),r("p",[e._v("Этот коллективный язык терминов называется - единый язык. (Ubiquitous Language). Это один из основных и самых важных шаблонов предметного-ориентированного проектирования. Это не бизнес жаргон, навязанный разработчикам, а настоящий язык, созданный целостной командой – экспертами в предметной области, разработчиками, бизнес-аналитиками и всеми, кто вовлечен в создание системы. Роль в команде не столь существенна, поскольку каждый член команды использует для описания проекта единый язык.")]),e._v(" "),r("h3",{attrs:{id:"bounded-context-ограниченныи-контекст"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bounded-context-ограниченныи-контекст"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#bounded-context-%D0%9E%D0%B3%D1%80%D0%B0%D0%BD%D0%B8%D1%87%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bounded Context (Ограниченный контекст)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Очень важно понимать, что в рамках предметной области смысл определенного термина или фразы может сильно отличаться. Существует некая граница, в пределах которой понятия единого языка имеют вполне конкретное контекстное значение - ограниченный контекст (Bounded context). Это второе по значимости свойство DDD после единого языка. Оба эти понятия взаимосвязаны и не могут существовать друг без друга.")]),e._v(" "),r("p",[e._v("Итак, ограниченный контекст – это явная граница, внутри которой существует модель предметной области, которая отображает единый язык в модель программного обеспечения.")]),e._v(" "),r("ul",[r("li",[e._v("В каждом ограниченном контексте существует только один "),r("code",[e._v("единый язык")]),e._v(".")]),e._v(" "),r("li",[e._v("Ограниченные контексты являются относительно небольшими, меньше чем может показаться на первый взгляд. "),r("code",[e._v("ограниченный контекст")]),e._v(" достаточно велик только для единого языка изолированной предметной области, но не больше.")]),e._v(" "),r("li",[e._v("Единый значит «вездесущий» или «повсеместный», т. е. язык, на котором говорят члены команды и на котором выражается отдельная модель предметной области, которую разрабатывает команда.")]),e._v(" "),r("li",[e._v("Язык является единым только в рамках команды, работающей над проектом в едином ограниченном контексте.")]),e._v(" "),r("li",[e._v("Попытка применить "),r("code",[e._v("единый язык")]),e._v(" в рамках всего предприятия или что хуже, среди нескольких предприятий, закончится провалом.")])]),e._v(" "),r("h3",{attrs:{id:"предметная-область-domain"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#предметная-область-domain"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#%D0%9F%D1%80%D0%B5%D0%B4%D0%BC%D0%B5%D1%82%D0%BD%D0%B0%D1%8F-%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("Предметная область (Domain)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Это то, что делает организация, и среда, в которой она это делает. Разработчик программного обеспечения для организации обязательно работает в ее "),r("code",[e._v("предметной области")]),e._v(". Следует понимать, что при разработке модели предметной области необходимо сосредоточиться в определенной "),r("code",[e._v("подобласти")]),e._v(", так как практически невозможно создать единственную, всеобъемлющую модель бизнеса даже умеренно сложной организации. Очень важно разделять модели на логические разделенные "),r("code",[e._v("предметные подобласти")]),e._v(" (Subdomain) всей "),r("code",[e._v("предметной области")]),e._v(", согласно их фактической функциональности. "),r("code",[e._v("Подобласти")]),e._v(" позволяют быстрее определить разные части "),r("code",[e._v("предметной области")]),e._v(", необходимые для решения конкретной задачи")]),e._v(" "),r("h3",{attrs:{id:"смысловое-ядро-core-domain"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#смысловое-ядро-core-domain"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#%D0%A1%D0%BC%D1%8B%D1%81%D0%BB%D0%BE%D0%B2%D0%BE%D0%B5-%D1%8F%D0%B4%D1%80%D0%BE-core-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("Смысловое ядро (Core domain)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Очень важный аспект подхода DDD. "),r("code",[e._v("Смысловое ядро")]),e._v(" – это "),r("code",[e._v("подобласть")]),e._v(", имеющая первостепенное значение для организации. Со стратегической точки зрения бизнес должен выделяться своим "),r("code",[e._v("смысловым ядром")]),e._v(". Большинство DDD проектов сосредоточены именно на "),r("code",[e._v("смысловом ядре")]),e._v(". Лучшие разработчики и эксперты должны быть задействованы именно в этой "),r("code",[e._v("подобласти")]),e._v(". Большинство инвестиций должны быть направлены именно сюда для достижения преимущества для бизнеса и получения наибольшей прибыли.")]),e._v(" "),r("h3",{attrs:{id:"пространство-задач-и-пространство-решении"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#пространство-задач-и-пространство-решении"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#%D0%9F%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE-%D0%B7%D0%B0%D0%B4%D0%B0%D1%87-%D0%B8-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B9",target:"_blank",rel:"noopener noreferrer"}},[e._v("Пространство задач и пространство решений"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("code",[e._v("Предметные области")]),e._v(" из пространства задач и пространства решений. Пространство задач позволяет думать о стратегической бизнес проблеме, которая должна быть решена, а пространство решений, сосредоточится на том, как реализуется программное обеспечение, чтобы решить бизнес проблему.")]),e._v(" "),r("ul",[r("li",[e._v("Пространство задач – части "),r("code",[e._v("предметной области")]),e._v(", которые необходимы, чтобы создать "),r("code",[e._v("смысловое ядро")]),e._v(". Это комбинация "),r("code",[e._v("смыслового ядра")]),e._v(" и "),r("code",[e._v("подобластей")]),e._v(", которое это ядро должно использовать.")]),e._v(" "),r("li",[e._v("Пространство решений – один или несколько "),r("code",[e._v("ограниченных контекстов")]),e._v(", набор конкретных моделей программного обеспечения. Разработанный "),r("code",[e._v("ограниченный контекст")]),e._v(" – это конкретное решение, представление реализации.")])]),e._v(" "),r("p",[e._v("Идеальным вариантом является обеспечение однозначного соответствия между подобластями и ограниченными контекстами. Таким образом, объединяются пространство задач и пространство решений, выделяются модели предметной области в четко определенные области в зависимости от поставленных целей. Если система не разрабатывается с нуля, она часто представляет собой большой комок грязи, где подобласти пересекаются с ограниченными контекстами.")]),e._v(" "),r("h2",{attrs:{id:"тактическое-проектирование"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#тактическое-проектирование"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#%D0%A2%D0%B0%D0%BA%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5",target:"_blank",rel:"noopener noreferrer"}},[e._v("Тактическое проектирование"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Использование технических, структурных паттернов в вашем коде, для отражения результатов стратегического проектирования непосредственно в коде приложения.")]),e._v(" "),r("h3",{attrs:{id:"entity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#entity",target:"_blank",rel:"noopener noreferrer"}},[e._v("Entity"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Если какое-то понятие предметной области является уникальным и отличным от всех других объектов в системе, то для его моделирования используется "),r("code",[e._v("сущность")]),e._v(". Такие "),r("code",[e._v("объекты-сущности")]),e._v(" могут сильно отличаться своей формой за весь цикл существования, тем не менее их всегда можно однозначно идентифицировать и найти по запросу. Для этого используются уникальные идентификаторы, создание которых необходимо продумать в первую очередь при проектировании "),r("code",[e._v("сущности")]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"value-object"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#value-object"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#value-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("Value Object"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("A small simple object, like money or a date range, whose equality isn't based on identity")])]),e._v(" "),r("p",[e._v("Если для объекта не важна индивидуальность, если он полностью определяется своими атрибутами, его следует считать "),r("code",[e._v("объектом-значением")]),e._v(". Чтобы выяснить, является ли какое-то понятие "),r("code",[e._v("значением")]),e._v(", необходимо выяснить, обладает ли оно большинством из следующих характеристик:")]),e._v(" "),r("ul",[r("li",[e._v("Оно измеряет, оценивает или описывает объект предметной области;")]),e._v(" "),r("li",[e._v("Должен быть неизменяем (immutable): при попытке обновления значения свойств мы должны создать и вернуть новый экземпляр VO")]),e._v(" "),r("li",[e._v("Оно моделирует нечто концептуально целостное, объединяя связанные атрибуты в одно целое;")]),e._v(" "),r("li",[e._v("При изменении способа измерения или описания его можно полностью заменить;")]),e._v(" "),r("li",[e._v("Его можно сравнивать с другими объектами с помощью отношения равенства "),r("code",[e._v("значений")]),e._v(". Два VO считаются одинаковыми тогда и только тогда, когда все поля VO равны")]),e._v(" "),r("li",[e._v("Оно предоставляет связанным с ним объектам "),r("code",[e._v("функцию без побочных эффектов")]),e._v(".")]),e._v(" "),r("li",[e._v("Состоит только из других VO и примитивов(не может содержать сущность или сервис)")]),e._v(" "),r("li",[e._v("Должен содержать в себе логику самовалидации: нельзя невалидный VO, исключение должно выкидываться прямо из метода VO(конструктор или клон).")])]),e._v(" "),r("h3",{attrs:{id:"domain-service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#domain-service"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#domain-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("Domain Service"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Используя единый язык, существительные этого языка отражаются в объекты, а глаголы отражаются в поведения этих объектов. Очень часто существуют глаголы или какие-то действия, которые нельзя отнести к какой-то сущности или к какому-то объекту-значению. Если существует такого рода операция в предметной области, ее объявляют как Domain Service (она отличается от прикладной службы, которая является клиентом). Есть три характеристики служб:")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Операция, выполняемая службой, относится к концепции предметной области, которая не принадлежит ни одной из существующих сущностей;")])]),e._v(" "),r("li",[r("p",[e._v("Операция выполняется над различными объектами модели предметной области;")])]),e._v(" "),r("li",[r("p",[e._v("Операция не имеет состояния.")])])]),e._v(" "),r("h3",{attrs:{id:"domain-event"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#domain-event"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#domain-event",target:"_blank",rel:"noopener noreferrer"}},[r("strong",[e._v("Domain Event")]),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Событие — это то, что произошло в прошлом. Логически, событие предметной области — это то, что произошло в конкретной предметной области, и то, о чем должны быть в курсе и на что должны реагировать другие части той же предметной области. Должны быть иммутабельными(так как нельзя менять прошлое). Название должно описывать случившиеся в прошлом событие.")]),e._v(" "),r("h3",{attrs:{id:"module-модуль"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#module-модуль"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#module%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C",target:"_blank",rel:"noopener noreferrer"}},[e._v("Module(Модуль)"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("code",[e._v("Модули")]),e._v(" внутри модели являются именованными контейнерами для некоторой группы объектов предметной области, тесно связанных друг с другом. Их цель – ослабление связей между классами, которые находятся в различных "),r("code",[e._v("модулях")]),e._v(". Так как "),r("code",[e._v("модули")]),e._v(" в подходе DDD – это неформальные или обобщенные разделы, их следует правильно называть. Выбор их имен является функцией "),r("code",[e._v("единого языка")]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"factory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#factory"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#factory",target:"_blank",rel:"noopener noreferrer"}},[e._v("Factory"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Некоторые "),r("code",[e._v("агрегаты")]),e._v(" или "),r("code",[e._v("сущности")]),e._v(" могут быть достаточно сложными. Сложный объект не может создавать сам себя посредством конструктора. (В книге Эрика Эванса был приведен пример: двигатель автомобиля, который собирается либо механиком, либо роботом, но он никак не должен собираться сам по себе.) Еще хуже, когда передают создание сложного объекта на клиент. Так, клиент должен знать о внутренней структуре и взаимосвязях внутри объекта. Это нарушает инкапсуляцию и привязывает клиента к определенной реализации (таким образом, при изменении объекта придется менять и реализацию клиента).")]),e._v(" "),r("p",[e._v("Лучше выполнять создание сложных "),r("code",[e._v("агрегатов")]),e._v(" или других объектов отдельно. Для этого используются "),r("code",[e._v("фабрики")]),e._v(". "),r("code",[e._v("Фабрики")]),e._v(" – элементы программы, обязанности которого создавать другие объекты.")]),e._v(" "),r("h3",{attrs:{id:"aggregate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aggregate"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#aggregate",target:"_blank",rel:"noopener noreferrer"}},[e._v("Aggregate"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("code",[e._v("Агрегатом")]),e._v(" называется кластер из объектов "),r("code",[e._v("сущностей")]),e._v(" или "),r("code",[e._v("значений")]),e._v(". То есть эти объекты рассматриваются как единое целое с точки зрения изменения данных. У каждого "),r("code",[e._v("агрегата")]),e._v(" есть корень "),r("code",[e._v("Aggregate Root")]),e._v(" и граница, внутри которой всегда должны быть удовлетворены инварианты.")]),e._v(" "),r("p",[e._v("Все обращения к "),r("code",[e._v("агрегату")]),e._v(" должны осуществляться через его "),r("code",[e._v("корень")]),e._v(", который представляет собой "),r("code",[e._v("сущность")]),e._v(" с глобально уникальным идентификатором. Все внутренние объекты "),r("code",[e._v("агрегата")]),e._v(" имеют только локальную идентичность, они могут ссылаться друг на друга как угодно. Внешние объекты могут хранить только ссылку на "),r("code",[e._v("корень")]),e._v(", а не на внутренние объекты.")]),e._v(" "),r("h3",{attrs:{id:"repository-репозитории"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repository-репозитории"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://backendinterview.ru/architecture/ddd#repository%D0%A0%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9",target:"_blank",rel:"noopener noreferrer"}},[e._v("Repository(Репозиторий)"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Репозиторий - область памяти, которая предназначена для безопасного хранения помещенных в нее элементов. Именно этим является Репозиторий в DDD. Репозиторий используется для "),r("code",[e._v("агрегатов")]),e._v(". Помещая "),r("code",[e._v("агрегат")]),e._v(" в соответствующий Репозиторий, а затем извлекая его оттуда, вы получаете целостный объект. Если "),r("code",[e._v("агрегат")]),e._v(" будет изменен, то изменения будут сохранены. Если "),r("code",[e._v("агрегат")]),e._v(" будет удален, то его уже нельзя будет извлечь.")]),e._v(" "),r("p",[e._v("Каждый "),r("code",[e._v("агрегат")]),e._v(", предполагающий постоянное хранение, имеет свой Репозиторий. Зачастую в Репозитории реализуются методы для выборки полностью сгенерированных агрегатов по каким-то критериям.")]),e._v(" "),r("p",[e._v("Есть два типа Repository:")]),e._v(" "),r("ol",[r("li",[e._v("Ориентированные на имитацию коллекций;")]),e._v(" "),r("li",[e._v("Ориентированные на механизм постоянного хранения.")])]),e._v(" "),r("p",[r("strong",[e._v("Application Layer")])]),e._v(" "),r("p",[r("em",[e._v("Дополнительно:")])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://habr.com/post/316438/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DDD: стратегическое проектирование"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://habr.com/post/316890/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DDD: тактическое проектирование"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://sergeyteplyakov.blogspot.com/2014/02/ddd.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ключевые концепции DDD"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://habr.com/post/334126/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Domain Driven Design на практике"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://habr.com/post/61524/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DDD: Domain Driven Design"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=_.exports}}]);