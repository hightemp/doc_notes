(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{544:function(e,a,t){"use strict";t.r(a);var r=t(14),n=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{pre:!0},[a("h2",{pre:!0,attrs:{id:"простая-пагинация-страниц-в-приложении-flask"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#простая-пагинация-страниц-в-приложении-flask"}},[e._v("#")]),e._v(" Простая пагинация страниц в приложении Flask.")]),e._v(" "),a("p",[e._v("{% raw %}")]),e._v(" "),a("p",[e._v("Проблему разбивки выводимых записей на несколько страниц хорошо решает расширение Flask "),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/veb-frejmvork-flask-python/flask-sqlalchemy/",title:"Расширение Flask-SQLAlchemy для приложения Flask в Python.",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Flask-SQLAlchemy")]),a("OutboundLink",{pre:!0})],1),e._v(". Это расширение поставляется с очень хорошим классом "),a("code",[e._v("flask_sqlalchemy.Pagination()")]),e._v(".")]),e._v(" "),a("p",[e._v('Но как быть разработчикам, которые не хотят замедлять работу приложения, увеличивать потребление оперативной памяти сервера и повышать нагрузку на базу данных внедрением дополнительных абстракций, таких как ORM SQLAlchemy? Как быть с пагинацией разработчикам, которые используют в своих проектах "'),a("em",[e._v("ванильный")]),e._v('" SQL. Ответ прост, необходимо разработать свой класс пагинации или воспользоваться расширением '),a("code",[e._v("flask-paginate")]),e._v(", которое не имеет зависимостей от ORM.")]),e._v(" "),a("p",[a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/veb-frejmvork-flask-python/flask-paginate/",title:"Расширение Flask-Paginate для приложения Flask в Python.",target:"_blank",rel:"noopener noreferrer"}},[e._v("Модуль "),a("code",[e._v("flask-paginate")]),a("OutboundLink",{pre:!0})],1),e._v(" представляет собой простое расширение "),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/veb-frejmvork-flask-python/",title:"Веб фреймворк Flask в Python.",target:"_blank",rel:"noopener noreferrer"}},[e._v("фреймворка "),a("code",[e._v("flask")]),a("OutboundLink",{pre:!0})],1),e._v(" для разбивки выводимых записей на несколько страниц, которое поддерживает разметку пагинации нескольких популярных CSS-фреймворков.")]),e._v(" "),a("blockquote",[a("p",[e._v("Разбивка на страницы (пагинация) в шаблоне "),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/modul-jinja2-python/",title:"Модуль jinja2 в Python, язык шаблонов.",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("jinja2")]),a("OutboundLink",{pre:!0})],1),e._v(" выводится одним тегом "),a("code",[e._v("{{ pagination.links }}")]),e._v(".")])]),e._v(" "),a("p",[a("img",{pre:!0,attrs:{src:"https://flask-paginate.readthedocs.io/en/master/_images/paginate-links.png",alt:"Скриншот ссылок на страницы",title:"Внешний вид flask-paginate ссылок на страницы"}})]),e._v(" "),a("h3",{pre:!0,attrs:{id:"поддерживаемые-css-фреимворки"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#поддерживаемые-css-фреимворки"}},[e._v("#")]),e._v(" Поддерживаемые CSS-фреймворки:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Bootstrap 5")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Bootstrap 4")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Bootstrap 3")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Bootstrap 2")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Bulma")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Foundation")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("SemanticUI")]),e._v(";")]),e._v(" "),a("li",[a("code",[e._v("Materialize framework")]),e._v(";")])]),e._v(" "),a("h3",{pre:!0,attrs:{id:"установка-flask-paginate-в-виртуальное-окружение"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#установка-flask-paginate-в-виртуальное-окружение"}},[e._v("#")]),e._v(" Установка "),a("code",[e._v("flask-paginate")]),e._v(" в виртуальное окружение.")]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("# создаем виртуальное окружение, если нет\n$ python3 -m venv .venv --prompt VirtualEnv\n# активируем виртуальное окружение \n$ source .venv/bin/activate\n# обновляем `pip`\n(VirtualEnv):~$ python3 -m pip install -U pip\n# ставим модуль `flask-paginate`\n(VirtualEnv):~$ python3 -m pip install -U flask-paginate\n")])])]),a("h2",{pre:!0,attrs:{id:"информация-о-разбивке-на-странице"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#информация-о-разбивке-на-странице"}},[e._v("#")]),e._v(" Информация о разбивке на странице.")]),e._v(" "),a("p",[a("img",{pre:!0,attrs:{src:"https://flask-paginate.readthedocs.io/en/master/_images/paginate-info2.png",alt:"Скриншот информации о разбивке на страницы",title:"Внешний вид информации о разбивке на страницы"}})]),e._v(" "),a("p",[e._v('Если нужно отобразить информацию о разбивке на страницы (например "'),a("em",[e._v("всего 100 записей, отображаются с 20 по 30")]),e._v('") необходимо разместить '),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/modul-jinja2-python/",title:"Модуль jinja2 в Python, язык шаблонов.",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("jinja2")]),a("OutboundLink",{pre:!0})],1),e._v(" тег "),a("code",[e._v("{{ pagination.info }}")]),e._v(" в шаблоне страницы в требуемом месте и добавить следующие строки CSS-разметки в файл проекта:")]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v(".pagination-page-info {\n    padding: .6em;\n    padding-left: 0;\n    width: 40em;\n    margin: .5em;\n    margin-left: 0;\n    font-size: 12px;\n}\n.pagination-page-info b {\n    color: black;\n    background: #6aa6ed;\n    padding-left: 2px;\n    padding: .1em .25em;\n    font-size: 150%;\n}\n")])])]),a("h2",{pre:!0,attrs:{id:"как-использовать"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#как-использовать"}},[e._v("#")]),e._v(" Как использовать?")]),e._v(" "),a("p",[e._v("Пример будет а чистом SQL (чтобы было понятнее, что происходит) с использованием драйвера БД MySQLdb. Думаем, что перевести SQL-запросы в ORM "),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/packages/veb-frejmvork-flask-python/flask-sqlalchemy/",title:"Расширение Flask-SQLAlchemy для приложения Flask в Python.",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Flask-SQLAlchemy")]),a("OutboundLink",{pre:!0})],1),e._v(" не составит труда.")]),e._v(" "),a("p",[e._v("И так, в файле представлений Flask (например, "),a("code",[e._v("user_search.py")]),e._v("):")]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("from flask import Blueprint\nfrom flask_paginate import Pagination, get_page_parameter\nfrom MySQLdb import connect, Error\nfrom contextlib import closing\n\nmod = Blueprint('users', __name__)\n\n@mod.route('/search/', methods=['GET'])\ndef search():\n    # словарь для передачи в шаблон\n    content = {}\n    # если в URL присутствует параметр запроса 'q'\n    q = request.args.get('q')\n    if q:\n        # открываем соединение с БД \n        db = connect(**MYSQLCONF)\n        # определяем текущую страницу пагинации\n        page = request.args.get(get_page_parameter(), type=int, default=1)\n        # количество записей на странице \n        limit = 20\n        # определяем `offset` записей для основного запроса \n        offset = 0 if page == 1 else (page-1) * limit\n        # общее кол-во строк для пагинации\n        total = 0\n        with closing(db.cursor()) as cursor:\n            cursor.execute(\"SELECT id FROM user WHERE nickname RLIKE %s\", (q,))\n            total = cursor.rowcount\n        # создаем информацию о пагинации\n        content['pagination'] = Pagination(page=page, total=total, search=True, \n                                           per_page=limit, bs_version=4)\n        # `page` это номер текущей страницы, параметр URL (по умолчанию 'page') из которого\n        #  он будет извлекаться. Его можно настроить, например Pagination(page_parameter='p', ...)\n        # или установить `PAGE_PARAMETER` в файле конфигурации.\n        # Также можно настроить параметр URL, который будет передавать количество выводимых  \n        # записей на одной странице, например Pagination(per_page_parameter='pp') или установить \n        # параметр `PER_PAGE` в файле конфигурации\n\n        if total: \n            # собственно сам поисковый запрос\n            with closing(db.cursor()) as cursor:\n                try:\n                    cursor.execute(\"SELECT id, nickname, name, last_name FROM user \"\n                                   \"WHERE nickname RLIKE %s LIMIT %s, %s\", (q, offset, limit,))\n                except Error as e:\n                    # print(f'{e.args[0]} ==> {e.args[1]}')\n                    abort(404)\n\n                # данные для отображения найденных пользователей\n                content['user_search'] = []\n                for row in cursor.fetchall():\n                    content['user_search'].append((row[0], row[1], row[2], row[3]))\n        else:\n            abort(404)\n\n    if db:\n        # закрываем соединение с БД\n        db.close()\n    # возвращаем результат для шаблона 'user_search.html'\n    return render_template('user_search.html', content=content)\n")])])]),a("p",[e._v("И в шаблоне "),a("code",[e._v("user_search.html")]),e._v(":")]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("{# вывод информации о разбивке #}\n{{ content.pagination.info }}\n{# вывод самой пагинации #}\n{{ content.pagination.links }}\n\n{# Здесь выводится информация #}\n{# о найденных записях пользователей #}\n\n{# вывод самой пагинации #}\n{{ content.pagination.links }}\n")])])]),a("blockquote",[a("p",[e._v("Примечание. Модуль "),a("code",[e._v("flask-paginate")]),e._v(" очень хорошо работает с ЧПУ URL. Например:")])]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("@app.route('/<section>/', methods=['GET'])\n@app.route('/<section>/<int:cur_page>/', methods=['GET'])\ndef home(section, cur_page=1):\n    ...\n    limit = DISPLAY_ROWS\n    offset = 0 if cur_page == 1 else (cur_page-1)*limit\n    Pagination(page_parameter='cur_page', cur_page=cur_page, total=total, per_page=limit)\n    ...\n\nЭтот код будет обслуживать URL:\n \n-   первая страница - http://somesite.ru/section/ (можно назначить как `canonical`)\n-   вторая страница - http://somesite.ru/section/2/\n-  и т.д.\n")])])]),a("h2",{pre:!0,attrs:{id:"принимаемые-аргументы-конструктором-pagination"}},[a("a",{pre:!0,attrs:{class:"header-anchor",href:"#принимаемые-аргументы-конструктором-pagination"}},[e._v("#")]),e._v(" Принимаемые аргументы конструктором "),a("code",[e._v("Pagination()")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("page_parameter")]),e._v(": имя ("),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/tutorial/osnovnye-vstroennye-tipy-python/tip-dannyh-str-tekstovye-stroki/",title:"Текстовые строки str в Python.",target:"_blank",rel:"noopener noreferrer"}},[e._v("строка"),a("OutboundLink",{pre:!0})],1),e._v(") параметра URL в GET запросе (например "),a("code",[e._v("/?page=2&q=vasya")]),e._v(" ), для извлечения из запроса индекса текущей страницы (по умолчанию "),a("code",[e._v("'page'")]),e._v(");")]),e._v(" "),a("li",[a("code",[e._v("page")]),e._v(": номер текущей страницы. Имя этого аргумента зависит от "),a("code",[e._v("page_parameter")]),e._v(". Если задан "),a("code",[e._v("page_parameter='p'")]),e._v(", то имя этого аргумента становиться "),a("code",[e._v("p")]),e._v(";")])]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("# по умолчанию\nPagination(page=page, total=total, per_page=15)\n# переопределим `page_parameter`, в этом случае имя \n# аргумента `page` трансформируется в имя `p`\nPagination(page_parameter='p', p=page, total=total, per_page=15)\n")])])]),a("ul",[a("li",[a("p",[a("code",[e._v("per_page_parameter")]),e._v(": имя ("),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/tutorial/osnovnye-vstroennye-tipy-python/tip-dannyh-str-tekstovye-stroki/",title:"Текстовые строки str в Python.",target:"_blank",rel:"noopener noreferrer"}},[e._v("строка"),a("OutboundLink",{pre:!0})],1),e._v(") параметра URL в GET запросе (например "),a("code",[e._v("/?per_page=15&page=2&q=vasya")]),e._v(" ), для извлечения из запроса количества отображаемых записей на одной странице (по умолчанию "),a("code",[e._v("'per_page'")]),e._v(");")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("per_page")]),e._v(": сколько записей нужно отображать на одной странице. Имя этого аргумента зависит от "),a("code",[e._v("per_page_parameter")]),e._v(". Если задан "),a("code",[e._v("per_page_parameter='pp'")]),e._v(", то имя этого аргумента становиться "),a("code",[e._v("pp")]),e._v(";")])])]),e._v(" "),a("div",{pre:!0,attrs:{class:"language- extra-class"}},[a("pre",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[a("code",[e._v("# по умолчанию\n    Pagination(page=page, total=total, per_page=15)\n    # переопределим `per_page_parameter`, в этом случае имя \n    # аргумента `per_page` трансформируется в имя `pp`\n    Pagination(p=page, total=total, per_page_parameter='pp', pp=15)\n")])])]),a("ul",[a("li",[a("p",[a("code",[e._v("inner_window")]),e._v(": количество отображаемых ссылок пагинации вокруг текущей страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("outer_window")]),e._v(": количество отображаемых ссылок пагинации рядом с первой и последней страницей;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("prev_label")]),e._v(": текст для предыдущей страницы, по умолчанию "),a("code",[e._v("'&laquo;'")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("next_label")]),e._v(": текст для следующей страницы, по умолчанию "),a("code",[e._v("'&raquo;'")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("total")]),e._v(": общее количество записей для разбивки на страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("css_framework")]),e._v(": используемый CSS-фреймворк, по умолчанию "),a("code",[e._v("'bootstrap'")]),e._v(", принимаемые строки: "),a("code",[e._v("'bootstrap'")]),e._v(", "),a("code",[e._v("'semantic'")]),e._v(", "),a("code",[e._v("'foundation'")]),e._v(", "),a("code",[e._v("'bulma'")]),e._v(", "),a("code",[e._v("'materialize'")]),e._v(";")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("bs_version")]),e._v(": версия CSS-фреймворка "),a("code",[e._v("bootstrap")]),e._v(", по умолчанию 2;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("display_msg")]),e._v(": настройка строки информации о разбивке на страницы, по умолчанию "),a("code",[e._v('"displaying <b>{start} - {end}</b> {record_name} in total <b>{total}</b>"')]),e._v(" ;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("search")]),e._v(": если "),a("code",[e._v("True")]),e._v(", то показывает строку с сообщением аргумента "),a("code",[e._v("search_msg")]),e._v(", иначе будет выведено сообщение аргумента "),a("code",[e._v("display_msg")]),e._v(";")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("found")]),e._v(": количество найденных записей при поиске "),a("code",[e._v("{found}")]),e._v(" в строке аргумента "),a("code",[e._v("search_msg")]),e._v(" (по умолчанию равно аргументу "),a("code",[e._v("total")]),e._v(");")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("record_name")]),e._v(": текст {record_name}, отображаемый в строке аргумента "),a("code",[e._v("search_msg")]),e._v(" и "),a("code",[e._v("display_msg")]),e._v(";")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("search_msg")]),e._v(": настройка строки при поиске, по умолчанию "),a("code",[e._v('"found <b>{found}</b> {record_name}, displaying <b>{start} - {end}</b>"')]),e._v(";")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("link_size")]),e._v(": размер шрифта ссылок пагинации на страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("alignment")]),e._v(": выравнивание ссылок по страницам;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("href")]),e._v(": добавляет пользовательский "),a("code",[e._v("href")]),e._v(" для ссылок пагинации - поддерживает формы с методом "),a("code",[e._v("POST")]),e._v(". Строка URL должна содержать "),a("code",[e._v("{0}")]),e._v(" (см. "),a("a",{pre:!0,attrs:{href:"https://docs-python.ru/tutorial/operatsii-tekstovymi-strokami-str-python/metod-str-format/",title:"Метод str.format() в Python, форматирует строку.",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("str.format()")]),a("OutboundLink",{pre:!0})],1),e._v(") для форматирования номера страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("show_single_page")]),e._v(": если "),a("code",[e._v("True")]),e._v(", то будет выводить пагинацию даже для одной страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("anchor")]),e._v(": параметр привязки, добавляется к "),a("code",[e._v("href")]),e._v(" URL-страницы;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("format_total")]),e._v(": общий числовой формат, если "),a("code",[e._v("True")]),e._v(", то "),a("code",[e._v("1,234")]),e._v(", по умолчанию "),a("code",[e._v("False")]),e._v(" (без запятой);")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("format_number")]),e._v(": числовой формат начала и конца пагинации, если "),a("code",[e._v("True")]),e._v(", то "),a("code",[e._v("1,234")]),e._v(", по умолчанию "),a("code",[e._v("False")]),e._v(" (без запятой);")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("url_coding")]),e._v(": кодировка для кодировки URL, по умолчанию utf-8;")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("bulma_style")]),e._v(": стиль ссылки на страницу для CSS-фреймворка "),a("code",[e._v("bulma")]),e._v(".")])])]),e._v(" "),a("p",[e._v("{% endraw %}")])])])}),[],!1,null,null,null);a.default=n.exports}}]);